// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: src/main/protobuf/failure_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "failure_details";

export interface FailureDetailMetadata {
  exitCode: number;
}

/**
 * The FailureDetail message type is designed such that consumers can extract a
 * basic classification of a FailureDetail message even if the consumer was
 * built with a stale definition. This forward compatibility is implemented via
 * conventions on FailureDetail and its submessage types, as follows.
 *
 * *** FailureDetail field numbers
 *
 * Field numbers 1 through 100 (inclusive) are reserved for generally applicable
 * values. Any number of these fields may be set on a FailureDetail message.
 *
 * Field numbers 101 through 10,000 (inclusive) are reserved for use inside the
 * "oneof" structure. Only one of these values should be set on a FailureDetail
 * message.
 *
 * Additional fields numbers are unlikely to be needed, but, for extreme future-
 * proofing purposes, field numbers 10,001 through 1,000,000 (inclusive;
 * excluding protobuf's reserved range 19000 through 19999) are reserved for
 * additional generally applicable values.
 *
 * *** FailureDetail's "oneof" submessages
 *
 * Each field in the "oneof" structure is a submessage corresponding to a
 * category of failure.
 *
 * In each of these submessage types, field number 1 is an enum whose values
 * correspond to a subcategory of the failure. Generally, the enum's constant
 * which maps to 0 should be interpreted as "unspecified", though this is not
 * required.
 *
 * *** Recommended forward compatibility strategy
 *
 * The recommended forward compatibility strategy is to reduce a FailureDetail
 * message to a pair of integers.
 *
 * The first integer corresponds to the field number of the submessage set
 * inside FailureDetail's "oneof", which corresponds with the failure's
 * category.
 *
 * The second integer corresponds to the value of the enum at field number 1
 * within that submessage, which corresponds with the failure's subcategory.
 *
 * WARNING: This functionality is experimental and should not be relied on at
 * this time.
 * TODO(mschaller): remove experimental warning
 */
export interface FailureDetail {
  /**
   * A short human-readable message describing the failure, for debugging.
   *
   * This value is *not* intended to be used algorithmically.
   */
  message: string;
  interrupted?: Interrupted | undefined;
  externalRepository?: ExternalRepository | undefined;
  buildProgress?: BuildProgress | undefined;
  remoteOptions?: RemoteOptions | undefined;
  clientEnvironment?: ClientEnvironment | undefined;
  crash?: Crash | undefined;
  symlinkForest?: SymlinkForest | undefined;
  packageOptions?: PackageOptions | undefined;
  remoteExecution?: RemoteExecution | undefined;
  execution?: Execution | undefined;
  workspaces?: Workspaces | undefined;
  crashOptions?: CrashOptions | undefined;
  filesystem?: Filesystem | undefined;
  executionOptions?: ExecutionOptions | undefined;
  command?: Command | undefined;
  spawn?: Spawn | undefined;
  grpcServer?: GrpcServer | undefined;
  canonicalizeFlags?: CanonicalizeFlags | undefined;
  buildConfiguration?: BuildConfiguration | undefined;
  infoCommand?: InfoCommand | undefined;
  memoryOptions?: MemoryOptions | undefined;
  query?: Query | undefined;
  localExecution?: LocalExecution | undefined;
  actionCache?: ActionCache | undefined;
  fetchCommand?: FetchCommand | undefined;
  syncCommand?: SyncCommand | undefined;
  sandbox?: Sandbox | undefined;
  includeScanning?: IncludeScanning | undefined;
  testCommand?: TestCommand | undefined;
  actionQuery?: ActionQuery | undefined;
  targetPatterns?: TargetPatterns | undefined;
  cleanCommand?: CleanCommand | undefined;
  configCommand?: ConfigCommand | undefined;
  configurableQuery?: ConfigurableQuery | undefined;
  dumpCommand?: DumpCommand | undefined;
  helpCommand?: HelpCommand | undefined;
  mobileInstall?: MobileInstall | undefined;
  profileCommand?: ProfileCommand | undefined;
  runCommand?: RunCommand | undefined;
  versionCommand?: VersionCommand | undefined;
  printActionCommand?: PrintActionCommand | undefined;
  workspaceStatus?: WorkspaceStatus | undefined;
  javaCompile?: JavaCompile | undefined;
  actionRewinding?: ActionRewinding | undefined;
  cppCompile?: CppCompile | undefined;
  starlarkAction?: StarlarkAction | undefined;
  ninjaAction?: NinjaAction | undefined;
  dynamicExecution?: DynamicExecution | undefined;
  failAction?: FailAction | undefined;
  symlinkAction?: SymlinkAction | undefined;
  cppLink?: CppLink | undefined;
  ltoAction?: LtoAction | undefined;
  testAction?: TestAction | undefined;
  worker?: Worker | undefined;
  analysis?: Analysis | undefined;
  packageLoading?: PackageLoading | undefined;
  toolchain?: Toolchain | undefined;
  starlarkLoading?: StarlarkLoading | undefined;
  externalDeps?: ExternalDeps | undefined;
  diffAwareness?: DiffAwareness | undefined;
  modCommand?: ModCommand | undefined;
  buildReport?: BuildReport | undefined;
  skyfocus?: Skyfocus | undefined;
  remoteAnalysisCaching?: RemoteAnalysisCaching | undefined;
}

export interface Interrupted {
  code: Interrupted_Code;
}

export enum Interrupted_Code {
  /** INTERRUPTED_UNKNOWN - Unknown interrupt. Avoid using this code, instead use INTERRUPTED. */
  INTERRUPTED_UNKNOWN = 0,
  /** INTERRUPTED - Command was interrupted (cancelled). */
  INTERRUPTED = 28,
  /**
   * DEPRECATED_BUILD - The following more specific interrupt codes have been deprecated and
   * consolidated into INTERRUPTED.
   */
  DEPRECATED_BUILD = 4,
  DEPRECATED_BUILD_COMPLETION = 5,
  DEPRECATED_PACKAGE_LOADING_SYNC = 6,
  DEPRECATED_EXECUTOR_COMPLETION = 7,
  DEPRECATED_COMMAND_DISPATCH = 8,
  DEPRECATED_INFO_ITEM = 9,
  DEPRECATED_AFTER_QUERY = 10,
  DEPRECATED_FETCH_COMMAND = 17,
  DEPRECATED_SYNC_COMMAND = 18,
  DEPRECATED_CLEAN_COMMAND = 20,
  DEPRECATED_MOBILE_INSTALL_COMMAND = 21,
  DEPRECATED_QUERY = 22,
  DEPRECATED_RUN_COMMAND = 23,
  DEPRECATED_OPTIONS_PARSING = 27,
  UNRECOGNIZED = -1,
}

export function interrupted_CodeFromJSON(object: any): Interrupted_Code {
  switch (object) {
    case 0:
    case "INTERRUPTED_UNKNOWN":
      return Interrupted_Code.INTERRUPTED_UNKNOWN;
    case 28:
    case "INTERRUPTED":
      return Interrupted_Code.INTERRUPTED;
    case 4:
    case "DEPRECATED_BUILD":
      return Interrupted_Code.DEPRECATED_BUILD;
    case 5:
    case "DEPRECATED_BUILD_COMPLETION":
      return Interrupted_Code.DEPRECATED_BUILD_COMPLETION;
    case 6:
    case "DEPRECATED_PACKAGE_LOADING_SYNC":
      return Interrupted_Code.DEPRECATED_PACKAGE_LOADING_SYNC;
    case 7:
    case "DEPRECATED_EXECUTOR_COMPLETION":
      return Interrupted_Code.DEPRECATED_EXECUTOR_COMPLETION;
    case 8:
    case "DEPRECATED_COMMAND_DISPATCH":
      return Interrupted_Code.DEPRECATED_COMMAND_DISPATCH;
    case 9:
    case "DEPRECATED_INFO_ITEM":
      return Interrupted_Code.DEPRECATED_INFO_ITEM;
    case 10:
    case "DEPRECATED_AFTER_QUERY":
      return Interrupted_Code.DEPRECATED_AFTER_QUERY;
    case 17:
    case "DEPRECATED_FETCH_COMMAND":
      return Interrupted_Code.DEPRECATED_FETCH_COMMAND;
    case 18:
    case "DEPRECATED_SYNC_COMMAND":
      return Interrupted_Code.DEPRECATED_SYNC_COMMAND;
    case 20:
    case "DEPRECATED_CLEAN_COMMAND":
      return Interrupted_Code.DEPRECATED_CLEAN_COMMAND;
    case 21:
    case "DEPRECATED_MOBILE_INSTALL_COMMAND":
      return Interrupted_Code.DEPRECATED_MOBILE_INSTALL_COMMAND;
    case 22:
    case "DEPRECATED_QUERY":
      return Interrupted_Code.DEPRECATED_QUERY;
    case 23:
    case "DEPRECATED_RUN_COMMAND":
      return Interrupted_Code.DEPRECATED_RUN_COMMAND;
    case 27:
    case "DEPRECATED_OPTIONS_PARSING":
      return Interrupted_Code.DEPRECATED_OPTIONS_PARSING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Interrupted_Code.UNRECOGNIZED;
  }
}

export function interrupted_CodeToJSON(object: Interrupted_Code): string {
  switch (object) {
    case Interrupted_Code.INTERRUPTED_UNKNOWN:
      return "INTERRUPTED_UNKNOWN";
    case Interrupted_Code.INTERRUPTED:
      return "INTERRUPTED";
    case Interrupted_Code.DEPRECATED_BUILD:
      return "DEPRECATED_BUILD";
    case Interrupted_Code.DEPRECATED_BUILD_COMPLETION:
      return "DEPRECATED_BUILD_COMPLETION";
    case Interrupted_Code.DEPRECATED_PACKAGE_LOADING_SYNC:
      return "DEPRECATED_PACKAGE_LOADING_SYNC";
    case Interrupted_Code.DEPRECATED_EXECUTOR_COMPLETION:
      return "DEPRECATED_EXECUTOR_COMPLETION";
    case Interrupted_Code.DEPRECATED_COMMAND_DISPATCH:
      return "DEPRECATED_COMMAND_DISPATCH";
    case Interrupted_Code.DEPRECATED_INFO_ITEM:
      return "DEPRECATED_INFO_ITEM";
    case Interrupted_Code.DEPRECATED_AFTER_QUERY:
      return "DEPRECATED_AFTER_QUERY";
    case Interrupted_Code.DEPRECATED_FETCH_COMMAND:
      return "DEPRECATED_FETCH_COMMAND";
    case Interrupted_Code.DEPRECATED_SYNC_COMMAND:
      return "DEPRECATED_SYNC_COMMAND";
    case Interrupted_Code.DEPRECATED_CLEAN_COMMAND:
      return "DEPRECATED_CLEAN_COMMAND";
    case Interrupted_Code.DEPRECATED_MOBILE_INSTALL_COMMAND:
      return "DEPRECATED_MOBILE_INSTALL_COMMAND";
    case Interrupted_Code.DEPRECATED_QUERY:
      return "DEPRECATED_QUERY";
    case Interrupted_Code.DEPRECATED_RUN_COMMAND:
      return "DEPRECATED_RUN_COMMAND";
    case Interrupted_Code.DEPRECATED_OPTIONS_PARSING:
      return "DEPRECATED_OPTIONS_PARSING";
    case Interrupted_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Spawn {
  code: Spawn_Code;
  /**
   * For Codes describing generic failure to spawn (eg. EXECUTION_FAILED and
   * EXECUTION_DENIED) the `catastrophic` field may be set to true indicating a
   * failure that immediately terminated the entire build tool.
   */
  catastrophic: boolean;
  /**
   * If Code is NON_ZERO_EXIT, the `spawn_exit_code` field may be set to the
   * non-zero exit code returned by the spawned process to the OS.
   *
   * NOTE: This field must not be confused with the build tool's overall
   * exit code.
   */
  spawnExitCode: number;
}

export enum Spawn_Code {
  SPAWN_UNKNOWN = 0,
  /**
   * NON_ZERO_EXIT - See the SpawnResult.Status Java enum for definitions of the following
   * Spawn failure codes.
   */
  NON_ZERO_EXIT = 1,
  TIMEOUT = 2,
  /**
   * OUT_OF_MEMORY - Note: Spawn OUT_OF_MEMORY leads to a BUILD_FAILURE exit_code because the
   * build tool itself did not run out of memory.
   */
  OUT_OF_MEMORY = 3,
  EXECUTION_FAILED = 4,
  EXECUTION_DENIED = 5,
  REMOTE_CACHE_FAILED = 6,
  COMMAND_LINE_EXPANSION_FAILURE = 7,
  EXEC_IO_EXCEPTION = 8,
  INVALID_TIMEOUT = 9,
  INVALID_REMOTE_EXECUTION_PROPERTIES = 10,
  NO_USABLE_STRATEGY_FOUND = 11,
  /**
   * UNSPECIFIED_EXECUTION_FAILURE - TODO(b/138456686): this code should be deprecated when SpawnResult is
   *   refactored to prohibit undetailed failures
   */
  UNSPECIFIED_EXECUTION_FAILURE = 12,
  FORBIDDEN_INPUT = 13,
  /**
   * REMOTE_CACHE_EVICTED - This also includes other remote cache errors, not just evictions.
   * TODO: Rename it to a more general name when
   * --experimental_remote_cache_eviction_retries is moved to
   * non-experimental.
   */
  REMOTE_CACHE_EVICTED = 14,
  SPAWN_LOG_IO_EXCEPTION = 15,
  UNRECOGNIZED = -1,
}

export function spawn_CodeFromJSON(object: any): Spawn_Code {
  switch (object) {
    case 0:
    case "SPAWN_UNKNOWN":
      return Spawn_Code.SPAWN_UNKNOWN;
    case 1:
    case "NON_ZERO_EXIT":
      return Spawn_Code.NON_ZERO_EXIT;
    case 2:
    case "TIMEOUT":
      return Spawn_Code.TIMEOUT;
    case 3:
    case "OUT_OF_MEMORY":
      return Spawn_Code.OUT_OF_MEMORY;
    case 4:
    case "EXECUTION_FAILED":
      return Spawn_Code.EXECUTION_FAILED;
    case 5:
    case "EXECUTION_DENIED":
      return Spawn_Code.EXECUTION_DENIED;
    case 6:
    case "REMOTE_CACHE_FAILED":
      return Spawn_Code.REMOTE_CACHE_FAILED;
    case 7:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return Spawn_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 8:
    case "EXEC_IO_EXCEPTION":
      return Spawn_Code.EXEC_IO_EXCEPTION;
    case 9:
    case "INVALID_TIMEOUT":
      return Spawn_Code.INVALID_TIMEOUT;
    case 10:
    case "INVALID_REMOTE_EXECUTION_PROPERTIES":
      return Spawn_Code.INVALID_REMOTE_EXECUTION_PROPERTIES;
    case 11:
    case "NO_USABLE_STRATEGY_FOUND":
      return Spawn_Code.NO_USABLE_STRATEGY_FOUND;
    case 12:
    case "UNSPECIFIED_EXECUTION_FAILURE":
      return Spawn_Code.UNSPECIFIED_EXECUTION_FAILURE;
    case 13:
    case "FORBIDDEN_INPUT":
      return Spawn_Code.FORBIDDEN_INPUT;
    case 14:
    case "REMOTE_CACHE_EVICTED":
      return Spawn_Code.REMOTE_CACHE_EVICTED;
    case 15:
    case "SPAWN_LOG_IO_EXCEPTION":
      return Spawn_Code.SPAWN_LOG_IO_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Spawn_Code.UNRECOGNIZED;
  }
}

export function spawn_CodeToJSON(object: Spawn_Code): string {
  switch (object) {
    case Spawn_Code.SPAWN_UNKNOWN:
      return "SPAWN_UNKNOWN";
    case Spawn_Code.NON_ZERO_EXIT:
      return "NON_ZERO_EXIT";
    case Spawn_Code.TIMEOUT:
      return "TIMEOUT";
    case Spawn_Code.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case Spawn_Code.EXECUTION_FAILED:
      return "EXECUTION_FAILED";
    case Spawn_Code.EXECUTION_DENIED:
      return "EXECUTION_DENIED";
    case Spawn_Code.REMOTE_CACHE_FAILED:
      return "REMOTE_CACHE_FAILED";
    case Spawn_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case Spawn_Code.EXEC_IO_EXCEPTION:
      return "EXEC_IO_EXCEPTION";
    case Spawn_Code.INVALID_TIMEOUT:
      return "INVALID_TIMEOUT";
    case Spawn_Code.INVALID_REMOTE_EXECUTION_PROPERTIES:
      return "INVALID_REMOTE_EXECUTION_PROPERTIES";
    case Spawn_Code.NO_USABLE_STRATEGY_FOUND:
      return "NO_USABLE_STRATEGY_FOUND";
    case Spawn_Code.UNSPECIFIED_EXECUTION_FAILURE:
      return "UNSPECIFIED_EXECUTION_FAILURE";
    case Spawn_Code.FORBIDDEN_INPUT:
      return "FORBIDDEN_INPUT";
    case Spawn_Code.REMOTE_CACHE_EVICTED:
      return "REMOTE_CACHE_EVICTED";
    case Spawn_Code.SPAWN_LOG_IO_EXCEPTION:
      return "SPAWN_LOG_IO_EXCEPTION";
    case Spawn_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ExternalRepository {
  /** Additional data could include external repository names. */
  code: ExternalRepository_Code;
}

export enum ExternalRepository_Code {
  EXTERNAL_REPOSITORY_UNKNOWN = 0,
  OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES = 1,
  BAD_DOWNLOADER_CONFIG = 2,
  REPOSITORY_MAPPING_RESOLUTION_FAILED = 3,
  CREDENTIALS_INIT_FAILURE = 4,
  BAD_REPO_CONTENTS_CACHE = 5,
  UNRECOGNIZED = -1,
}

export function externalRepository_CodeFromJSON(object: any): ExternalRepository_Code {
  switch (object) {
    case 0:
    case "EXTERNAL_REPOSITORY_UNKNOWN":
      return ExternalRepository_Code.EXTERNAL_REPOSITORY_UNKNOWN;
    case 1:
    case "OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES":
      return ExternalRepository_Code.OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES;
    case 2:
    case "BAD_DOWNLOADER_CONFIG":
      return ExternalRepository_Code.BAD_DOWNLOADER_CONFIG;
    case 3:
    case "REPOSITORY_MAPPING_RESOLUTION_FAILED":
      return ExternalRepository_Code.REPOSITORY_MAPPING_RESOLUTION_FAILED;
    case 4:
    case "CREDENTIALS_INIT_FAILURE":
      return ExternalRepository_Code.CREDENTIALS_INIT_FAILURE;
    case 5:
    case "BAD_REPO_CONTENTS_CACHE":
      return ExternalRepository_Code.BAD_REPO_CONTENTS_CACHE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExternalRepository_Code.UNRECOGNIZED;
  }
}

export function externalRepository_CodeToJSON(object: ExternalRepository_Code): string {
  switch (object) {
    case ExternalRepository_Code.EXTERNAL_REPOSITORY_UNKNOWN:
      return "EXTERNAL_REPOSITORY_UNKNOWN";
    case ExternalRepository_Code.OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES:
      return "OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES";
    case ExternalRepository_Code.BAD_DOWNLOADER_CONFIG:
      return "BAD_DOWNLOADER_CONFIG";
    case ExternalRepository_Code.REPOSITORY_MAPPING_RESOLUTION_FAILED:
      return "REPOSITORY_MAPPING_RESOLUTION_FAILED";
    case ExternalRepository_Code.CREDENTIALS_INIT_FAILURE:
      return "CREDENTIALS_INIT_FAILURE";
    case ExternalRepository_Code.BAD_REPO_CONTENTS_CACHE:
      return "BAD_REPO_CONTENTS_CACHE";
    case ExternalRepository_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BuildProgress {
  /** Additional data could include the build progress upload endpoint. */
  code: BuildProgress_Code;
}

export enum BuildProgress_Code {
  BUILD_PROGRESS_UNKNOWN = 0,
  OUTPUT_INITIALIZATION = 3,
  BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED = 4,
  BES_LOCAL_WRITE_ERROR = 5,
  BES_INITIALIZATION_ERROR = 6,
  BES_UPLOAD_TIMEOUT_ERROR = 7,
  BES_FILE_WRITE_TIMEOUT = 8,
  BES_FILE_WRITE_IO_ERROR = 9,
  BES_FILE_WRITE_INTERRUPTED = 10,
  BES_FILE_WRITE_CANCELED = 11,
  BES_FILE_WRITE_UNKNOWN_ERROR = 12,
  BES_UPLOAD_LOCAL_FILE_ERROR = 13,
  BES_STREAM_NOT_RETRYING_FAILURE = 14,
  BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR = 15,
  BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR = 16,
  BES_STREAM_COMPLETED_WITH_REMOTE_ERROR = 19,
  BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE = 17,
  UNRECOGNIZED = -1,
}

export function buildProgress_CodeFromJSON(object: any): BuildProgress_Code {
  switch (object) {
    case 0:
    case "BUILD_PROGRESS_UNKNOWN":
      return BuildProgress_Code.BUILD_PROGRESS_UNKNOWN;
    case 3:
    case "OUTPUT_INITIALIZATION":
      return BuildProgress_Code.OUTPUT_INITIALIZATION;
    case 4:
    case "BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED":
      return BuildProgress_Code.BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED;
    case 5:
    case "BES_LOCAL_WRITE_ERROR":
      return BuildProgress_Code.BES_LOCAL_WRITE_ERROR;
    case 6:
    case "BES_INITIALIZATION_ERROR":
      return BuildProgress_Code.BES_INITIALIZATION_ERROR;
    case 7:
    case "BES_UPLOAD_TIMEOUT_ERROR":
      return BuildProgress_Code.BES_UPLOAD_TIMEOUT_ERROR;
    case 8:
    case "BES_FILE_WRITE_TIMEOUT":
      return BuildProgress_Code.BES_FILE_WRITE_TIMEOUT;
    case 9:
    case "BES_FILE_WRITE_IO_ERROR":
      return BuildProgress_Code.BES_FILE_WRITE_IO_ERROR;
    case 10:
    case "BES_FILE_WRITE_INTERRUPTED":
      return BuildProgress_Code.BES_FILE_WRITE_INTERRUPTED;
    case 11:
    case "BES_FILE_WRITE_CANCELED":
      return BuildProgress_Code.BES_FILE_WRITE_CANCELED;
    case 12:
    case "BES_FILE_WRITE_UNKNOWN_ERROR":
      return BuildProgress_Code.BES_FILE_WRITE_UNKNOWN_ERROR;
    case 13:
    case "BES_UPLOAD_LOCAL_FILE_ERROR":
      return BuildProgress_Code.BES_UPLOAD_LOCAL_FILE_ERROR;
    case 14:
    case "BES_STREAM_NOT_RETRYING_FAILURE":
      return BuildProgress_Code.BES_STREAM_NOT_RETRYING_FAILURE;
    case 15:
    case "BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR":
      return BuildProgress_Code.BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR;
    case 16:
    case "BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR":
      return BuildProgress_Code.BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR;
    case 19:
    case "BES_STREAM_COMPLETED_WITH_REMOTE_ERROR":
      return BuildProgress_Code.BES_STREAM_COMPLETED_WITH_REMOTE_ERROR;
    case 17:
    case "BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE":
      return BuildProgress_Code.BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BuildProgress_Code.UNRECOGNIZED;
  }
}

export function buildProgress_CodeToJSON(object: BuildProgress_Code): string {
  switch (object) {
    case BuildProgress_Code.BUILD_PROGRESS_UNKNOWN:
      return "BUILD_PROGRESS_UNKNOWN";
    case BuildProgress_Code.OUTPUT_INITIALIZATION:
      return "OUTPUT_INITIALIZATION";
    case BuildProgress_Code.BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED:
      return "BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED";
    case BuildProgress_Code.BES_LOCAL_WRITE_ERROR:
      return "BES_LOCAL_WRITE_ERROR";
    case BuildProgress_Code.BES_INITIALIZATION_ERROR:
      return "BES_INITIALIZATION_ERROR";
    case BuildProgress_Code.BES_UPLOAD_TIMEOUT_ERROR:
      return "BES_UPLOAD_TIMEOUT_ERROR";
    case BuildProgress_Code.BES_FILE_WRITE_TIMEOUT:
      return "BES_FILE_WRITE_TIMEOUT";
    case BuildProgress_Code.BES_FILE_WRITE_IO_ERROR:
      return "BES_FILE_WRITE_IO_ERROR";
    case BuildProgress_Code.BES_FILE_WRITE_INTERRUPTED:
      return "BES_FILE_WRITE_INTERRUPTED";
    case BuildProgress_Code.BES_FILE_WRITE_CANCELED:
      return "BES_FILE_WRITE_CANCELED";
    case BuildProgress_Code.BES_FILE_WRITE_UNKNOWN_ERROR:
      return "BES_FILE_WRITE_UNKNOWN_ERROR";
    case BuildProgress_Code.BES_UPLOAD_LOCAL_FILE_ERROR:
      return "BES_UPLOAD_LOCAL_FILE_ERROR";
    case BuildProgress_Code.BES_STREAM_NOT_RETRYING_FAILURE:
      return "BES_STREAM_NOT_RETRYING_FAILURE";
    case BuildProgress_Code.BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR:
      return "BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR";
    case BuildProgress_Code.BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR:
      return "BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR";
    case BuildProgress_Code.BES_STREAM_COMPLETED_WITH_REMOTE_ERROR:
      return "BES_STREAM_COMPLETED_WITH_REMOTE_ERROR";
    case BuildProgress_Code.BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE:
      return "BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE";
    case BuildProgress_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RemoteOptions {
  code: RemoteOptions_Code;
}

export enum RemoteOptions_Code {
  REMOTE_OPTIONS_UNKNOWN = 0,
  REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR = 1,
  /** CREDENTIALS_READ_FAILURE - Credentials could not be read from the requested file/socket/process/etc. */
  CREDENTIALS_READ_FAILURE = 2,
  /** CREDENTIALS_WRITE_FAILURE - Credentials could not be written to a shared, temporary file. */
  CREDENTIALS_WRITE_FAILURE = 3,
  DOWNLOADER_WITHOUT_GRPC_CACHE = 4,
  EXECUTION_WITH_INVALID_CACHE = 5,
  UNRECOGNIZED = -1,
}

export function remoteOptions_CodeFromJSON(object: any): RemoteOptions_Code {
  switch (object) {
    case 0:
    case "REMOTE_OPTIONS_UNKNOWN":
      return RemoteOptions_Code.REMOTE_OPTIONS_UNKNOWN;
    case 1:
    case "REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR":
      return RemoteOptions_Code.REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR;
    case 2:
    case "CREDENTIALS_READ_FAILURE":
      return RemoteOptions_Code.CREDENTIALS_READ_FAILURE;
    case 3:
    case "CREDENTIALS_WRITE_FAILURE":
      return RemoteOptions_Code.CREDENTIALS_WRITE_FAILURE;
    case 4:
    case "DOWNLOADER_WITHOUT_GRPC_CACHE":
      return RemoteOptions_Code.DOWNLOADER_WITHOUT_GRPC_CACHE;
    case 5:
    case "EXECUTION_WITH_INVALID_CACHE":
      return RemoteOptions_Code.EXECUTION_WITH_INVALID_CACHE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteOptions_Code.UNRECOGNIZED;
  }
}

export function remoteOptions_CodeToJSON(object: RemoteOptions_Code): string {
  switch (object) {
    case RemoteOptions_Code.REMOTE_OPTIONS_UNKNOWN:
      return "REMOTE_OPTIONS_UNKNOWN";
    case RemoteOptions_Code.REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR:
      return "REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR";
    case RemoteOptions_Code.CREDENTIALS_READ_FAILURE:
      return "CREDENTIALS_READ_FAILURE";
    case RemoteOptions_Code.CREDENTIALS_WRITE_FAILURE:
      return "CREDENTIALS_WRITE_FAILURE";
    case RemoteOptions_Code.DOWNLOADER_WITHOUT_GRPC_CACHE:
      return "DOWNLOADER_WITHOUT_GRPC_CACHE";
    case RemoteOptions_Code.EXECUTION_WITH_INVALID_CACHE:
      return "EXECUTION_WITH_INVALID_CACHE";
    case RemoteOptions_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ClientEnvironment {
  code: ClientEnvironment_Code;
}

export enum ClientEnvironment_Code {
  CLIENT_ENVIRONMENT_UNKNOWN = 0,
  CLIENT_CWD_MALFORMED = 1,
  UNRECOGNIZED = -1,
}

export function clientEnvironment_CodeFromJSON(object: any): ClientEnvironment_Code {
  switch (object) {
    case 0:
    case "CLIENT_ENVIRONMENT_UNKNOWN":
      return ClientEnvironment_Code.CLIENT_ENVIRONMENT_UNKNOWN;
    case 1:
    case "CLIENT_CWD_MALFORMED":
      return ClientEnvironment_Code.CLIENT_CWD_MALFORMED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientEnvironment_Code.UNRECOGNIZED;
  }
}

export function clientEnvironment_CodeToJSON(object: ClientEnvironment_Code): string {
  switch (object) {
    case ClientEnvironment_Code.CLIENT_ENVIRONMENT_UNKNOWN:
      return "CLIENT_ENVIRONMENT_UNKNOWN";
    case ClientEnvironment_Code.CLIENT_CWD_MALFORMED:
      return "CLIENT_CWD_MALFORMED";
    case ClientEnvironment_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Crash {
  code: Crash_Code;
  /**
   * The cause chain of the crash, with the outermost throwable first. Limited
   * to the outermost exception and at most 4 nested causes (so, max size of 5).
   */
  causes: Throwable[];
  /** If Blaze OOM'd (code = CRASH_OOM), the category of cause of that OOM. */
  oomCauseCategory: Crash_OomCauseCategory;
}

export enum Crash_Code {
  CRASH_UNKNOWN = 0,
  CRASH_OOM = 1,
  UNRECOGNIZED = -1,
}

export function crash_CodeFromJSON(object: any): Crash_Code {
  switch (object) {
    case 0:
    case "CRASH_UNKNOWN":
      return Crash_Code.CRASH_UNKNOWN;
    case 1:
    case "CRASH_OOM":
      return Crash_Code.CRASH_OOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Crash_Code.UNRECOGNIZED;
  }
}

export function crash_CodeToJSON(object: Crash_Code): string {
  switch (object) {
    case Crash_Code.CRASH_UNKNOWN:
      return "CRASH_UNKNOWN";
    case Crash_Code.CRASH_OOM:
      return "CRASH_OOM";
    case Crash_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Crash_OomCauseCategory {
  /** NONE - This was not an OOM. */
  NONE = 0,
  /** ORGANIC - Normal OOM noticed in Blaze's app-land code. */
  ORGANIC = 1,
  /**
   * OOM_DETECTOR_OVERRIDE - Originally a crash, but changed to an OOM because Blaze's native code was
   * told by the JVM there was an OOM, and then Blaze's app-land code assumed
   * the crash was a symptom of that OOM.
   */
  OOM_DETECTOR_OVERRIDE = 2,
  /**
   * GC_THRASHING - Blaze gave up and pretended it OOM'd because its post-full-GC heap size
   * was too big after a number of full GCs within a time window.
   *
   * See --gc_thrashing_threshold and --gc_thrashing_limits.
   */
  GC_THRASHING = 3,
  /**
   * GC_CHURNING - Blaze gave up and pretended it OOM'd because it has spent too much of the
   * invocation wall time doing full GCs.
   *
   * See --gc_churning_threshold.
   */
  GC_CHURNING = 4,
  UNRECOGNIZED = -1,
}

export function crash_OomCauseCategoryFromJSON(object: any): Crash_OomCauseCategory {
  switch (object) {
    case 0:
    case "NONE":
      return Crash_OomCauseCategory.NONE;
    case 1:
    case "ORGANIC":
      return Crash_OomCauseCategory.ORGANIC;
    case 2:
    case "OOM_DETECTOR_OVERRIDE":
      return Crash_OomCauseCategory.OOM_DETECTOR_OVERRIDE;
    case 3:
    case "GC_THRASHING":
      return Crash_OomCauseCategory.GC_THRASHING;
    case 4:
    case "GC_CHURNING":
      return Crash_OomCauseCategory.GC_CHURNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Crash_OomCauseCategory.UNRECOGNIZED;
  }
}

export function crash_OomCauseCategoryToJSON(object: Crash_OomCauseCategory): string {
  switch (object) {
    case Crash_OomCauseCategory.NONE:
      return "NONE";
    case Crash_OomCauseCategory.ORGANIC:
      return "ORGANIC";
    case Crash_OomCauseCategory.OOM_DETECTOR_OVERRIDE:
      return "OOM_DETECTOR_OVERRIDE";
    case Crash_OomCauseCategory.GC_THRASHING:
      return "GC_THRASHING";
    case Crash_OomCauseCategory.GC_CHURNING:
      return "GC_CHURNING";
    case Crash_OomCauseCategory.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Throwable {
  /** The class name of the java.lang.Throwable. */
  throwableClass: string;
  /** The throwable's message. */
  message: string;
  /**
   * The result of calling toString on the deepest (i.e. closest to the
   * throwable's construction site) 1000 (or fewer) StackTraceElements.
   * Unstructured to simplify string matching.
   */
  stackTrace: string[];
}

export interface SymlinkForest {
  code: SymlinkForest_Code;
}

export enum SymlinkForest_Code {
  SYMLINK_FOREST_UNKNOWN = 0,
  TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT = 1,
  TOPLEVEL_OUTDIR_USED_AS_SOURCE = 2,
  CREATION_FAILED = 3,
  UNRECOGNIZED = -1,
}

export function symlinkForest_CodeFromJSON(object: any): SymlinkForest_Code {
  switch (object) {
    case 0:
    case "SYMLINK_FOREST_UNKNOWN":
      return SymlinkForest_Code.SYMLINK_FOREST_UNKNOWN;
    case 1:
    case "TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT":
      return SymlinkForest_Code.TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT;
    case 2:
    case "TOPLEVEL_OUTDIR_USED_AS_SOURCE":
      return SymlinkForest_Code.TOPLEVEL_OUTDIR_USED_AS_SOURCE;
    case 3:
    case "CREATION_FAILED":
      return SymlinkForest_Code.CREATION_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SymlinkForest_Code.UNRECOGNIZED;
  }
}

export function symlinkForest_CodeToJSON(object: SymlinkForest_Code): string {
  switch (object) {
    case SymlinkForest_Code.SYMLINK_FOREST_UNKNOWN:
      return "SYMLINK_FOREST_UNKNOWN";
    case SymlinkForest_Code.TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT:
      return "TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT";
    case SymlinkForest_Code.TOPLEVEL_OUTDIR_USED_AS_SOURCE:
      return "TOPLEVEL_OUTDIR_USED_AS_SOURCE";
    case SymlinkForest_Code.CREATION_FAILED:
      return "CREATION_FAILED";
    case SymlinkForest_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BuildReport {
  /**
   * Additional data for partial failures might include the build report that
   * failed to be written.
   */
  code: BuildReport_Code;
}

export enum BuildReport_Code {
  BUILD_REPORT_UNKNOWN = 0,
  BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS = 1,
  BUILD_REPORT_WRITE_FAILED = 2,
  UNRECOGNIZED = -1,
}

export function buildReport_CodeFromJSON(object: any): BuildReport_Code {
  switch (object) {
    case 0:
    case "BUILD_REPORT_UNKNOWN":
      return BuildReport_Code.BUILD_REPORT_UNKNOWN;
    case 1:
    case "BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS":
      return BuildReport_Code.BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS;
    case 2:
    case "BUILD_REPORT_WRITE_FAILED":
      return BuildReport_Code.BUILD_REPORT_WRITE_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BuildReport_Code.UNRECOGNIZED;
  }
}

export function buildReport_CodeToJSON(object: BuildReport_Code): string {
  switch (object) {
    case BuildReport_Code.BUILD_REPORT_UNKNOWN:
      return "BUILD_REPORT_UNKNOWN";
    case BuildReport_Code.BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS:
      return "BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS";
    case BuildReport_Code.BUILD_REPORT_WRITE_FAILED:
      return "BUILD_REPORT_WRITE_FAILED";
    case BuildReport_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Failure details for errors produced when using Skyfocus */
export interface Skyfocus {
  code: Skyfocus_Code;
}

export enum Skyfocus_Code {
  /**
   * INVALID_ACTIVE_DIRECTORIES - The defined working set cannot be used for the focused targets. For
   * example, this happens when the intersection of the working set and the
   * transitive closure of the focused target is empty.
   */
  INVALID_ACTIVE_DIRECTORIES = 0,
  /** NON_ACTIVE_DIRECTORIES_CHANGE - The user needs to augment their working set to include the new file(s). */
  NON_ACTIVE_DIRECTORIES_CHANGE = 1,
  CONFIGURATION_CHANGE = 2,
  DISALLOWED_OPERATION_ON_FOCUSED_GRAPH = 3,
  UNRECOGNIZED = -1,
}

export function skyfocus_CodeFromJSON(object: any): Skyfocus_Code {
  switch (object) {
    case 0:
    case "INVALID_ACTIVE_DIRECTORIES":
      return Skyfocus_Code.INVALID_ACTIVE_DIRECTORIES;
    case 1:
    case "NON_ACTIVE_DIRECTORIES_CHANGE":
      return Skyfocus_Code.NON_ACTIVE_DIRECTORIES_CHANGE;
    case 2:
    case "CONFIGURATION_CHANGE":
      return Skyfocus_Code.CONFIGURATION_CHANGE;
    case 3:
    case "DISALLOWED_OPERATION_ON_FOCUSED_GRAPH":
      return Skyfocus_Code.DISALLOWED_OPERATION_ON_FOCUSED_GRAPH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Skyfocus_Code.UNRECOGNIZED;
  }
}

export function skyfocus_CodeToJSON(object: Skyfocus_Code): string {
  switch (object) {
    case Skyfocus_Code.INVALID_ACTIVE_DIRECTORIES:
      return "INVALID_ACTIVE_DIRECTORIES";
    case Skyfocus_Code.NON_ACTIVE_DIRECTORIES_CHANGE:
      return "NON_ACTIVE_DIRECTORIES_CHANGE";
    case Skyfocus_Code.CONFIGURATION_CHANGE:
      return "CONFIGURATION_CHANGE";
    case Skyfocus_Code.DISALLOWED_OPERATION_ON_FOCUSED_GRAPH:
      return "DISALLOWED_OPERATION_ON_FOCUSED_GRAPH";
    case Skyfocus_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Failure details for errors produced during remote analysis caching. */
export interface RemoteAnalysisCaching {
  code: RemoteAnalysisCaching_Code;
}

export enum RemoteAnalysisCaching_Code {
  REMOTE_ANALYSIS_CACHING_UNKNOWN = 0,
  SERIALIZED_FRONTIER_PROFILE_FAILED = 1,
  PROJECT_FILE_NOT_FOUND = 2,
  INCOMPATIBLE_OPTIONS = 3,
  INVALID_SERVER_ADDRESS = 4,
  UNRECOGNIZED = -1,
}

export function remoteAnalysisCaching_CodeFromJSON(object: any): RemoteAnalysisCaching_Code {
  switch (object) {
    case 0:
    case "REMOTE_ANALYSIS_CACHING_UNKNOWN":
      return RemoteAnalysisCaching_Code.REMOTE_ANALYSIS_CACHING_UNKNOWN;
    case 1:
    case "SERIALIZED_FRONTIER_PROFILE_FAILED":
      return RemoteAnalysisCaching_Code.SERIALIZED_FRONTIER_PROFILE_FAILED;
    case 2:
    case "PROJECT_FILE_NOT_FOUND":
      return RemoteAnalysisCaching_Code.PROJECT_FILE_NOT_FOUND;
    case 3:
    case "INCOMPATIBLE_OPTIONS":
      return RemoteAnalysisCaching_Code.INCOMPATIBLE_OPTIONS;
    case 4:
    case "INVALID_SERVER_ADDRESS":
      return RemoteAnalysisCaching_Code.INVALID_SERVER_ADDRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteAnalysisCaching_Code.UNRECOGNIZED;
  }
}

export function remoteAnalysisCaching_CodeToJSON(object: RemoteAnalysisCaching_Code): string {
  switch (object) {
    case RemoteAnalysisCaching_Code.REMOTE_ANALYSIS_CACHING_UNKNOWN:
      return "REMOTE_ANALYSIS_CACHING_UNKNOWN";
    case RemoteAnalysisCaching_Code.SERIALIZED_FRONTIER_PROFILE_FAILED:
      return "SERIALIZED_FRONTIER_PROFILE_FAILED";
    case RemoteAnalysisCaching_Code.PROJECT_FILE_NOT_FOUND:
      return "PROJECT_FILE_NOT_FOUND";
    case RemoteAnalysisCaching_Code.INCOMPATIBLE_OPTIONS:
      return "INCOMPATIBLE_OPTIONS";
    case RemoteAnalysisCaching_Code.INVALID_SERVER_ADDRESS:
      return "INVALID_SERVER_ADDRESS";
    case RemoteAnalysisCaching_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PackageOptions {
  code: PackageOptions_Code;
}

export enum PackageOptions_Code {
  PACKAGE_OPTIONS_UNKNOWN = 0,
  PACKAGE_PATH_INVALID = 1,
  NONSINGLETON_PACKAGE_PATH = 4,
  UNRECOGNIZED = -1,
}

export function packageOptions_CodeFromJSON(object: any): PackageOptions_Code {
  switch (object) {
    case 0:
    case "PACKAGE_OPTIONS_UNKNOWN":
      return PackageOptions_Code.PACKAGE_OPTIONS_UNKNOWN;
    case 1:
    case "PACKAGE_PATH_INVALID":
      return PackageOptions_Code.PACKAGE_PATH_INVALID;
    case 4:
    case "NONSINGLETON_PACKAGE_PATH":
      return PackageOptions_Code.NONSINGLETON_PACKAGE_PATH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PackageOptions_Code.UNRECOGNIZED;
  }
}

export function packageOptions_CodeToJSON(object: PackageOptions_Code): string {
  switch (object) {
    case PackageOptions_Code.PACKAGE_OPTIONS_UNKNOWN:
      return "PACKAGE_OPTIONS_UNKNOWN";
    case PackageOptions_Code.PACKAGE_PATH_INVALID:
      return "PACKAGE_PATH_INVALID";
    case PackageOptions_Code.NONSINGLETON_PACKAGE_PATH:
      return "NONSINGLETON_PACKAGE_PATH";
    case PackageOptions_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RemoteExecution {
  code: RemoteExecution_Code;
}

/**
 * The association of some of these options with exit code 2, "command line
 * error", seems sketchy. Especially worth reconsidering are the channel init
 * failure modes, which can correspond to failures occurring in gRPC setup.
 * These all correspond with current Bazel behavior.
 */
export enum RemoteExecution_Code {
  REMOTE_EXECUTION_UNKNOWN = 0,
  CAPABILITIES_QUERY_FAILURE = 1,
  CREDENTIALS_INIT_FAILURE = 2,
  CACHE_INIT_FAILURE = 3,
  RPC_LOG_FAILURE = 4,
  EXEC_CHANNEL_INIT_FAILURE = 5,
  CACHE_CHANNEL_INIT_FAILURE = 6,
  DOWNLOADER_CHANNEL_INIT_FAILURE = 7,
  LOG_DIR_CLEANUP_FAILURE = 8,
  CLIENT_SERVER_INCOMPATIBLE = 9,
  DOWNLOADED_INPUTS_DELETION_FAILURE = 10,
  REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD = 11,
  REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS = 12,
  INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE = 13,
  REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE = 14,
  ILLEGAL_OUTPUT = 15,
  INVALID_EXEC_AND_PLATFORM_PROPERTIES = 16,
  TOPLEVEL_OUTPUTS_DOWNLOAD_FAILURE = 17,
  UNRECOGNIZED = -1,
}

export function remoteExecution_CodeFromJSON(object: any): RemoteExecution_Code {
  switch (object) {
    case 0:
    case "REMOTE_EXECUTION_UNKNOWN":
      return RemoteExecution_Code.REMOTE_EXECUTION_UNKNOWN;
    case 1:
    case "CAPABILITIES_QUERY_FAILURE":
      return RemoteExecution_Code.CAPABILITIES_QUERY_FAILURE;
    case 2:
    case "CREDENTIALS_INIT_FAILURE":
      return RemoteExecution_Code.CREDENTIALS_INIT_FAILURE;
    case 3:
    case "CACHE_INIT_FAILURE":
      return RemoteExecution_Code.CACHE_INIT_FAILURE;
    case 4:
    case "RPC_LOG_FAILURE":
      return RemoteExecution_Code.RPC_LOG_FAILURE;
    case 5:
    case "EXEC_CHANNEL_INIT_FAILURE":
      return RemoteExecution_Code.EXEC_CHANNEL_INIT_FAILURE;
    case 6:
    case "CACHE_CHANNEL_INIT_FAILURE":
      return RemoteExecution_Code.CACHE_CHANNEL_INIT_FAILURE;
    case 7:
    case "DOWNLOADER_CHANNEL_INIT_FAILURE":
      return RemoteExecution_Code.DOWNLOADER_CHANNEL_INIT_FAILURE;
    case 8:
    case "LOG_DIR_CLEANUP_FAILURE":
      return RemoteExecution_Code.LOG_DIR_CLEANUP_FAILURE;
    case 9:
    case "CLIENT_SERVER_INCOMPATIBLE":
      return RemoteExecution_Code.CLIENT_SERVER_INCOMPATIBLE;
    case 10:
    case "DOWNLOADED_INPUTS_DELETION_FAILURE":
      return RemoteExecution_Code.DOWNLOADED_INPUTS_DELETION_FAILURE;
    case 11:
    case "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD":
      return RemoteExecution_Code.REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD;
    case 12:
    case "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS":
      return RemoteExecution_Code.REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS;
    case 13:
    case "INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE":
      return RemoteExecution_Code.INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE;
    case 14:
    case "REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE":
      return RemoteExecution_Code.REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE;
    case 15:
    case "ILLEGAL_OUTPUT":
      return RemoteExecution_Code.ILLEGAL_OUTPUT;
    case 16:
    case "INVALID_EXEC_AND_PLATFORM_PROPERTIES":
      return RemoteExecution_Code.INVALID_EXEC_AND_PLATFORM_PROPERTIES;
    case 17:
    case "TOPLEVEL_OUTPUTS_DOWNLOAD_FAILURE":
      return RemoteExecution_Code.TOPLEVEL_OUTPUTS_DOWNLOAD_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteExecution_Code.UNRECOGNIZED;
  }
}

export function remoteExecution_CodeToJSON(object: RemoteExecution_Code): string {
  switch (object) {
    case RemoteExecution_Code.REMOTE_EXECUTION_UNKNOWN:
      return "REMOTE_EXECUTION_UNKNOWN";
    case RemoteExecution_Code.CAPABILITIES_QUERY_FAILURE:
      return "CAPABILITIES_QUERY_FAILURE";
    case RemoteExecution_Code.CREDENTIALS_INIT_FAILURE:
      return "CREDENTIALS_INIT_FAILURE";
    case RemoteExecution_Code.CACHE_INIT_FAILURE:
      return "CACHE_INIT_FAILURE";
    case RemoteExecution_Code.RPC_LOG_FAILURE:
      return "RPC_LOG_FAILURE";
    case RemoteExecution_Code.EXEC_CHANNEL_INIT_FAILURE:
      return "EXEC_CHANNEL_INIT_FAILURE";
    case RemoteExecution_Code.CACHE_CHANNEL_INIT_FAILURE:
      return "CACHE_CHANNEL_INIT_FAILURE";
    case RemoteExecution_Code.DOWNLOADER_CHANNEL_INIT_FAILURE:
      return "DOWNLOADER_CHANNEL_INIT_FAILURE";
    case RemoteExecution_Code.LOG_DIR_CLEANUP_FAILURE:
      return "LOG_DIR_CLEANUP_FAILURE";
    case RemoteExecution_Code.CLIENT_SERVER_INCOMPATIBLE:
      return "CLIENT_SERVER_INCOMPATIBLE";
    case RemoteExecution_Code.DOWNLOADED_INPUTS_DELETION_FAILURE:
      return "DOWNLOADED_INPUTS_DELETION_FAILURE";
    case RemoteExecution_Code.REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD:
      return "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD";
    case RemoteExecution_Code.REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS:
      return "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS";
    case RemoteExecution_Code.INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE:
      return "INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE";
    case RemoteExecution_Code.REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE:
      return "REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE";
    case RemoteExecution_Code.ILLEGAL_OUTPUT:
      return "ILLEGAL_OUTPUT";
    case RemoteExecution_Code.INVALID_EXEC_AND_PLATFORM_PROPERTIES:
      return "INVALID_EXEC_AND_PLATFORM_PROPERTIES";
    case RemoteExecution_Code.TOPLEVEL_OUTPUTS_DOWNLOAD_FAILURE:
      return "TOPLEVEL_OUTPUTS_DOWNLOAD_FAILURE";
    case RemoteExecution_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Execution {
  code: Execution_Code;
}

export enum Execution_Code {
  EXECUTION_UNKNOWN = 0,
  EXECUTION_LOG_INITIALIZATION_FAILURE = 1,
  EXECUTION_LOG_WRITE_FAILURE = 2,
  EXECROOT_CREATION_FAILURE = 3,
  TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE = 4,
  TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE = 5,
  PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE = 6,
  LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE = 7,
  /** LOCAL_TEMPLATE_EXPANSION_FAILURE - SOURCE_INPUT_MISSING */
  LOCAL_TEMPLATE_EXPANSION_FAILURE = 9,
  INPUT_DIRECTORY_CHECK_IO_EXCEPTION = 10,
  EXTRA_ACTION_OUTPUT_CREATION_FAILURE = 11,
  TEST_RUNNER_IO_EXCEPTION = 12,
  FILE_WRITE_IO_EXCEPTION = 13,
  TEST_OUT_ERR_IO_EXCEPTION = 14,
  SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION = 15,
  SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION = 16,
  SYMLINK_TREE_CREATION_IO_EXCEPTION = 17,
  SYMLINK_TREE_CREATION_COMMAND_EXCEPTION = 18,
  ACTION_INPUT_READ_IO_EXCEPTION = 19,
  ACTION_NOT_UP_TO_DATE = 20,
  PSEUDO_ACTION_EXECUTION_PROHIBITED = 21,
  DISCOVERED_INPUT_DOES_NOT_EXIST = 22,
  ACTION_OUTPUTS_DELETION_FAILURE = 23,
  ACTION_OUTPUTS_NOT_CREATED = 24,
  ACTION_FINALIZATION_FAILURE = 25,
  ACTION_INPUT_LOST = 26,
  FILESYSTEM_CONTEXT_UPDATE_FAILURE = 27,
  ACTION_OUTPUT_CLOSE_FAILURE = 28,
  INPUT_DISCOVERY_IO_EXCEPTION = 29,
  TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE = 30,
  ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE = 31,
  ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE = 32,
  ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE = 33,
  NON_ACTION_EXECUTION_FAILURE = 34,
  CYCLE = 35,
  SOURCE_INPUT_MISSING = 36,
  UNEXPECTED_EXCEPTION = 37,
  SOURCE_INPUT_IO_EXCEPTION = 39,
  SYMLINK_TREE_DELETION_IO_EXCEPTION = 40,
  UNRECOGNIZED = -1,
}

export function execution_CodeFromJSON(object: any): Execution_Code {
  switch (object) {
    case 0:
    case "EXECUTION_UNKNOWN":
      return Execution_Code.EXECUTION_UNKNOWN;
    case 1:
    case "EXECUTION_LOG_INITIALIZATION_FAILURE":
      return Execution_Code.EXECUTION_LOG_INITIALIZATION_FAILURE;
    case 2:
    case "EXECUTION_LOG_WRITE_FAILURE":
      return Execution_Code.EXECUTION_LOG_WRITE_FAILURE;
    case 3:
    case "EXECROOT_CREATION_FAILURE":
      return Execution_Code.EXECROOT_CREATION_FAILURE;
    case 4:
    case "TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE":
      return Execution_Code.TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE;
    case 5:
    case "TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":
      return Execution_Code.TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE;
    case 6:
    case "PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":
      return Execution_Code.PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE;
    case 7:
    case "LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE":
      return Execution_Code.LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE;
    case 9:
    case "LOCAL_TEMPLATE_EXPANSION_FAILURE":
      return Execution_Code.LOCAL_TEMPLATE_EXPANSION_FAILURE;
    case 10:
    case "INPUT_DIRECTORY_CHECK_IO_EXCEPTION":
      return Execution_Code.INPUT_DIRECTORY_CHECK_IO_EXCEPTION;
    case 11:
    case "EXTRA_ACTION_OUTPUT_CREATION_FAILURE":
      return Execution_Code.EXTRA_ACTION_OUTPUT_CREATION_FAILURE;
    case 12:
    case "TEST_RUNNER_IO_EXCEPTION":
      return Execution_Code.TEST_RUNNER_IO_EXCEPTION;
    case 13:
    case "FILE_WRITE_IO_EXCEPTION":
      return Execution_Code.FILE_WRITE_IO_EXCEPTION;
    case 14:
    case "TEST_OUT_ERR_IO_EXCEPTION":
      return Execution_Code.TEST_OUT_ERR_IO_EXCEPTION;
    case 15:
    case "SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION":
      return Execution_Code.SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION;
    case 16:
    case "SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION":
      return Execution_Code.SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION;
    case 17:
    case "SYMLINK_TREE_CREATION_IO_EXCEPTION":
      return Execution_Code.SYMLINK_TREE_CREATION_IO_EXCEPTION;
    case 18:
    case "SYMLINK_TREE_CREATION_COMMAND_EXCEPTION":
      return Execution_Code.SYMLINK_TREE_CREATION_COMMAND_EXCEPTION;
    case 19:
    case "ACTION_INPUT_READ_IO_EXCEPTION":
      return Execution_Code.ACTION_INPUT_READ_IO_EXCEPTION;
    case 20:
    case "ACTION_NOT_UP_TO_DATE":
      return Execution_Code.ACTION_NOT_UP_TO_DATE;
    case 21:
    case "PSEUDO_ACTION_EXECUTION_PROHIBITED":
      return Execution_Code.PSEUDO_ACTION_EXECUTION_PROHIBITED;
    case 22:
    case "DISCOVERED_INPUT_DOES_NOT_EXIST":
      return Execution_Code.DISCOVERED_INPUT_DOES_NOT_EXIST;
    case 23:
    case "ACTION_OUTPUTS_DELETION_FAILURE":
      return Execution_Code.ACTION_OUTPUTS_DELETION_FAILURE;
    case 24:
    case "ACTION_OUTPUTS_NOT_CREATED":
      return Execution_Code.ACTION_OUTPUTS_NOT_CREATED;
    case 25:
    case "ACTION_FINALIZATION_FAILURE":
      return Execution_Code.ACTION_FINALIZATION_FAILURE;
    case 26:
    case "ACTION_INPUT_LOST":
      return Execution_Code.ACTION_INPUT_LOST;
    case 27:
    case "FILESYSTEM_CONTEXT_UPDATE_FAILURE":
      return Execution_Code.FILESYSTEM_CONTEXT_UPDATE_FAILURE;
    case 28:
    case "ACTION_OUTPUT_CLOSE_FAILURE":
      return Execution_Code.ACTION_OUTPUT_CLOSE_FAILURE;
    case 29:
    case "INPUT_DISCOVERY_IO_EXCEPTION":
      return Execution_Code.INPUT_DISCOVERY_IO_EXCEPTION;
    case 30:
    case "TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE":
      return Execution_Code.TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE;
    case 31:
    case "ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":
      return Execution_Code.ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE;
    case 32:
    case "ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE":
      return Execution_Code.ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE;
    case 33:
    case "ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE":
      return Execution_Code.ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE;
    case 34:
    case "NON_ACTION_EXECUTION_FAILURE":
      return Execution_Code.NON_ACTION_EXECUTION_FAILURE;
    case 35:
    case "CYCLE":
      return Execution_Code.CYCLE;
    case 36:
    case "SOURCE_INPUT_MISSING":
      return Execution_Code.SOURCE_INPUT_MISSING;
    case 37:
    case "UNEXPECTED_EXCEPTION":
      return Execution_Code.UNEXPECTED_EXCEPTION;
    case 39:
    case "SOURCE_INPUT_IO_EXCEPTION":
      return Execution_Code.SOURCE_INPUT_IO_EXCEPTION;
    case 40:
    case "SYMLINK_TREE_DELETION_IO_EXCEPTION":
      return Execution_Code.SYMLINK_TREE_DELETION_IO_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Execution_Code.UNRECOGNIZED;
  }
}

export function execution_CodeToJSON(object: Execution_Code): string {
  switch (object) {
    case Execution_Code.EXECUTION_UNKNOWN:
      return "EXECUTION_UNKNOWN";
    case Execution_Code.EXECUTION_LOG_INITIALIZATION_FAILURE:
      return "EXECUTION_LOG_INITIALIZATION_FAILURE";
    case Execution_Code.EXECUTION_LOG_WRITE_FAILURE:
      return "EXECUTION_LOG_WRITE_FAILURE";
    case Execution_Code.EXECROOT_CREATION_FAILURE:
      return "EXECROOT_CREATION_FAILURE";
    case Execution_Code.TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE:
      return "TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE";
    case Execution_Code.TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE:
      return "TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE";
    case Execution_Code.PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE:
      return "PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE";
    case Execution_Code.LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE:
      return "LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE";
    case Execution_Code.LOCAL_TEMPLATE_EXPANSION_FAILURE:
      return "LOCAL_TEMPLATE_EXPANSION_FAILURE";
    case Execution_Code.INPUT_DIRECTORY_CHECK_IO_EXCEPTION:
      return "INPUT_DIRECTORY_CHECK_IO_EXCEPTION";
    case Execution_Code.EXTRA_ACTION_OUTPUT_CREATION_FAILURE:
      return "EXTRA_ACTION_OUTPUT_CREATION_FAILURE";
    case Execution_Code.TEST_RUNNER_IO_EXCEPTION:
      return "TEST_RUNNER_IO_EXCEPTION";
    case Execution_Code.FILE_WRITE_IO_EXCEPTION:
      return "FILE_WRITE_IO_EXCEPTION";
    case Execution_Code.TEST_OUT_ERR_IO_EXCEPTION:
      return "TEST_OUT_ERR_IO_EXCEPTION";
    case Execution_Code.SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION:
      return "SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION";
    case Execution_Code.SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION:
      return "SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION";
    case Execution_Code.SYMLINK_TREE_CREATION_IO_EXCEPTION:
      return "SYMLINK_TREE_CREATION_IO_EXCEPTION";
    case Execution_Code.SYMLINK_TREE_CREATION_COMMAND_EXCEPTION:
      return "SYMLINK_TREE_CREATION_COMMAND_EXCEPTION";
    case Execution_Code.ACTION_INPUT_READ_IO_EXCEPTION:
      return "ACTION_INPUT_READ_IO_EXCEPTION";
    case Execution_Code.ACTION_NOT_UP_TO_DATE:
      return "ACTION_NOT_UP_TO_DATE";
    case Execution_Code.PSEUDO_ACTION_EXECUTION_PROHIBITED:
      return "PSEUDO_ACTION_EXECUTION_PROHIBITED";
    case Execution_Code.DISCOVERED_INPUT_DOES_NOT_EXIST:
      return "DISCOVERED_INPUT_DOES_NOT_EXIST";
    case Execution_Code.ACTION_OUTPUTS_DELETION_FAILURE:
      return "ACTION_OUTPUTS_DELETION_FAILURE";
    case Execution_Code.ACTION_OUTPUTS_NOT_CREATED:
      return "ACTION_OUTPUTS_NOT_CREATED";
    case Execution_Code.ACTION_FINALIZATION_FAILURE:
      return "ACTION_FINALIZATION_FAILURE";
    case Execution_Code.ACTION_INPUT_LOST:
      return "ACTION_INPUT_LOST";
    case Execution_Code.FILESYSTEM_CONTEXT_UPDATE_FAILURE:
      return "FILESYSTEM_CONTEXT_UPDATE_FAILURE";
    case Execution_Code.ACTION_OUTPUT_CLOSE_FAILURE:
      return "ACTION_OUTPUT_CLOSE_FAILURE";
    case Execution_Code.INPUT_DISCOVERY_IO_EXCEPTION:
      return "INPUT_DISCOVERY_IO_EXCEPTION";
    case Execution_Code.TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE:
      return "TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE";
    case Execution_Code.ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE:
      return "ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE";
    case Execution_Code.ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE:
      return "ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE";
    case Execution_Code.ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE:
      return "ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE";
    case Execution_Code.NON_ACTION_EXECUTION_FAILURE:
      return "NON_ACTION_EXECUTION_FAILURE";
    case Execution_Code.CYCLE:
      return "CYCLE";
    case Execution_Code.SOURCE_INPUT_MISSING:
      return "SOURCE_INPUT_MISSING";
    case Execution_Code.UNEXPECTED_EXCEPTION:
      return "UNEXPECTED_EXCEPTION";
    case Execution_Code.SOURCE_INPUT_IO_EXCEPTION:
      return "SOURCE_INPUT_IO_EXCEPTION";
    case Execution_Code.SYMLINK_TREE_DELETION_IO_EXCEPTION:
      return "SYMLINK_TREE_DELETION_IO_EXCEPTION";
    case Execution_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Failure details about Bazel's WORKSPACE features. */
export interface Workspaces {
  code: Workspaces_Code;
}

export enum Workspaces_Code {
  WORKSPACES_UNKNOWN = 0,
  WORKSPACES_LOG_INITIALIZATION_FAILURE = 1,
  WORKSPACES_LOG_WRITE_FAILURE = 2,
  /**
   * ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES - See `managed_directories` in
   * https://bazel.build/rules/lib/globals#workspace.
   */
  ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES = 3,
  WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES = 4,
  UNRECOGNIZED = -1,
}

export function workspaces_CodeFromJSON(object: any): Workspaces_Code {
  switch (object) {
    case 0:
    case "WORKSPACES_UNKNOWN":
      return Workspaces_Code.WORKSPACES_UNKNOWN;
    case 1:
    case "WORKSPACES_LOG_INITIALIZATION_FAILURE":
      return Workspaces_Code.WORKSPACES_LOG_INITIALIZATION_FAILURE;
    case 2:
    case "WORKSPACES_LOG_WRITE_FAILURE":
      return Workspaces_Code.WORKSPACES_LOG_WRITE_FAILURE;
    case 3:
    case "ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES":
      return Workspaces_Code.ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES;
    case 4:
    case "WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES":
      return Workspaces_Code.WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Workspaces_Code.UNRECOGNIZED;
  }
}

export function workspaces_CodeToJSON(object: Workspaces_Code): string {
  switch (object) {
    case Workspaces_Code.WORKSPACES_UNKNOWN:
      return "WORKSPACES_UNKNOWN";
    case Workspaces_Code.WORKSPACES_LOG_INITIALIZATION_FAILURE:
      return "WORKSPACES_LOG_INITIALIZATION_FAILURE";
    case Workspaces_Code.WORKSPACES_LOG_WRITE_FAILURE:
      return "WORKSPACES_LOG_WRITE_FAILURE";
    case Workspaces_Code.ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES:
      return "ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES";
    case Workspaces_Code.WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES:
      return "WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES";
    case Workspaces_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CrashOptions {
  code: CrashOptions_Code;
}

export enum CrashOptions_Code {
  CRASH_OPTIONS_UNKNOWN = 0,
  UNRECOGNIZED = -1,
}

export function crashOptions_CodeFromJSON(object: any): CrashOptions_Code {
  switch (object) {
    case 0:
    case "CRASH_OPTIONS_UNKNOWN":
      return CrashOptions_Code.CRASH_OPTIONS_UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CrashOptions_Code.UNRECOGNIZED;
  }
}

export function crashOptions_CodeToJSON(object: CrashOptions_Code): string {
  switch (object) {
    case CrashOptions_Code.CRASH_OPTIONS_UNKNOWN:
      return "CRASH_OPTIONS_UNKNOWN";
    case CrashOptions_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Filesystem {
  code: Filesystem_Code;
}

export enum Filesystem_Code {
  FILESYSTEM_UNKNOWN = 0,
  EMBEDDED_BINARIES_ENUMERATION_FAILURE = 3,
  SERVER_PID_TXT_FILE_READ_FAILURE = 4,
  SERVER_FILE_WRITE_FAILURE = 5,
  DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE = 6,
  FILESYSTEM_JNI_NOT_AVAILABLE = 8,
  FAILED_TO_LOCK_INSTALL_BASE = 12,
  UNRECOGNIZED = -1,
}

export function filesystem_CodeFromJSON(object: any): Filesystem_Code {
  switch (object) {
    case 0:
    case "FILESYSTEM_UNKNOWN":
      return Filesystem_Code.FILESYSTEM_UNKNOWN;
    case 3:
    case "EMBEDDED_BINARIES_ENUMERATION_FAILURE":
      return Filesystem_Code.EMBEDDED_BINARIES_ENUMERATION_FAILURE;
    case 4:
    case "SERVER_PID_TXT_FILE_READ_FAILURE":
      return Filesystem_Code.SERVER_PID_TXT_FILE_READ_FAILURE;
    case 5:
    case "SERVER_FILE_WRITE_FAILURE":
      return Filesystem_Code.SERVER_FILE_WRITE_FAILURE;
    case 6:
    case "DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE":
      return Filesystem_Code.DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE;
    case 8:
    case "FILESYSTEM_JNI_NOT_AVAILABLE":
      return Filesystem_Code.FILESYSTEM_JNI_NOT_AVAILABLE;
    case 12:
    case "FAILED_TO_LOCK_INSTALL_BASE":
      return Filesystem_Code.FAILED_TO_LOCK_INSTALL_BASE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Filesystem_Code.UNRECOGNIZED;
  }
}

export function filesystem_CodeToJSON(object: Filesystem_Code): string {
  switch (object) {
    case Filesystem_Code.FILESYSTEM_UNKNOWN:
      return "FILESYSTEM_UNKNOWN";
    case Filesystem_Code.EMBEDDED_BINARIES_ENUMERATION_FAILURE:
      return "EMBEDDED_BINARIES_ENUMERATION_FAILURE";
    case Filesystem_Code.SERVER_PID_TXT_FILE_READ_FAILURE:
      return "SERVER_PID_TXT_FILE_READ_FAILURE";
    case Filesystem_Code.SERVER_FILE_WRITE_FAILURE:
      return "SERVER_FILE_WRITE_FAILURE";
    case Filesystem_Code.DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE:
      return "DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE";
    case Filesystem_Code.FILESYSTEM_JNI_NOT_AVAILABLE:
      return "FILESYSTEM_JNI_NOT_AVAILABLE";
    case Filesystem_Code.FAILED_TO_LOCK_INSTALL_BASE:
      return "FAILED_TO_LOCK_INSTALL_BASE";
    case Filesystem_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ExecutionOptions {
  code: ExecutionOptions_Code;
}

/**
 * All numerical exit code associations correspond to pre-existing Bazel
 * behavior. These associations are suspicious:
 * - REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING (instead: 2?)
 * - DEPRECATED_LOCAL_RESOURCES_USED (instead: 2?)
 * TODO(b/138456686): Revise these after the (intentionally non-breaking)
 *  initial rollout of FailureDetail-based encoding.
 */
export enum ExecutionOptions_Code {
  EXECUTION_OPTIONS_UNKNOWN = 0,
  INVALID_STRATEGY = 3,
  REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING = 4,
  DEPRECATED_LOCAL_RESOURCES_USED = 5,
  INVALID_CYCLIC_DYNAMIC_STRATEGY = 6,
  RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT = 7,
  REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN = 8,
  STRATEGY_NOT_FOUND = 9,
  DYNAMIC_STRATEGY_NOT_SANDBOXED = 10,
  MULTIPLE_EXECUTION_LOG_FORMATS = 11,
  UNRECOGNIZED = -1,
}

export function executionOptions_CodeFromJSON(object: any): ExecutionOptions_Code {
  switch (object) {
    case 0:
    case "EXECUTION_OPTIONS_UNKNOWN":
      return ExecutionOptions_Code.EXECUTION_OPTIONS_UNKNOWN;
    case 3:
    case "INVALID_STRATEGY":
      return ExecutionOptions_Code.INVALID_STRATEGY;
    case 4:
    case "REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING":
      return ExecutionOptions_Code.REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING;
    case 5:
    case "DEPRECATED_LOCAL_RESOURCES_USED":
      return ExecutionOptions_Code.DEPRECATED_LOCAL_RESOURCES_USED;
    case 6:
    case "INVALID_CYCLIC_DYNAMIC_STRATEGY":
      return ExecutionOptions_Code.INVALID_CYCLIC_DYNAMIC_STRATEGY;
    case 7:
    case "RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT":
      return ExecutionOptions_Code.RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT;
    case 8:
    case "REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN":
      return ExecutionOptions_Code.REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN;
    case 9:
    case "STRATEGY_NOT_FOUND":
      return ExecutionOptions_Code.STRATEGY_NOT_FOUND;
    case 10:
    case "DYNAMIC_STRATEGY_NOT_SANDBOXED":
      return ExecutionOptions_Code.DYNAMIC_STRATEGY_NOT_SANDBOXED;
    case 11:
    case "MULTIPLE_EXECUTION_LOG_FORMATS":
      return ExecutionOptions_Code.MULTIPLE_EXECUTION_LOG_FORMATS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExecutionOptions_Code.UNRECOGNIZED;
  }
}

export function executionOptions_CodeToJSON(object: ExecutionOptions_Code): string {
  switch (object) {
    case ExecutionOptions_Code.EXECUTION_OPTIONS_UNKNOWN:
      return "EXECUTION_OPTIONS_UNKNOWN";
    case ExecutionOptions_Code.INVALID_STRATEGY:
      return "INVALID_STRATEGY";
    case ExecutionOptions_Code.REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING:
      return "REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING";
    case ExecutionOptions_Code.DEPRECATED_LOCAL_RESOURCES_USED:
      return "DEPRECATED_LOCAL_RESOURCES_USED";
    case ExecutionOptions_Code.INVALID_CYCLIC_DYNAMIC_STRATEGY:
      return "INVALID_CYCLIC_DYNAMIC_STRATEGY";
    case ExecutionOptions_Code.RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT:
      return "RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT";
    case ExecutionOptions_Code.REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN:
      return "REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN";
    case ExecutionOptions_Code.STRATEGY_NOT_FOUND:
      return "STRATEGY_NOT_FOUND";
    case ExecutionOptions_Code.DYNAMIC_STRATEGY_NOT_SANDBOXED:
      return "DYNAMIC_STRATEGY_NOT_SANDBOXED";
    case ExecutionOptions_Code.MULTIPLE_EXECUTION_LOG_FORMATS:
      return "MULTIPLE_EXECUTION_LOG_FORMATS";
    case ExecutionOptions_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Command {
  code: Command_Code;
}

export enum Command_Code {
  /**
   * COMMAND_FAILURE_UNKNOWN - The name "COMMAND_UNKNOWN" might reasonably be interpreted as "command
   * not found". The enum's default value should represent a lack of knowledge
   * about the failure instead.
   */
  COMMAND_FAILURE_UNKNOWN = 0,
  COMMAND_NOT_FOUND = 1,
  ANOTHER_COMMAND_RUNNING = 2,
  PREVIOUSLY_SHUTDOWN = 3,
  STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE = 4,
  STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE = 5,
  STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE = 6,
  INVOCATION_POLICY_PARSE_FAILURE = 7,
  INVOCATION_POLICY_INVALID = 8,
  OPTIONS_PARSE_FAILURE = 9,
  STARLARK_OPTIONS_PARSE_FAILURE = 10,
  ARGUMENTS_NOT_RECOGNIZED = 11,
  NOT_IN_WORKSPACE = 12,
  IN_OUTPUT_DIRECTORY = 14,
  UNRECOGNIZED = -1,
}

export function command_CodeFromJSON(object: any): Command_Code {
  switch (object) {
    case 0:
    case "COMMAND_FAILURE_UNKNOWN":
      return Command_Code.COMMAND_FAILURE_UNKNOWN;
    case 1:
    case "COMMAND_NOT_FOUND":
      return Command_Code.COMMAND_NOT_FOUND;
    case 2:
    case "ANOTHER_COMMAND_RUNNING":
      return Command_Code.ANOTHER_COMMAND_RUNNING;
    case 3:
    case "PREVIOUSLY_SHUTDOWN":
      return Command_Code.PREVIOUSLY_SHUTDOWN;
    case 4:
    case "STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE":
      return Command_Code.STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE;
    case 5:
    case "STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE":
      return Command_Code.STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE;
    case 6:
    case "STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE":
      return Command_Code.STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE;
    case 7:
    case "INVOCATION_POLICY_PARSE_FAILURE":
      return Command_Code.INVOCATION_POLICY_PARSE_FAILURE;
    case 8:
    case "INVOCATION_POLICY_INVALID":
      return Command_Code.INVOCATION_POLICY_INVALID;
    case 9:
    case "OPTIONS_PARSE_FAILURE":
      return Command_Code.OPTIONS_PARSE_FAILURE;
    case 10:
    case "STARLARK_OPTIONS_PARSE_FAILURE":
      return Command_Code.STARLARK_OPTIONS_PARSE_FAILURE;
    case 11:
    case "ARGUMENTS_NOT_RECOGNIZED":
      return Command_Code.ARGUMENTS_NOT_RECOGNIZED;
    case 12:
    case "NOT_IN_WORKSPACE":
      return Command_Code.NOT_IN_WORKSPACE;
    case 14:
    case "IN_OUTPUT_DIRECTORY":
      return Command_Code.IN_OUTPUT_DIRECTORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Command_Code.UNRECOGNIZED;
  }
}

export function command_CodeToJSON(object: Command_Code): string {
  switch (object) {
    case Command_Code.COMMAND_FAILURE_UNKNOWN:
      return "COMMAND_FAILURE_UNKNOWN";
    case Command_Code.COMMAND_NOT_FOUND:
      return "COMMAND_NOT_FOUND";
    case Command_Code.ANOTHER_COMMAND_RUNNING:
      return "ANOTHER_COMMAND_RUNNING";
    case Command_Code.PREVIOUSLY_SHUTDOWN:
      return "PREVIOUSLY_SHUTDOWN";
    case Command_Code.STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE:
      return "STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE";
    case Command_Code.STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE:
      return "STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE";
    case Command_Code.STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE:
      return "STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE";
    case Command_Code.INVOCATION_POLICY_PARSE_FAILURE:
      return "INVOCATION_POLICY_PARSE_FAILURE";
    case Command_Code.INVOCATION_POLICY_INVALID:
      return "INVOCATION_POLICY_INVALID";
    case Command_Code.OPTIONS_PARSE_FAILURE:
      return "OPTIONS_PARSE_FAILURE";
    case Command_Code.STARLARK_OPTIONS_PARSE_FAILURE:
      return "STARLARK_OPTIONS_PARSE_FAILURE";
    case Command_Code.ARGUMENTS_NOT_RECOGNIZED:
      return "ARGUMENTS_NOT_RECOGNIZED";
    case Command_Code.NOT_IN_WORKSPACE:
      return "NOT_IN_WORKSPACE";
    case Command_Code.IN_OUTPUT_DIRECTORY:
      return "IN_OUTPUT_DIRECTORY";
    case Command_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GrpcServer {
  code: GrpcServer_Code;
}

export enum GrpcServer_Code {
  GRPC_SERVER_UNKNOWN = 0,
  GRPC_SERVER_NOT_COMPILED_IN = 1,
  SERVER_BIND_FAILURE = 2,
  BAD_COOKIE = 3,
  NO_CLIENT_DESCRIPTION = 4,
  UNRECOGNIZED = -1,
}

export function grpcServer_CodeFromJSON(object: any): GrpcServer_Code {
  switch (object) {
    case 0:
    case "GRPC_SERVER_UNKNOWN":
      return GrpcServer_Code.GRPC_SERVER_UNKNOWN;
    case 1:
    case "GRPC_SERVER_NOT_COMPILED_IN":
      return GrpcServer_Code.GRPC_SERVER_NOT_COMPILED_IN;
    case 2:
    case "SERVER_BIND_FAILURE":
      return GrpcServer_Code.SERVER_BIND_FAILURE;
    case 3:
    case "BAD_COOKIE":
      return GrpcServer_Code.BAD_COOKIE;
    case 4:
    case "NO_CLIENT_DESCRIPTION":
      return GrpcServer_Code.NO_CLIENT_DESCRIPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GrpcServer_Code.UNRECOGNIZED;
  }
}

export function grpcServer_CodeToJSON(object: GrpcServer_Code): string {
  switch (object) {
    case GrpcServer_Code.GRPC_SERVER_UNKNOWN:
      return "GRPC_SERVER_UNKNOWN";
    case GrpcServer_Code.GRPC_SERVER_NOT_COMPILED_IN:
      return "GRPC_SERVER_NOT_COMPILED_IN";
    case GrpcServer_Code.SERVER_BIND_FAILURE:
      return "SERVER_BIND_FAILURE";
    case GrpcServer_Code.BAD_COOKIE:
      return "BAD_COOKIE";
    case GrpcServer_Code.NO_CLIENT_DESCRIPTION:
      return "NO_CLIENT_DESCRIPTION";
    case GrpcServer_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CanonicalizeFlags {
  code: CanonicalizeFlags_Code;
}

export enum CanonicalizeFlags_Code {
  CANONICALIZE_FLAGS_UNKNOWN = 0,
  FOR_COMMAND_INVALID = 1,
  UNRECOGNIZED = -1,
}

export function canonicalizeFlags_CodeFromJSON(object: any): CanonicalizeFlags_Code {
  switch (object) {
    case 0:
    case "CANONICALIZE_FLAGS_UNKNOWN":
      return CanonicalizeFlags_Code.CANONICALIZE_FLAGS_UNKNOWN;
    case 1:
    case "FOR_COMMAND_INVALID":
      return CanonicalizeFlags_Code.FOR_COMMAND_INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CanonicalizeFlags_Code.UNRECOGNIZED;
  }
}

export function canonicalizeFlags_CodeToJSON(object: CanonicalizeFlags_Code): string {
  switch (object) {
    case CanonicalizeFlags_Code.CANONICALIZE_FLAGS_UNKNOWN:
      return "CANONICALIZE_FLAGS_UNKNOWN";
    case CanonicalizeFlags_Code.FOR_COMMAND_INVALID:
      return "FOR_COMMAND_INVALID";
    case CanonicalizeFlags_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Failure modes described by this category pertain to the Bazel invocation
 * configuration consumed by Bazel's analysis phase. This category is not
 * intended as a grab-bag for all Bazel flag value constraint violations, which
 * instead generally belong in the category for the subsystem whose flag values
 * participate in the constraint.
 */
export interface BuildConfiguration {
  code: BuildConfiguration_Code;
}

export enum BuildConfiguration_Code {
  BUILD_CONFIGURATION_UNKNOWN = 0,
  PLATFORM_MAPPING_EVALUATION_FAILURE = 1,
  PLATFORM_MAPPINGS_FILE_IS_DIRECTORY = 2,
  PLATFORM_MAPPINGS_FILE_NOT_FOUND = 3,
  TOP_LEVEL_CONFIGURATION_CREATION_FAILURE = 4,
  INVALID_CONFIGURATION = 5,
  INVALID_BUILD_OPTIONS = 6,
  MULTI_CPU_PREREQ_UNMET = 7,
  HEURISTIC_INSTRUMENTATION_FILTER_INVALID = 8,
  CYCLE = 9,
  CONFLICTING_CONFIGURATIONS = 10,
  /**
   * INVALID_OUTPUT_DIRECTORY_MNEMONIC - This can come from either an invalid user-specified option or a
   * configuration transition. There's no sure-fire way to distinguish the two
   * possibilities in Bazel, so we go with the more straightforward
   * command-line error exit code 2.
   */
  INVALID_OUTPUT_DIRECTORY_MNEMONIC = 11,
  CONFIGURATION_DISCARDED_ANALYSIS_CACHE = 12,
  /** INVALID_PROJECT - Failure modes specific to PROJECT.scl files. */
  INVALID_PROJECT = 13,
  UNRECOGNIZED = -1,
}

export function buildConfiguration_CodeFromJSON(object: any): BuildConfiguration_Code {
  switch (object) {
    case 0:
    case "BUILD_CONFIGURATION_UNKNOWN":
      return BuildConfiguration_Code.BUILD_CONFIGURATION_UNKNOWN;
    case 1:
    case "PLATFORM_MAPPING_EVALUATION_FAILURE":
      return BuildConfiguration_Code.PLATFORM_MAPPING_EVALUATION_FAILURE;
    case 2:
    case "PLATFORM_MAPPINGS_FILE_IS_DIRECTORY":
      return BuildConfiguration_Code.PLATFORM_MAPPINGS_FILE_IS_DIRECTORY;
    case 3:
    case "PLATFORM_MAPPINGS_FILE_NOT_FOUND":
      return BuildConfiguration_Code.PLATFORM_MAPPINGS_FILE_NOT_FOUND;
    case 4:
    case "TOP_LEVEL_CONFIGURATION_CREATION_FAILURE":
      return BuildConfiguration_Code.TOP_LEVEL_CONFIGURATION_CREATION_FAILURE;
    case 5:
    case "INVALID_CONFIGURATION":
      return BuildConfiguration_Code.INVALID_CONFIGURATION;
    case 6:
    case "INVALID_BUILD_OPTIONS":
      return BuildConfiguration_Code.INVALID_BUILD_OPTIONS;
    case 7:
    case "MULTI_CPU_PREREQ_UNMET":
      return BuildConfiguration_Code.MULTI_CPU_PREREQ_UNMET;
    case 8:
    case "HEURISTIC_INSTRUMENTATION_FILTER_INVALID":
      return BuildConfiguration_Code.HEURISTIC_INSTRUMENTATION_FILTER_INVALID;
    case 9:
    case "CYCLE":
      return BuildConfiguration_Code.CYCLE;
    case 10:
    case "CONFLICTING_CONFIGURATIONS":
      return BuildConfiguration_Code.CONFLICTING_CONFIGURATIONS;
    case 11:
    case "INVALID_OUTPUT_DIRECTORY_MNEMONIC":
      return BuildConfiguration_Code.INVALID_OUTPUT_DIRECTORY_MNEMONIC;
    case 12:
    case "CONFIGURATION_DISCARDED_ANALYSIS_CACHE":
      return BuildConfiguration_Code.CONFIGURATION_DISCARDED_ANALYSIS_CACHE;
    case 13:
    case "INVALID_PROJECT":
      return BuildConfiguration_Code.INVALID_PROJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BuildConfiguration_Code.UNRECOGNIZED;
  }
}

export function buildConfiguration_CodeToJSON(object: BuildConfiguration_Code): string {
  switch (object) {
    case BuildConfiguration_Code.BUILD_CONFIGURATION_UNKNOWN:
      return "BUILD_CONFIGURATION_UNKNOWN";
    case BuildConfiguration_Code.PLATFORM_MAPPING_EVALUATION_FAILURE:
      return "PLATFORM_MAPPING_EVALUATION_FAILURE";
    case BuildConfiguration_Code.PLATFORM_MAPPINGS_FILE_IS_DIRECTORY:
      return "PLATFORM_MAPPINGS_FILE_IS_DIRECTORY";
    case BuildConfiguration_Code.PLATFORM_MAPPINGS_FILE_NOT_FOUND:
      return "PLATFORM_MAPPINGS_FILE_NOT_FOUND";
    case BuildConfiguration_Code.TOP_LEVEL_CONFIGURATION_CREATION_FAILURE:
      return "TOP_LEVEL_CONFIGURATION_CREATION_FAILURE";
    case BuildConfiguration_Code.INVALID_CONFIGURATION:
      return "INVALID_CONFIGURATION";
    case BuildConfiguration_Code.INVALID_BUILD_OPTIONS:
      return "INVALID_BUILD_OPTIONS";
    case BuildConfiguration_Code.MULTI_CPU_PREREQ_UNMET:
      return "MULTI_CPU_PREREQ_UNMET";
    case BuildConfiguration_Code.HEURISTIC_INSTRUMENTATION_FILTER_INVALID:
      return "HEURISTIC_INSTRUMENTATION_FILTER_INVALID";
    case BuildConfiguration_Code.CYCLE:
      return "CYCLE";
    case BuildConfiguration_Code.CONFLICTING_CONFIGURATIONS:
      return "CONFLICTING_CONFIGURATIONS";
    case BuildConfiguration_Code.INVALID_OUTPUT_DIRECTORY_MNEMONIC:
      return "INVALID_OUTPUT_DIRECTORY_MNEMONIC";
    case BuildConfiguration_Code.CONFIGURATION_DISCARDED_ANALYSIS_CACHE:
      return "CONFIGURATION_DISCARDED_ANALYSIS_CACHE";
    case BuildConfiguration_Code.INVALID_PROJECT:
      return "INVALID_PROJECT";
    case BuildConfiguration_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface InfoCommand {
  code: InfoCommand_Code;
}

/**
 * The distinction between a failure to write a single info item and a failure
 * to write them all seems sketchy. Why do they have different exit codes?
 * This reflects current Bazel behavior, but deserves more thought.
 */
export enum InfoCommand_Code {
  INFO_COMMAND_UNKNOWN = 0,
  TOO_MANY_KEYS = 1,
  KEY_NOT_RECOGNIZED = 2,
  INFO_BLOCK_WRITE_FAILURE = 3,
  ALL_INFO_WRITE_FAILURE = 4,
  UNRECOGNIZED = -1,
}

export function infoCommand_CodeFromJSON(object: any): InfoCommand_Code {
  switch (object) {
    case 0:
    case "INFO_COMMAND_UNKNOWN":
      return InfoCommand_Code.INFO_COMMAND_UNKNOWN;
    case 1:
    case "TOO_MANY_KEYS":
      return InfoCommand_Code.TOO_MANY_KEYS;
    case 2:
    case "KEY_NOT_RECOGNIZED":
      return InfoCommand_Code.KEY_NOT_RECOGNIZED;
    case 3:
    case "INFO_BLOCK_WRITE_FAILURE":
      return InfoCommand_Code.INFO_BLOCK_WRITE_FAILURE;
    case 4:
    case "ALL_INFO_WRITE_FAILURE":
      return InfoCommand_Code.ALL_INFO_WRITE_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InfoCommand_Code.UNRECOGNIZED;
  }
}

export function infoCommand_CodeToJSON(object: InfoCommand_Code): string {
  switch (object) {
    case InfoCommand_Code.INFO_COMMAND_UNKNOWN:
      return "INFO_COMMAND_UNKNOWN";
    case InfoCommand_Code.TOO_MANY_KEYS:
      return "TOO_MANY_KEYS";
    case InfoCommand_Code.KEY_NOT_RECOGNIZED:
      return "KEY_NOT_RECOGNIZED";
    case InfoCommand_Code.INFO_BLOCK_WRITE_FAILURE:
      return "INFO_BLOCK_WRITE_FAILURE";
    case InfoCommand_Code.ALL_INFO_WRITE_FAILURE:
      return "ALL_INFO_WRITE_FAILURE";
    case InfoCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MemoryOptions {
  code: MemoryOptions_Code;
}

export enum MemoryOptions_Code {
  MEMORY_OPTIONS_UNKNOWN = 0,
  /**
   * DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE - Deprecated: validation is now implemented by the option converter.
   *
   * @deprecated
   */
  DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE = 1,
  /**
   * DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND - Deprecated: no tenured collectors found is now a crash on startup.
   *
   * @deprecated
   */
  DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND = 2,
  UNRECOGNIZED = -1,
}

export function memoryOptions_CodeFromJSON(object: any): MemoryOptions_Code {
  switch (object) {
    case 0:
    case "MEMORY_OPTIONS_UNKNOWN":
      return MemoryOptions_Code.MEMORY_OPTIONS_UNKNOWN;
    case 1:
    case "DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE":
      return MemoryOptions_Code.DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE;
    case 2:
    case "DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND":
      return MemoryOptions_Code.DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MemoryOptions_Code.UNRECOGNIZED;
  }
}

export function memoryOptions_CodeToJSON(object: MemoryOptions_Code): string {
  switch (object) {
    case MemoryOptions_Code.MEMORY_OPTIONS_UNKNOWN:
      return "MEMORY_OPTIONS_UNKNOWN";
    case MemoryOptions_Code.DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE:
      return "DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE";
    case MemoryOptions_Code.DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND:
      return "DEPRECATED_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND";
    case MemoryOptions_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Query {
  code: Query_Code;
}

export enum Query_Code {
  QUERY_UNKNOWN = 0,
  QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION = 1,
  QUERY_FILE_READ_FAILURE = 2,
  COMMAND_LINE_EXPRESSION_MISSING = 3,
  OUTPUT_FORMAT_INVALID = 4,
  GRAPHLESS_PREREQ_UNMET = 5,
  QUERY_OUTPUT_WRITE_FAILURE = 6,
  QUERY_STDOUT_FLUSH_FAILURE = 13,
  ANALYSIS_QUERY_PREREQ_UNMET = 14,
  QUERY_RESULTS_FLUSH_FAILURE = 15,
  /** DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR - Deprecated - folded into SYNTAX_ERROR. */
  DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR = 16,
  VARIABLE_NAME_INVALID = 17,
  VARIABLE_UNDEFINED = 18,
  BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR = 19,
  BUILD_FILE_ERROR = 20,
  CYCLE = 21,
  UNIQUE_SKYKEY_THRESHOLD_EXCEEDED = 22,
  TARGET_NOT_IN_UNIVERSE_SCOPE = 23,
  INVALID_FULL_UNIVERSE_EXPRESSION = 24,
  UNIVERSE_SCOPE_LIMIT_EXCEEDED = 25,
  INVALIDATION_LIMIT_EXCEEDED = 26,
  OUTPUT_FORMAT_PREREQ_UNMET = 27,
  ARGUMENTS_MISSING = 28,
  RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY = 29,
  FULL_TARGETS_NOT_SUPPORTED = 30,
  /** DEPRECATED_UNEXPECTED_TOKEN_ERROR - Deprecated - folded into SYNTAX_ERROR. */
  DEPRECATED_UNEXPECTED_TOKEN_ERROR = 31,
  /** DEPRECATED_INTEGER_LITERAL_MISSING - Deprecated - folded into SYNTAX_ERROR. */
  DEPRECATED_INTEGER_LITERAL_MISSING = 32,
  /** DEPRECATED_INVALID_STARTING_CHARACTER_ERROR - Deprecated - folded into SYNTAX_ERROR. */
  DEPRECATED_INVALID_STARTING_CHARACTER_ERROR = 33,
  /** DEPRECATED_PREMATURE_END_OF_INPUT_ERROR - Deprecated - folded into SYNTAX_ERROR. */
  DEPRECATED_PREMATURE_END_OF_INPUT_ERROR = 34,
  /** SYNTAX_ERROR - Indicates the user specified invalid query syntax. */
  SYNTAX_ERROR = 35,
  OUTPUT_FORMATTER_IO_EXCEPTION = 36,
  SKYQUERY_TRANSITIVE_TARGET_ERROR = 37,
  SKYQUERY_TARGET_EXCEPTION = 38,
  INVALID_LABEL_IN_TEST_SUITE = 39,
  /** ILLEGAL_FLAG_COMBINATION - Indicates any usage of flags that must not be combined. */
  ILLEGAL_FLAG_COMBINATION = 40,
  /**
   * NON_DETAILED_ERROR - Indicates a non-detailed exception that halted a query. This is a
   * deficiency in Blaze/Bazel and code should be changed to attach a detailed
   * exit code to this failure mode.
   */
  NON_DETAILED_ERROR = 41,
  UNRECOGNIZED = -1,
}

export function query_CodeFromJSON(object: any): Query_Code {
  switch (object) {
    case 0:
    case "QUERY_UNKNOWN":
      return Query_Code.QUERY_UNKNOWN;
    case 1:
    case "QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION":
      return Query_Code.QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION;
    case 2:
    case "QUERY_FILE_READ_FAILURE":
      return Query_Code.QUERY_FILE_READ_FAILURE;
    case 3:
    case "COMMAND_LINE_EXPRESSION_MISSING":
      return Query_Code.COMMAND_LINE_EXPRESSION_MISSING;
    case 4:
    case "OUTPUT_FORMAT_INVALID":
      return Query_Code.OUTPUT_FORMAT_INVALID;
    case 5:
    case "GRAPHLESS_PREREQ_UNMET":
      return Query_Code.GRAPHLESS_PREREQ_UNMET;
    case 6:
    case "QUERY_OUTPUT_WRITE_FAILURE":
      return Query_Code.QUERY_OUTPUT_WRITE_FAILURE;
    case 13:
    case "QUERY_STDOUT_FLUSH_FAILURE":
      return Query_Code.QUERY_STDOUT_FLUSH_FAILURE;
    case 14:
    case "ANALYSIS_QUERY_PREREQ_UNMET":
      return Query_Code.ANALYSIS_QUERY_PREREQ_UNMET;
    case 15:
    case "QUERY_RESULTS_FLUSH_FAILURE":
      return Query_Code.QUERY_RESULTS_FLUSH_FAILURE;
    case 16:
    case "DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR":
      return Query_Code.DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR;
    case 17:
    case "VARIABLE_NAME_INVALID":
      return Query_Code.VARIABLE_NAME_INVALID;
    case 18:
    case "VARIABLE_UNDEFINED":
      return Query_Code.VARIABLE_UNDEFINED;
    case 19:
    case "BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR":
      return Query_Code.BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR;
    case 20:
    case "BUILD_FILE_ERROR":
      return Query_Code.BUILD_FILE_ERROR;
    case 21:
    case "CYCLE":
      return Query_Code.CYCLE;
    case 22:
    case "UNIQUE_SKYKEY_THRESHOLD_EXCEEDED":
      return Query_Code.UNIQUE_SKYKEY_THRESHOLD_EXCEEDED;
    case 23:
    case "TARGET_NOT_IN_UNIVERSE_SCOPE":
      return Query_Code.TARGET_NOT_IN_UNIVERSE_SCOPE;
    case 24:
    case "INVALID_FULL_UNIVERSE_EXPRESSION":
      return Query_Code.INVALID_FULL_UNIVERSE_EXPRESSION;
    case 25:
    case "UNIVERSE_SCOPE_LIMIT_EXCEEDED":
      return Query_Code.UNIVERSE_SCOPE_LIMIT_EXCEEDED;
    case 26:
    case "INVALIDATION_LIMIT_EXCEEDED":
      return Query_Code.INVALIDATION_LIMIT_EXCEEDED;
    case 27:
    case "OUTPUT_FORMAT_PREREQ_UNMET":
      return Query_Code.OUTPUT_FORMAT_PREREQ_UNMET;
    case 28:
    case "ARGUMENTS_MISSING":
      return Query_Code.ARGUMENTS_MISSING;
    case 29:
    case "RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY":
      return Query_Code.RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY;
    case 30:
    case "FULL_TARGETS_NOT_SUPPORTED":
      return Query_Code.FULL_TARGETS_NOT_SUPPORTED;
    case 31:
    case "DEPRECATED_UNEXPECTED_TOKEN_ERROR":
      return Query_Code.DEPRECATED_UNEXPECTED_TOKEN_ERROR;
    case 32:
    case "DEPRECATED_INTEGER_LITERAL_MISSING":
      return Query_Code.DEPRECATED_INTEGER_LITERAL_MISSING;
    case 33:
    case "DEPRECATED_INVALID_STARTING_CHARACTER_ERROR":
      return Query_Code.DEPRECATED_INVALID_STARTING_CHARACTER_ERROR;
    case 34:
    case "DEPRECATED_PREMATURE_END_OF_INPUT_ERROR":
      return Query_Code.DEPRECATED_PREMATURE_END_OF_INPUT_ERROR;
    case 35:
    case "SYNTAX_ERROR":
      return Query_Code.SYNTAX_ERROR;
    case 36:
    case "OUTPUT_FORMATTER_IO_EXCEPTION":
      return Query_Code.OUTPUT_FORMATTER_IO_EXCEPTION;
    case 37:
    case "SKYQUERY_TRANSITIVE_TARGET_ERROR":
      return Query_Code.SKYQUERY_TRANSITIVE_TARGET_ERROR;
    case 38:
    case "SKYQUERY_TARGET_EXCEPTION":
      return Query_Code.SKYQUERY_TARGET_EXCEPTION;
    case 39:
    case "INVALID_LABEL_IN_TEST_SUITE":
      return Query_Code.INVALID_LABEL_IN_TEST_SUITE;
    case 40:
    case "ILLEGAL_FLAG_COMBINATION":
      return Query_Code.ILLEGAL_FLAG_COMBINATION;
    case 41:
    case "NON_DETAILED_ERROR":
      return Query_Code.NON_DETAILED_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Query_Code.UNRECOGNIZED;
  }
}

export function query_CodeToJSON(object: Query_Code): string {
  switch (object) {
    case Query_Code.QUERY_UNKNOWN:
      return "QUERY_UNKNOWN";
    case Query_Code.QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION:
      return "QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION";
    case Query_Code.QUERY_FILE_READ_FAILURE:
      return "QUERY_FILE_READ_FAILURE";
    case Query_Code.COMMAND_LINE_EXPRESSION_MISSING:
      return "COMMAND_LINE_EXPRESSION_MISSING";
    case Query_Code.OUTPUT_FORMAT_INVALID:
      return "OUTPUT_FORMAT_INVALID";
    case Query_Code.GRAPHLESS_PREREQ_UNMET:
      return "GRAPHLESS_PREREQ_UNMET";
    case Query_Code.QUERY_OUTPUT_WRITE_FAILURE:
      return "QUERY_OUTPUT_WRITE_FAILURE";
    case Query_Code.QUERY_STDOUT_FLUSH_FAILURE:
      return "QUERY_STDOUT_FLUSH_FAILURE";
    case Query_Code.ANALYSIS_QUERY_PREREQ_UNMET:
      return "ANALYSIS_QUERY_PREREQ_UNMET";
    case Query_Code.QUERY_RESULTS_FLUSH_FAILURE:
      return "QUERY_RESULTS_FLUSH_FAILURE";
    case Query_Code.DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR:
      return "DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR";
    case Query_Code.VARIABLE_NAME_INVALID:
      return "VARIABLE_NAME_INVALID";
    case Query_Code.VARIABLE_UNDEFINED:
      return "VARIABLE_UNDEFINED";
    case Query_Code.BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR:
      return "BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR";
    case Query_Code.BUILD_FILE_ERROR:
      return "BUILD_FILE_ERROR";
    case Query_Code.CYCLE:
      return "CYCLE";
    case Query_Code.UNIQUE_SKYKEY_THRESHOLD_EXCEEDED:
      return "UNIQUE_SKYKEY_THRESHOLD_EXCEEDED";
    case Query_Code.TARGET_NOT_IN_UNIVERSE_SCOPE:
      return "TARGET_NOT_IN_UNIVERSE_SCOPE";
    case Query_Code.INVALID_FULL_UNIVERSE_EXPRESSION:
      return "INVALID_FULL_UNIVERSE_EXPRESSION";
    case Query_Code.UNIVERSE_SCOPE_LIMIT_EXCEEDED:
      return "UNIVERSE_SCOPE_LIMIT_EXCEEDED";
    case Query_Code.INVALIDATION_LIMIT_EXCEEDED:
      return "INVALIDATION_LIMIT_EXCEEDED";
    case Query_Code.OUTPUT_FORMAT_PREREQ_UNMET:
      return "OUTPUT_FORMAT_PREREQ_UNMET";
    case Query_Code.ARGUMENTS_MISSING:
      return "ARGUMENTS_MISSING";
    case Query_Code.RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY:
      return "RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY";
    case Query_Code.FULL_TARGETS_NOT_SUPPORTED:
      return "FULL_TARGETS_NOT_SUPPORTED";
    case Query_Code.DEPRECATED_UNEXPECTED_TOKEN_ERROR:
      return "DEPRECATED_UNEXPECTED_TOKEN_ERROR";
    case Query_Code.DEPRECATED_INTEGER_LITERAL_MISSING:
      return "DEPRECATED_INTEGER_LITERAL_MISSING";
    case Query_Code.DEPRECATED_INVALID_STARTING_CHARACTER_ERROR:
      return "DEPRECATED_INVALID_STARTING_CHARACTER_ERROR";
    case Query_Code.DEPRECATED_PREMATURE_END_OF_INPUT_ERROR:
      return "DEPRECATED_PREMATURE_END_OF_INPUT_ERROR";
    case Query_Code.SYNTAX_ERROR:
      return "SYNTAX_ERROR";
    case Query_Code.OUTPUT_FORMATTER_IO_EXCEPTION:
      return "OUTPUT_FORMATTER_IO_EXCEPTION";
    case Query_Code.SKYQUERY_TRANSITIVE_TARGET_ERROR:
      return "SKYQUERY_TRANSITIVE_TARGET_ERROR";
    case Query_Code.SKYQUERY_TARGET_EXCEPTION:
      return "SKYQUERY_TARGET_EXCEPTION";
    case Query_Code.INVALID_LABEL_IN_TEST_SUITE:
      return "INVALID_LABEL_IN_TEST_SUITE";
    case Query_Code.ILLEGAL_FLAG_COMBINATION:
      return "ILLEGAL_FLAG_COMBINATION";
    case Query_Code.NON_DETAILED_ERROR:
      return "NON_DETAILED_ERROR";
    case Query_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LocalExecution {
  code: LocalExecution_Code;
}

export enum LocalExecution_Code {
  LOCAL_EXECUTION_UNKNOWN = 0,
  LOCKFREE_OUTPUT_PREREQ_UNMET = 1,
  UNTRACKED_RESOURCE = 2,
  NOT_ENOUGH_LOCAL_RESOURCE = 3,
  UNRECOGNIZED = -1,
}

export function localExecution_CodeFromJSON(object: any): LocalExecution_Code {
  switch (object) {
    case 0:
    case "LOCAL_EXECUTION_UNKNOWN":
      return LocalExecution_Code.LOCAL_EXECUTION_UNKNOWN;
    case 1:
    case "LOCKFREE_OUTPUT_PREREQ_UNMET":
      return LocalExecution_Code.LOCKFREE_OUTPUT_PREREQ_UNMET;
    case 2:
    case "UNTRACKED_RESOURCE":
      return LocalExecution_Code.UNTRACKED_RESOURCE;
    case 3:
    case "NOT_ENOUGH_LOCAL_RESOURCE":
      return LocalExecution_Code.NOT_ENOUGH_LOCAL_RESOURCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LocalExecution_Code.UNRECOGNIZED;
  }
}

export function localExecution_CodeToJSON(object: LocalExecution_Code): string {
  switch (object) {
    case LocalExecution_Code.LOCAL_EXECUTION_UNKNOWN:
      return "LOCAL_EXECUTION_UNKNOWN";
    case LocalExecution_Code.LOCKFREE_OUTPUT_PREREQ_UNMET:
      return "LOCKFREE_OUTPUT_PREREQ_UNMET";
    case LocalExecution_Code.UNTRACKED_RESOURCE:
      return "UNTRACKED_RESOURCE";
    case LocalExecution_Code.NOT_ENOUGH_LOCAL_RESOURCE:
      return "NOT_ENOUGH_LOCAL_RESOURCE";
    case LocalExecution_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActionCache {
  code: ActionCache_Code;
}

export enum ActionCache_Code {
  ACTION_CACHE_UNKNOWN = 0,
  INITIALIZATION_FAILURE = 1,
  UNRECOGNIZED = -1,
}

export function actionCache_CodeFromJSON(object: any): ActionCache_Code {
  switch (object) {
    case 0:
    case "ACTION_CACHE_UNKNOWN":
      return ActionCache_Code.ACTION_CACHE_UNKNOWN;
    case 1:
    case "INITIALIZATION_FAILURE":
      return ActionCache_Code.INITIALIZATION_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionCache_Code.UNRECOGNIZED;
  }
}

export function actionCache_CodeToJSON(object: ActionCache_Code): string {
  switch (object) {
    case ActionCache_Code.ACTION_CACHE_UNKNOWN:
      return "ACTION_CACHE_UNKNOWN";
    case ActionCache_Code.INITIALIZATION_FAILURE:
      return "INITIALIZATION_FAILURE";
    case ActionCache_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FetchCommand {
  code: FetchCommand_Code;
}

export enum FetchCommand_Code {
  FETCH_COMMAND_UNKNOWN = 0,
  EXPRESSION_MISSING = 1,
  OPTIONS_INVALID = 2,
  QUERY_PARSE_ERROR = 3,
  QUERY_EVALUATION_ERROR = 4,
  UNRECOGNIZED = -1,
}

export function fetchCommand_CodeFromJSON(object: any): FetchCommand_Code {
  switch (object) {
    case 0:
    case "FETCH_COMMAND_UNKNOWN":
      return FetchCommand_Code.FETCH_COMMAND_UNKNOWN;
    case 1:
    case "EXPRESSION_MISSING":
      return FetchCommand_Code.EXPRESSION_MISSING;
    case 2:
    case "OPTIONS_INVALID":
      return FetchCommand_Code.OPTIONS_INVALID;
    case 3:
    case "QUERY_PARSE_ERROR":
      return FetchCommand_Code.QUERY_PARSE_ERROR;
    case 4:
    case "QUERY_EVALUATION_ERROR":
      return FetchCommand_Code.QUERY_EVALUATION_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FetchCommand_Code.UNRECOGNIZED;
  }
}

export function fetchCommand_CodeToJSON(object: FetchCommand_Code): string {
  switch (object) {
    case FetchCommand_Code.FETCH_COMMAND_UNKNOWN:
      return "FETCH_COMMAND_UNKNOWN";
    case FetchCommand_Code.EXPRESSION_MISSING:
      return "EXPRESSION_MISSING";
    case FetchCommand_Code.OPTIONS_INVALID:
      return "OPTIONS_INVALID";
    case FetchCommand_Code.QUERY_PARSE_ERROR:
      return "QUERY_PARSE_ERROR";
    case FetchCommand_Code.QUERY_EVALUATION_ERROR:
      return "QUERY_EVALUATION_ERROR";
    case FetchCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncCommand {
  code: SyncCommand_Code;
}

export enum SyncCommand_Code {
  SYNC_COMMAND_UNKNOWN = 0,
  PACKAGE_LOOKUP_ERROR = 1,
  WORKSPACE_EVALUATION_ERROR = 2,
  REPOSITORY_FETCH_ERRORS = 3,
  REPOSITORY_NAME_INVALID = 4,
  UNRECOGNIZED = -1,
}

export function syncCommand_CodeFromJSON(object: any): SyncCommand_Code {
  switch (object) {
    case 0:
    case "SYNC_COMMAND_UNKNOWN":
      return SyncCommand_Code.SYNC_COMMAND_UNKNOWN;
    case 1:
    case "PACKAGE_LOOKUP_ERROR":
      return SyncCommand_Code.PACKAGE_LOOKUP_ERROR;
    case 2:
    case "WORKSPACE_EVALUATION_ERROR":
      return SyncCommand_Code.WORKSPACE_EVALUATION_ERROR;
    case 3:
    case "REPOSITORY_FETCH_ERRORS":
      return SyncCommand_Code.REPOSITORY_FETCH_ERRORS;
    case 4:
    case "REPOSITORY_NAME_INVALID":
      return SyncCommand_Code.REPOSITORY_NAME_INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncCommand_Code.UNRECOGNIZED;
  }
}

export function syncCommand_CodeToJSON(object: SyncCommand_Code): string {
  switch (object) {
    case SyncCommand_Code.SYNC_COMMAND_UNKNOWN:
      return "SYNC_COMMAND_UNKNOWN";
    case SyncCommand_Code.PACKAGE_LOOKUP_ERROR:
      return "PACKAGE_LOOKUP_ERROR";
    case SyncCommand_Code.WORKSPACE_EVALUATION_ERROR:
      return "WORKSPACE_EVALUATION_ERROR";
    case SyncCommand_Code.REPOSITORY_FETCH_ERRORS:
      return "REPOSITORY_FETCH_ERRORS";
    case SyncCommand_Code.REPOSITORY_NAME_INVALID:
      return "REPOSITORY_NAME_INVALID";
    case SyncCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Sandbox {
  code: Sandbox_Code;
}

export enum Sandbox_Code {
  SANDBOX_FAILURE_UNKNOWN = 0,
  INITIALIZATION_FAILURE = 1,
  EXECUTION_IO_EXCEPTION = 2,
  DOCKER_COMMAND_FAILURE = 3,
  NO_DOCKER_IMAGE = 4,
  DOCKER_IMAGE_PREPARATION_FAILURE = 5,
  BIND_MOUNT_ANALYSIS_FAILURE = 6,
  MOUNT_SOURCE_DOES_NOT_EXIST = 7,
  MOUNT_SOURCE_TARGET_TYPE_MISMATCH = 8,
  MOUNT_TARGET_DOES_NOT_EXIST = 9,
  SUBPROCESS_START_FAILED = 10,
  FORBIDDEN_INPUT = 11,
  COPY_INPUTS_IO_EXCEPTION = 12,
  COPY_OUTPUTS_IO_EXCEPTION = 13,
  UNRECOGNIZED = -1,
}

export function sandbox_CodeFromJSON(object: any): Sandbox_Code {
  switch (object) {
    case 0:
    case "SANDBOX_FAILURE_UNKNOWN":
      return Sandbox_Code.SANDBOX_FAILURE_UNKNOWN;
    case 1:
    case "INITIALIZATION_FAILURE":
      return Sandbox_Code.INITIALIZATION_FAILURE;
    case 2:
    case "EXECUTION_IO_EXCEPTION":
      return Sandbox_Code.EXECUTION_IO_EXCEPTION;
    case 3:
    case "DOCKER_COMMAND_FAILURE":
      return Sandbox_Code.DOCKER_COMMAND_FAILURE;
    case 4:
    case "NO_DOCKER_IMAGE":
      return Sandbox_Code.NO_DOCKER_IMAGE;
    case 5:
    case "DOCKER_IMAGE_PREPARATION_FAILURE":
      return Sandbox_Code.DOCKER_IMAGE_PREPARATION_FAILURE;
    case 6:
    case "BIND_MOUNT_ANALYSIS_FAILURE":
      return Sandbox_Code.BIND_MOUNT_ANALYSIS_FAILURE;
    case 7:
    case "MOUNT_SOURCE_DOES_NOT_EXIST":
      return Sandbox_Code.MOUNT_SOURCE_DOES_NOT_EXIST;
    case 8:
    case "MOUNT_SOURCE_TARGET_TYPE_MISMATCH":
      return Sandbox_Code.MOUNT_SOURCE_TARGET_TYPE_MISMATCH;
    case 9:
    case "MOUNT_TARGET_DOES_NOT_EXIST":
      return Sandbox_Code.MOUNT_TARGET_DOES_NOT_EXIST;
    case 10:
    case "SUBPROCESS_START_FAILED":
      return Sandbox_Code.SUBPROCESS_START_FAILED;
    case 11:
    case "FORBIDDEN_INPUT":
      return Sandbox_Code.FORBIDDEN_INPUT;
    case 12:
    case "COPY_INPUTS_IO_EXCEPTION":
      return Sandbox_Code.COPY_INPUTS_IO_EXCEPTION;
    case 13:
    case "COPY_OUTPUTS_IO_EXCEPTION":
      return Sandbox_Code.COPY_OUTPUTS_IO_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Sandbox_Code.UNRECOGNIZED;
  }
}

export function sandbox_CodeToJSON(object: Sandbox_Code): string {
  switch (object) {
    case Sandbox_Code.SANDBOX_FAILURE_UNKNOWN:
      return "SANDBOX_FAILURE_UNKNOWN";
    case Sandbox_Code.INITIALIZATION_FAILURE:
      return "INITIALIZATION_FAILURE";
    case Sandbox_Code.EXECUTION_IO_EXCEPTION:
      return "EXECUTION_IO_EXCEPTION";
    case Sandbox_Code.DOCKER_COMMAND_FAILURE:
      return "DOCKER_COMMAND_FAILURE";
    case Sandbox_Code.NO_DOCKER_IMAGE:
      return "NO_DOCKER_IMAGE";
    case Sandbox_Code.DOCKER_IMAGE_PREPARATION_FAILURE:
      return "DOCKER_IMAGE_PREPARATION_FAILURE";
    case Sandbox_Code.BIND_MOUNT_ANALYSIS_FAILURE:
      return "BIND_MOUNT_ANALYSIS_FAILURE";
    case Sandbox_Code.MOUNT_SOURCE_DOES_NOT_EXIST:
      return "MOUNT_SOURCE_DOES_NOT_EXIST";
    case Sandbox_Code.MOUNT_SOURCE_TARGET_TYPE_MISMATCH:
      return "MOUNT_SOURCE_TARGET_TYPE_MISMATCH";
    case Sandbox_Code.MOUNT_TARGET_DOES_NOT_EXIST:
      return "MOUNT_TARGET_DOES_NOT_EXIST";
    case Sandbox_Code.SUBPROCESS_START_FAILED:
      return "SUBPROCESS_START_FAILED";
    case Sandbox_Code.FORBIDDEN_INPUT:
      return "FORBIDDEN_INPUT";
    case Sandbox_Code.COPY_INPUTS_IO_EXCEPTION:
      return "COPY_INPUTS_IO_EXCEPTION";
    case Sandbox_Code.COPY_OUTPUTS_IO_EXCEPTION:
      return "COPY_OUTPUTS_IO_EXCEPTION";
    case Sandbox_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IncludeScanning {
  code: IncludeScanning_Code;
  packageLoadingCode: PackageLoading_Code;
}

export enum IncludeScanning_Code {
  INCLUDE_SCANNING_UNKNOWN = 0,
  INITIALIZE_INCLUDE_HINTS_ERROR = 1,
  SCANNING_IO_EXCEPTION = 2,
  INCLUDE_HINTS_FILE_NOT_IN_PACKAGE = 3,
  INCLUDE_HINTS_READ_FAILURE = 4,
  ILLEGAL_ABSOLUTE_PATH = 5,
  /**
   * PACKAGE_LOAD_FAILURE - TODO(b/166268889): this code should be deprecated in favor of more finely
   *  resolved loading-phase codes.
   */
  PACKAGE_LOAD_FAILURE = 6,
  USER_PACKAGE_LOAD_FAILURE = 7,
  SYSTEM_PACKAGE_LOAD_FAILURE = 8,
  UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE = 9,
  UNRECOGNIZED = -1,
}

export function includeScanning_CodeFromJSON(object: any): IncludeScanning_Code {
  switch (object) {
    case 0:
    case "INCLUDE_SCANNING_UNKNOWN":
      return IncludeScanning_Code.INCLUDE_SCANNING_UNKNOWN;
    case 1:
    case "INITIALIZE_INCLUDE_HINTS_ERROR":
      return IncludeScanning_Code.INITIALIZE_INCLUDE_HINTS_ERROR;
    case 2:
    case "SCANNING_IO_EXCEPTION":
      return IncludeScanning_Code.SCANNING_IO_EXCEPTION;
    case 3:
    case "INCLUDE_HINTS_FILE_NOT_IN_PACKAGE":
      return IncludeScanning_Code.INCLUDE_HINTS_FILE_NOT_IN_PACKAGE;
    case 4:
    case "INCLUDE_HINTS_READ_FAILURE":
      return IncludeScanning_Code.INCLUDE_HINTS_READ_FAILURE;
    case 5:
    case "ILLEGAL_ABSOLUTE_PATH":
      return IncludeScanning_Code.ILLEGAL_ABSOLUTE_PATH;
    case 6:
    case "PACKAGE_LOAD_FAILURE":
      return IncludeScanning_Code.PACKAGE_LOAD_FAILURE;
    case 7:
    case "USER_PACKAGE_LOAD_FAILURE":
      return IncludeScanning_Code.USER_PACKAGE_LOAD_FAILURE;
    case 8:
    case "SYSTEM_PACKAGE_LOAD_FAILURE":
      return IncludeScanning_Code.SYSTEM_PACKAGE_LOAD_FAILURE;
    case 9:
    case "UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE":
      return IncludeScanning_Code.UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IncludeScanning_Code.UNRECOGNIZED;
  }
}

export function includeScanning_CodeToJSON(object: IncludeScanning_Code): string {
  switch (object) {
    case IncludeScanning_Code.INCLUDE_SCANNING_UNKNOWN:
      return "INCLUDE_SCANNING_UNKNOWN";
    case IncludeScanning_Code.INITIALIZE_INCLUDE_HINTS_ERROR:
      return "INITIALIZE_INCLUDE_HINTS_ERROR";
    case IncludeScanning_Code.SCANNING_IO_EXCEPTION:
      return "SCANNING_IO_EXCEPTION";
    case IncludeScanning_Code.INCLUDE_HINTS_FILE_NOT_IN_PACKAGE:
      return "INCLUDE_HINTS_FILE_NOT_IN_PACKAGE";
    case IncludeScanning_Code.INCLUDE_HINTS_READ_FAILURE:
      return "INCLUDE_HINTS_READ_FAILURE";
    case IncludeScanning_Code.ILLEGAL_ABSOLUTE_PATH:
      return "ILLEGAL_ABSOLUTE_PATH";
    case IncludeScanning_Code.PACKAGE_LOAD_FAILURE:
      return "PACKAGE_LOAD_FAILURE";
    case IncludeScanning_Code.USER_PACKAGE_LOAD_FAILURE:
      return "USER_PACKAGE_LOAD_FAILURE";
    case IncludeScanning_Code.SYSTEM_PACKAGE_LOAD_FAILURE:
      return "SYSTEM_PACKAGE_LOAD_FAILURE";
    case IncludeScanning_Code.UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE:
      return "UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE";
    case IncludeScanning_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TestCommand {
  code: TestCommand_Code;
}

export enum TestCommand_Code {
  TEST_COMMAND_UNKNOWN = 0,
  NO_TEST_TARGETS = 1,
  TEST_WITH_NOANALYZE = 2,
  TESTS_FAILED = 3,
  UNRECOGNIZED = -1,
}

export function testCommand_CodeFromJSON(object: any): TestCommand_Code {
  switch (object) {
    case 0:
    case "TEST_COMMAND_UNKNOWN":
      return TestCommand_Code.TEST_COMMAND_UNKNOWN;
    case 1:
    case "NO_TEST_TARGETS":
      return TestCommand_Code.NO_TEST_TARGETS;
    case 2:
    case "TEST_WITH_NOANALYZE":
      return TestCommand_Code.TEST_WITH_NOANALYZE;
    case 3:
    case "TESTS_FAILED":
      return TestCommand_Code.TESTS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TestCommand_Code.UNRECOGNIZED;
  }
}

export function testCommand_CodeToJSON(object: TestCommand_Code): string {
  switch (object) {
    case TestCommand_Code.TEST_COMMAND_UNKNOWN:
      return "TEST_COMMAND_UNKNOWN";
    case TestCommand_Code.NO_TEST_TARGETS:
      return "NO_TEST_TARGETS";
    case TestCommand_Code.TEST_WITH_NOANALYZE:
      return "TEST_WITH_NOANALYZE";
    case TestCommand_Code.TESTS_FAILED:
      return "TESTS_FAILED";
    case TestCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActionQuery {
  code: ActionQuery_Code;
}

/**
 * All numerical exit code associations correspond to pre-existing Bazel
 * behavior. These associations are suspicious:
 * - COMMAND_LINE_EXPANSION_FAILURE: this is associated with 2, the numerical
 *     exit code for "bad Bazel command line", but is generated when an
 *     action's command line fails to expand, which sounds similar but is
 *     completely different.
 * - OUTPUT_FAILURE: this is associated with 6, an undocumented exit code.
 * - INVALID_AQUERY_EXPRESSION: this is associate with 1, which is not
 *    documented for (a)query.
 * TODO(b/138456686): Revise these after the (intentionally non-breaking)
 *  initial rollout of FailureDetail-based encoding.
 */
export enum ActionQuery_Code {
  ACTION_QUERY_UNKNOWN = 0,
  COMMAND_LINE_EXPANSION_FAILURE = 1,
  OUTPUT_FAILURE = 2,
  COMMAND_LINE_EXPRESSION_MISSING = 3,
  EXPRESSION_PARSE_FAILURE = 4,
  SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION = 5,
  INVALID_AQUERY_EXPRESSION = 6,
  SKYFRAME_STATE_PREREQ_UNMET = 7,
  AQUERY_OUTPUT_TOO_BIG = 8,
  ILLEGAL_PATTERN_SYNTAX = 9,
  INCORRECT_ARGUMENTS = 10,
  TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED = 11,
  SKYFRAME_STATE_AFTER_EXECUTION = 12,
  LABELS_FUNCTION_NOT_SUPPORTED = 13,
  TEMPLATE_EXPANSION_FAILURE = 14,
  UNRECOGNIZED = -1,
}

export function actionQuery_CodeFromJSON(object: any): ActionQuery_Code {
  switch (object) {
    case 0:
    case "ACTION_QUERY_UNKNOWN":
      return ActionQuery_Code.ACTION_QUERY_UNKNOWN;
    case 1:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return ActionQuery_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 2:
    case "OUTPUT_FAILURE":
      return ActionQuery_Code.OUTPUT_FAILURE;
    case 3:
    case "COMMAND_LINE_EXPRESSION_MISSING":
      return ActionQuery_Code.COMMAND_LINE_EXPRESSION_MISSING;
    case 4:
    case "EXPRESSION_PARSE_FAILURE":
      return ActionQuery_Code.EXPRESSION_PARSE_FAILURE;
    case 5:
    case "SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION":
      return ActionQuery_Code.SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION;
    case 6:
    case "INVALID_AQUERY_EXPRESSION":
      return ActionQuery_Code.INVALID_AQUERY_EXPRESSION;
    case 7:
    case "SKYFRAME_STATE_PREREQ_UNMET":
      return ActionQuery_Code.SKYFRAME_STATE_PREREQ_UNMET;
    case 8:
    case "AQUERY_OUTPUT_TOO_BIG":
      return ActionQuery_Code.AQUERY_OUTPUT_TOO_BIG;
    case 9:
    case "ILLEGAL_PATTERN_SYNTAX":
      return ActionQuery_Code.ILLEGAL_PATTERN_SYNTAX;
    case 10:
    case "INCORRECT_ARGUMENTS":
      return ActionQuery_Code.INCORRECT_ARGUMENTS;
    case 11:
    case "TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED":
      return ActionQuery_Code.TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED;
    case 12:
    case "SKYFRAME_STATE_AFTER_EXECUTION":
      return ActionQuery_Code.SKYFRAME_STATE_AFTER_EXECUTION;
    case 13:
    case "LABELS_FUNCTION_NOT_SUPPORTED":
      return ActionQuery_Code.LABELS_FUNCTION_NOT_SUPPORTED;
    case 14:
    case "TEMPLATE_EXPANSION_FAILURE":
      return ActionQuery_Code.TEMPLATE_EXPANSION_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionQuery_Code.UNRECOGNIZED;
  }
}

export function actionQuery_CodeToJSON(object: ActionQuery_Code): string {
  switch (object) {
    case ActionQuery_Code.ACTION_QUERY_UNKNOWN:
      return "ACTION_QUERY_UNKNOWN";
    case ActionQuery_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case ActionQuery_Code.OUTPUT_FAILURE:
      return "OUTPUT_FAILURE";
    case ActionQuery_Code.COMMAND_LINE_EXPRESSION_MISSING:
      return "COMMAND_LINE_EXPRESSION_MISSING";
    case ActionQuery_Code.EXPRESSION_PARSE_FAILURE:
      return "EXPRESSION_PARSE_FAILURE";
    case ActionQuery_Code.SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION:
      return "SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION";
    case ActionQuery_Code.INVALID_AQUERY_EXPRESSION:
      return "INVALID_AQUERY_EXPRESSION";
    case ActionQuery_Code.SKYFRAME_STATE_PREREQ_UNMET:
      return "SKYFRAME_STATE_PREREQ_UNMET";
    case ActionQuery_Code.AQUERY_OUTPUT_TOO_BIG:
      return "AQUERY_OUTPUT_TOO_BIG";
    case ActionQuery_Code.ILLEGAL_PATTERN_SYNTAX:
      return "ILLEGAL_PATTERN_SYNTAX";
    case ActionQuery_Code.INCORRECT_ARGUMENTS:
      return "INCORRECT_ARGUMENTS";
    case ActionQuery_Code.TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED:
      return "TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED";
    case ActionQuery_Code.SKYFRAME_STATE_AFTER_EXECUTION:
      return "SKYFRAME_STATE_AFTER_EXECUTION";
    case ActionQuery_Code.LABELS_FUNCTION_NOT_SUPPORTED:
      return "LABELS_FUNCTION_NOT_SUPPORTED";
    case ActionQuery_Code.TEMPLATE_EXPANSION_FAILURE:
      return "TEMPLATE_EXPANSION_FAILURE";
    case ActionQuery_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TargetPatterns {
  code: TargetPatterns_Code;
}

export enum TargetPatterns_Code {
  TARGET_PATTERNS_UNKNOWN = 0,
  TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN = 1,
  TARGET_PATTERN_FILE_READ_FAILURE = 2,
  TARGET_PATTERN_PARSE_FAILURE = 3,
  PACKAGE_NOT_FOUND = 4,
  TARGET_FORMAT_INVALID = 5,
  ABSOLUTE_TARGET_PATTERN_INVALID = 6,
  CANNOT_DETERMINE_TARGET_FROM_FILENAME = 7,
  LABEL_SYNTAX_ERROR = 8,
  TARGET_CANNOT_BE_EMPTY_STRING = 9,
  PACKAGE_PART_CANNOT_END_IN_SLASH = 10,
  CYCLE = 11,
  CANNOT_PRELOAD_TARGET = 12,
  TARGETS_MISSING = 13,
  RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED = 14,
  UP_LEVEL_REFERENCES_NOT_ALLOWED = 15,
  NEGATIVE_TARGET_PATTERN_NOT_ALLOWED = 16,
  TARGET_MUST_BE_A_FILE = 17,
  DEPENDENCY_NOT_FOUND = 18,
  PACKAGE_NAME_INVALID = 19,
  UNRECOGNIZED = -1,
}

export function targetPatterns_CodeFromJSON(object: any): TargetPatterns_Code {
  switch (object) {
    case 0:
    case "TARGET_PATTERNS_UNKNOWN":
      return TargetPatterns_Code.TARGET_PATTERNS_UNKNOWN;
    case 1:
    case "TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN":
      return TargetPatterns_Code.TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN;
    case 2:
    case "TARGET_PATTERN_FILE_READ_FAILURE":
      return TargetPatterns_Code.TARGET_PATTERN_FILE_READ_FAILURE;
    case 3:
    case "TARGET_PATTERN_PARSE_FAILURE":
      return TargetPatterns_Code.TARGET_PATTERN_PARSE_FAILURE;
    case 4:
    case "PACKAGE_NOT_FOUND":
      return TargetPatterns_Code.PACKAGE_NOT_FOUND;
    case 5:
    case "TARGET_FORMAT_INVALID":
      return TargetPatterns_Code.TARGET_FORMAT_INVALID;
    case 6:
    case "ABSOLUTE_TARGET_PATTERN_INVALID":
      return TargetPatterns_Code.ABSOLUTE_TARGET_PATTERN_INVALID;
    case 7:
    case "CANNOT_DETERMINE_TARGET_FROM_FILENAME":
      return TargetPatterns_Code.CANNOT_DETERMINE_TARGET_FROM_FILENAME;
    case 8:
    case "LABEL_SYNTAX_ERROR":
      return TargetPatterns_Code.LABEL_SYNTAX_ERROR;
    case 9:
    case "TARGET_CANNOT_BE_EMPTY_STRING":
      return TargetPatterns_Code.TARGET_CANNOT_BE_EMPTY_STRING;
    case 10:
    case "PACKAGE_PART_CANNOT_END_IN_SLASH":
      return TargetPatterns_Code.PACKAGE_PART_CANNOT_END_IN_SLASH;
    case 11:
    case "CYCLE":
      return TargetPatterns_Code.CYCLE;
    case 12:
    case "CANNOT_PRELOAD_TARGET":
      return TargetPatterns_Code.CANNOT_PRELOAD_TARGET;
    case 13:
    case "TARGETS_MISSING":
      return TargetPatterns_Code.TARGETS_MISSING;
    case 14:
    case "RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED":
      return TargetPatterns_Code.RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED;
    case 15:
    case "UP_LEVEL_REFERENCES_NOT_ALLOWED":
      return TargetPatterns_Code.UP_LEVEL_REFERENCES_NOT_ALLOWED;
    case 16:
    case "NEGATIVE_TARGET_PATTERN_NOT_ALLOWED":
      return TargetPatterns_Code.NEGATIVE_TARGET_PATTERN_NOT_ALLOWED;
    case 17:
    case "TARGET_MUST_BE_A_FILE":
      return TargetPatterns_Code.TARGET_MUST_BE_A_FILE;
    case 18:
    case "DEPENDENCY_NOT_FOUND":
      return TargetPatterns_Code.DEPENDENCY_NOT_FOUND;
    case 19:
    case "PACKAGE_NAME_INVALID":
      return TargetPatterns_Code.PACKAGE_NAME_INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TargetPatterns_Code.UNRECOGNIZED;
  }
}

export function targetPatterns_CodeToJSON(object: TargetPatterns_Code): string {
  switch (object) {
    case TargetPatterns_Code.TARGET_PATTERNS_UNKNOWN:
      return "TARGET_PATTERNS_UNKNOWN";
    case TargetPatterns_Code.TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN:
      return "TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN";
    case TargetPatterns_Code.TARGET_PATTERN_FILE_READ_FAILURE:
      return "TARGET_PATTERN_FILE_READ_FAILURE";
    case TargetPatterns_Code.TARGET_PATTERN_PARSE_FAILURE:
      return "TARGET_PATTERN_PARSE_FAILURE";
    case TargetPatterns_Code.PACKAGE_NOT_FOUND:
      return "PACKAGE_NOT_FOUND";
    case TargetPatterns_Code.TARGET_FORMAT_INVALID:
      return "TARGET_FORMAT_INVALID";
    case TargetPatterns_Code.ABSOLUTE_TARGET_PATTERN_INVALID:
      return "ABSOLUTE_TARGET_PATTERN_INVALID";
    case TargetPatterns_Code.CANNOT_DETERMINE_TARGET_FROM_FILENAME:
      return "CANNOT_DETERMINE_TARGET_FROM_FILENAME";
    case TargetPatterns_Code.LABEL_SYNTAX_ERROR:
      return "LABEL_SYNTAX_ERROR";
    case TargetPatterns_Code.TARGET_CANNOT_BE_EMPTY_STRING:
      return "TARGET_CANNOT_BE_EMPTY_STRING";
    case TargetPatterns_Code.PACKAGE_PART_CANNOT_END_IN_SLASH:
      return "PACKAGE_PART_CANNOT_END_IN_SLASH";
    case TargetPatterns_Code.CYCLE:
      return "CYCLE";
    case TargetPatterns_Code.CANNOT_PRELOAD_TARGET:
      return "CANNOT_PRELOAD_TARGET";
    case TargetPatterns_Code.TARGETS_MISSING:
      return "TARGETS_MISSING";
    case TargetPatterns_Code.RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED:
      return "RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED";
    case TargetPatterns_Code.UP_LEVEL_REFERENCES_NOT_ALLOWED:
      return "UP_LEVEL_REFERENCES_NOT_ALLOWED";
    case TargetPatterns_Code.NEGATIVE_TARGET_PATTERN_NOT_ALLOWED:
      return "NEGATIVE_TARGET_PATTERN_NOT_ALLOWED";
    case TargetPatterns_Code.TARGET_MUST_BE_A_FILE:
      return "TARGET_MUST_BE_A_FILE";
    case TargetPatterns_Code.DEPENDENCY_NOT_FOUND:
      return "DEPENDENCY_NOT_FOUND";
    case TargetPatterns_Code.PACKAGE_NAME_INVALID:
      return "PACKAGE_NAME_INVALID";
    case TargetPatterns_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CleanCommand {
  code: CleanCommand_Code;
}

export enum CleanCommand_Code {
  CLEAN_COMMAND_UNKNOWN = 0,
  OUTPUT_SERVICE_CLEAN_FAILURE = 1,
  ACTION_CACHE_CLEAN_FAILURE = 2,
  OUT_ERR_CLOSE_FAILURE = 3,
  OUTPUT_BASE_DELETE_FAILURE = 4,
  OUTPUT_BASE_TEMP_MOVE_FAILURE = 5,
  ASYNC_OUTPUT_BASE_DELETE_FAILURE = 6,
  EXECROOT_DELETE_FAILURE = 7,
  EXECROOT_TEMP_MOVE_FAILURE = 8,
  ASYNC_EXECROOT_DELETE_FAILURE = 9,
  ARGUMENTS_NOT_RECOGNIZED = 10,
  UNRECOGNIZED = -1,
}

export function cleanCommand_CodeFromJSON(object: any): CleanCommand_Code {
  switch (object) {
    case 0:
    case "CLEAN_COMMAND_UNKNOWN":
      return CleanCommand_Code.CLEAN_COMMAND_UNKNOWN;
    case 1:
    case "OUTPUT_SERVICE_CLEAN_FAILURE":
      return CleanCommand_Code.OUTPUT_SERVICE_CLEAN_FAILURE;
    case 2:
    case "ACTION_CACHE_CLEAN_FAILURE":
      return CleanCommand_Code.ACTION_CACHE_CLEAN_FAILURE;
    case 3:
    case "OUT_ERR_CLOSE_FAILURE":
      return CleanCommand_Code.OUT_ERR_CLOSE_FAILURE;
    case 4:
    case "OUTPUT_BASE_DELETE_FAILURE":
      return CleanCommand_Code.OUTPUT_BASE_DELETE_FAILURE;
    case 5:
    case "OUTPUT_BASE_TEMP_MOVE_FAILURE":
      return CleanCommand_Code.OUTPUT_BASE_TEMP_MOVE_FAILURE;
    case 6:
    case "ASYNC_OUTPUT_BASE_DELETE_FAILURE":
      return CleanCommand_Code.ASYNC_OUTPUT_BASE_DELETE_FAILURE;
    case 7:
    case "EXECROOT_DELETE_FAILURE":
      return CleanCommand_Code.EXECROOT_DELETE_FAILURE;
    case 8:
    case "EXECROOT_TEMP_MOVE_FAILURE":
      return CleanCommand_Code.EXECROOT_TEMP_MOVE_FAILURE;
    case 9:
    case "ASYNC_EXECROOT_DELETE_FAILURE":
      return CleanCommand_Code.ASYNC_EXECROOT_DELETE_FAILURE;
    case 10:
    case "ARGUMENTS_NOT_RECOGNIZED":
      return CleanCommand_Code.ARGUMENTS_NOT_RECOGNIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CleanCommand_Code.UNRECOGNIZED;
  }
}

export function cleanCommand_CodeToJSON(object: CleanCommand_Code): string {
  switch (object) {
    case CleanCommand_Code.CLEAN_COMMAND_UNKNOWN:
      return "CLEAN_COMMAND_UNKNOWN";
    case CleanCommand_Code.OUTPUT_SERVICE_CLEAN_FAILURE:
      return "OUTPUT_SERVICE_CLEAN_FAILURE";
    case CleanCommand_Code.ACTION_CACHE_CLEAN_FAILURE:
      return "ACTION_CACHE_CLEAN_FAILURE";
    case CleanCommand_Code.OUT_ERR_CLOSE_FAILURE:
      return "OUT_ERR_CLOSE_FAILURE";
    case CleanCommand_Code.OUTPUT_BASE_DELETE_FAILURE:
      return "OUTPUT_BASE_DELETE_FAILURE";
    case CleanCommand_Code.OUTPUT_BASE_TEMP_MOVE_FAILURE:
      return "OUTPUT_BASE_TEMP_MOVE_FAILURE";
    case CleanCommand_Code.ASYNC_OUTPUT_BASE_DELETE_FAILURE:
      return "ASYNC_OUTPUT_BASE_DELETE_FAILURE";
    case CleanCommand_Code.EXECROOT_DELETE_FAILURE:
      return "EXECROOT_DELETE_FAILURE";
    case CleanCommand_Code.EXECROOT_TEMP_MOVE_FAILURE:
      return "EXECROOT_TEMP_MOVE_FAILURE";
    case CleanCommand_Code.ASYNC_EXECROOT_DELETE_FAILURE:
      return "ASYNC_EXECROOT_DELETE_FAILURE";
    case CleanCommand_Code.ARGUMENTS_NOT_RECOGNIZED:
      return "ARGUMENTS_NOT_RECOGNIZED";
    case CleanCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ConfigCommand {
  code: ConfigCommand_Code;
}

export enum ConfigCommand_Code {
  CONFIG_COMMAND_UNKNOWN = 0,
  TOO_MANY_CONFIG_IDS = 1,
  CONFIGURATION_NOT_FOUND = 2,
  UNRECOGNIZED = -1,
}

export function configCommand_CodeFromJSON(object: any): ConfigCommand_Code {
  switch (object) {
    case 0:
    case "CONFIG_COMMAND_UNKNOWN":
      return ConfigCommand_Code.CONFIG_COMMAND_UNKNOWN;
    case 1:
    case "TOO_MANY_CONFIG_IDS":
      return ConfigCommand_Code.TOO_MANY_CONFIG_IDS;
    case 2:
    case "CONFIGURATION_NOT_FOUND":
      return ConfigCommand_Code.CONFIGURATION_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConfigCommand_Code.UNRECOGNIZED;
  }
}

export function configCommand_CodeToJSON(object: ConfigCommand_Code): string {
  switch (object) {
    case ConfigCommand_Code.CONFIG_COMMAND_UNKNOWN:
      return "CONFIG_COMMAND_UNKNOWN";
    case ConfigCommand_Code.TOO_MANY_CONFIG_IDS:
      return "TOO_MANY_CONFIG_IDS";
    case ConfigCommand_Code.CONFIGURATION_NOT_FOUND:
      return "CONFIGURATION_NOT_FOUND";
    case ConfigCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ConfigurableQuery {
  code: ConfigurableQuery_Code;
}

export enum ConfigurableQuery_Code {
  CONFIGURABLE_QUERY_UNKNOWN = 0,
  COMMAND_LINE_EXPRESSION_MISSING = 1,
  EXPRESSION_PARSE_FAILURE = 2,
  FILTERS_NOT_SUPPORTED = 3,
  BUILDFILES_FUNCTION_NOT_SUPPORTED = 4,
  SIBLINGS_FUNCTION_NOT_SUPPORTED = 5,
  VISIBLE_FUNCTION_NOT_SUPPORTED = 6,
  ATTRIBUTE_MISSING = 7,
  INCORRECT_CONFIG_ARGUMENT_ERROR = 8,
  TARGET_MISSING = 9,
  STARLARK_SYNTAX_ERROR = 10,
  STARLARK_EVAL_ERROR = 11,
  /** FORMAT_FUNCTION_ERROR - Indicates failure to correctly define a format function */
  FORMAT_FUNCTION_ERROR = 12,
  UNRECOGNIZED = -1,
}

export function configurableQuery_CodeFromJSON(object: any): ConfigurableQuery_Code {
  switch (object) {
    case 0:
    case "CONFIGURABLE_QUERY_UNKNOWN":
      return ConfigurableQuery_Code.CONFIGURABLE_QUERY_UNKNOWN;
    case 1:
    case "COMMAND_LINE_EXPRESSION_MISSING":
      return ConfigurableQuery_Code.COMMAND_LINE_EXPRESSION_MISSING;
    case 2:
    case "EXPRESSION_PARSE_FAILURE":
      return ConfigurableQuery_Code.EXPRESSION_PARSE_FAILURE;
    case 3:
    case "FILTERS_NOT_SUPPORTED":
      return ConfigurableQuery_Code.FILTERS_NOT_SUPPORTED;
    case 4:
    case "BUILDFILES_FUNCTION_NOT_SUPPORTED":
      return ConfigurableQuery_Code.BUILDFILES_FUNCTION_NOT_SUPPORTED;
    case 5:
    case "SIBLINGS_FUNCTION_NOT_SUPPORTED":
      return ConfigurableQuery_Code.SIBLINGS_FUNCTION_NOT_SUPPORTED;
    case 6:
    case "VISIBLE_FUNCTION_NOT_SUPPORTED":
      return ConfigurableQuery_Code.VISIBLE_FUNCTION_NOT_SUPPORTED;
    case 7:
    case "ATTRIBUTE_MISSING":
      return ConfigurableQuery_Code.ATTRIBUTE_MISSING;
    case 8:
    case "INCORRECT_CONFIG_ARGUMENT_ERROR":
      return ConfigurableQuery_Code.INCORRECT_CONFIG_ARGUMENT_ERROR;
    case 9:
    case "TARGET_MISSING":
      return ConfigurableQuery_Code.TARGET_MISSING;
    case 10:
    case "STARLARK_SYNTAX_ERROR":
      return ConfigurableQuery_Code.STARLARK_SYNTAX_ERROR;
    case 11:
    case "STARLARK_EVAL_ERROR":
      return ConfigurableQuery_Code.STARLARK_EVAL_ERROR;
    case 12:
    case "FORMAT_FUNCTION_ERROR":
      return ConfigurableQuery_Code.FORMAT_FUNCTION_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConfigurableQuery_Code.UNRECOGNIZED;
  }
}

export function configurableQuery_CodeToJSON(object: ConfigurableQuery_Code): string {
  switch (object) {
    case ConfigurableQuery_Code.CONFIGURABLE_QUERY_UNKNOWN:
      return "CONFIGURABLE_QUERY_UNKNOWN";
    case ConfigurableQuery_Code.COMMAND_LINE_EXPRESSION_MISSING:
      return "COMMAND_LINE_EXPRESSION_MISSING";
    case ConfigurableQuery_Code.EXPRESSION_PARSE_FAILURE:
      return "EXPRESSION_PARSE_FAILURE";
    case ConfigurableQuery_Code.FILTERS_NOT_SUPPORTED:
      return "FILTERS_NOT_SUPPORTED";
    case ConfigurableQuery_Code.BUILDFILES_FUNCTION_NOT_SUPPORTED:
      return "BUILDFILES_FUNCTION_NOT_SUPPORTED";
    case ConfigurableQuery_Code.SIBLINGS_FUNCTION_NOT_SUPPORTED:
      return "SIBLINGS_FUNCTION_NOT_SUPPORTED";
    case ConfigurableQuery_Code.VISIBLE_FUNCTION_NOT_SUPPORTED:
      return "VISIBLE_FUNCTION_NOT_SUPPORTED";
    case ConfigurableQuery_Code.ATTRIBUTE_MISSING:
      return "ATTRIBUTE_MISSING";
    case ConfigurableQuery_Code.INCORRECT_CONFIG_ARGUMENT_ERROR:
      return "INCORRECT_CONFIG_ARGUMENT_ERROR";
    case ConfigurableQuery_Code.TARGET_MISSING:
      return "TARGET_MISSING";
    case ConfigurableQuery_Code.STARLARK_SYNTAX_ERROR:
      return "STARLARK_SYNTAX_ERROR";
    case ConfigurableQuery_Code.STARLARK_EVAL_ERROR:
      return "STARLARK_EVAL_ERROR";
    case ConfigurableQuery_Code.FORMAT_FUNCTION_ERROR:
      return "FORMAT_FUNCTION_ERROR";
    case ConfigurableQuery_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DumpCommand {
  code: DumpCommand_Code;
}

export enum DumpCommand_Code {
  DUMP_COMMAND_UNKNOWN = 0,
  NO_OUTPUT_SPECIFIED = 1,
  ACTION_CACHE_DUMP_FAILED = 2,
  COMMAND_LINE_EXPANSION_FAILURE = 3,
  ACTION_GRAPH_DUMP_FAILED = 4,
  STARLARK_HEAP_DUMP_FAILED = 5,
  SKYFRAME_MEMORY_DUMP_FAILED = 7,
  UNRECOGNIZED = -1,
}

export function dumpCommand_CodeFromJSON(object: any): DumpCommand_Code {
  switch (object) {
    case 0:
    case "DUMP_COMMAND_UNKNOWN":
      return DumpCommand_Code.DUMP_COMMAND_UNKNOWN;
    case 1:
    case "NO_OUTPUT_SPECIFIED":
      return DumpCommand_Code.NO_OUTPUT_SPECIFIED;
    case 2:
    case "ACTION_CACHE_DUMP_FAILED":
      return DumpCommand_Code.ACTION_CACHE_DUMP_FAILED;
    case 3:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return DumpCommand_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 4:
    case "ACTION_GRAPH_DUMP_FAILED":
      return DumpCommand_Code.ACTION_GRAPH_DUMP_FAILED;
    case 5:
    case "STARLARK_HEAP_DUMP_FAILED":
      return DumpCommand_Code.STARLARK_HEAP_DUMP_FAILED;
    case 7:
    case "SKYFRAME_MEMORY_DUMP_FAILED":
      return DumpCommand_Code.SKYFRAME_MEMORY_DUMP_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DumpCommand_Code.UNRECOGNIZED;
  }
}

export function dumpCommand_CodeToJSON(object: DumpCommand_Code): string {
  switch (object) {
    case DumpCommand_Code.DUMP_COMMAND_UNKNOWN:
      return "DUMP_COMMAND_UNKNOWN";
    case DumpCommand_Code.NO_OUTPUT_SPECIFIED:
      return "NO_OUTPUT_SPECIFIED";
    case DumpCommand_Code.ACTION_CACHE_DUMP_FAILED:
      return "ACTION_CACHE_DUMP_FAILED";
    case DumpCommand_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case DumpCommand_Code.ACTION_GRAPH_DUMP_FAILED:
      return "ACTION_GRAPH_DUMP_FAILED";
    case DumpCommand_Code.STARLARK_HEAP_DUMP_FAILED:
      return "STARLARK_HEAP_DUMP_FAILED";
    case DumpCommand_Code.SKYFRAME_MEMORY_DUMP_FAILED:
      return "SKYFRAME_MEMORY_DUMP_FAILED";
    case DumpCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HelpCommand {
  code: HelpCommand_Code;
}

export enum HelpCommand_Code {
  HELP_COMMAND_UNKNOWN = 0,
  MISSING_ARGUMENT = 1,
  COMMAND_NOT_FOUND = 2,
  UNRECOGNIZED = -1,
}

export function helpCommand_CodeFromJSON(object: any): HelpCommand_Code {
  switch (object) {
    case 0:
    case "HELP_COMMAND_UNKNOWN":
      return HelpCommand_Code.HELP_COMMAND_UNKNOWN;
    case 1:
    case "MISSING_ARGUMENT":
      return HelpCommand_Code.MISSING_ARGUMENT;
    case 2:
    case "COMMAND_NOT_FOUND":
      return HelpCommand_Code.COMMAND_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HelpCommand_Code.UNRECOGNIZED;
  }
}

export function helpCommand_CodeToJSON(object: HelpCommand_Code): string {
  switch (object) {
    case HelpCommand_Code.HELP_COMMAND_UNKNOWN:
      return "HELP_COMMAND_UNKNOWN";
    case HelpCommand_Code.MISSING_ARGUMENT:
      return "MISSING_ARGUMENT";
    case HelpCommand_Code.COMMAND_NOT_FOUND:
      return "COMMAND_NOT_FOUND";
    case HelpCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MobileInstall {
  code: MobileInstall_Code;
}

export enum MobileInstall_Code {
  MOBILE_INSTALL_UNKNOWN = 0,
  CLASSIC_UNSUPPORTED = 1,
  NO_TARGET_SPECIFIED = 2,
  MULTIPLE_TARGETS_SPECIFIED = 3,
  TARGET_TYPE_INVALID = 4,
  NON_ZERO_EXIT = 5,
  ERROR_RUNNING_PROGRAM = 6,
  UNRECOGNIZED = -1,
}

export function mobileInstall_CodeFromJSON(object: any): MobileInstall_Code {
  switch (object) {
    case 0:
    case "MOBILE_INSTALL_UNKNOWN":
      return MobileInstall_Code.MOBILE_INSTALL_UNKNOWN;
    case 1:
    case "CLASSIC_UNSUPPORTED":
      return MobileInstall_Code.CLASSIC_UNSUPPORTED;
    case 2:
    case "NO_TARGET_SPECIFIED":
      return MobileInstall_Code.NO_TARGET_SPECIFIED;
    case 3:
    case "MULTIPLE_TARGETS_SPECIFIED":
      return MobileInstall_Code.MULTIPLE_TARGETS_SPECIFIED;
    case 4:
    case "TARGET_TYPE_INVALID":
      return MobileInstall_Code.TARGET_TYPE_INVALID;
    case 5:
    case "NON_ZERO_EXIT":
      return MobileInstall_Code.NON_ZERO_EXIT;
    case 6:
    case "ERROR_RUNNING_PROGRAM":
      return MobileInstall_Code.ERROR_RUNNING_PROGRAM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MobileInstall_Code.UNRECOGNIZED;
  }
}

export function mobileInstall_CodeToJSON(object: MobileInstall_Code): string {
  switch (object) {
    case MobileInstall_Code.MOBILE_INSTALL_UNKNOWN:
      return "MOBILE_INSTALL_UNKNOWN";
    case MobileInstall_Code.CLASSIC_UNSUPPORTED:
      return "CLASSIC_UNSUPPORTED";
    case MobileInstall_Code.NO_TARGET_SPECIFIED:
      return "NO_TARGET_SPECIFIED";
    case MobileInstall_Code.MULTIPLE_TARGETS_SPECIFIED:
      return "MULTIPLE_TARGETS_SPECIFIED";
    case MobileInstall_Code.TARGET_TYPE_INVALID:
      return "TARGET_TYPE_INVALID";
    case MobileInstall_Code.NON_ZERO_EXIT:
      return "NON_ZERO_EXIT";
    case MobileInstall_Code.ERROR_RUNNING_PROGRAM:
      return "ERROR_RUNNING_PROGRAM";
    case MobileInstall_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ProfileCommand {
  code: ProfileCommand_Code;
}

export enum ProfileCommand_Code {
  PROFILE_COMMAND_UNKNOWN = 0,
  OLD_BINARY_FORMAT_UNSUPPORTED = 1,
  FILE_READ_FAILURE = 2,
  UNRECOGNIZED = -1,
}

export function profileCommand_CodeFromJSON(object: any): ProfileCommand_Code {
  switch (object) {
    case 0:
    case "PROFILE_COMMAND_UNKNOWN":
      return ProfileCommand_Code.PROFILE_COMMAND_UNKNOWN;
    case 1:
    case "OLD_BINARY_FORMAT_UNSUPPORTED":
      return ProfileCommand_Code.OLD_BINARY_FORMAT_UNSUPPORTED;
    case 2:
    case "FILE_READ_FAILURE":
      return ProfileCommand_Code.FILE_READ_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProfileCommand_Code.UNRECOGNIZED;
  }
}

export function profileCommand_CodeToJSON(object: ProfileCommand_Code): string {
  switch (object) {
    case ProfileCommand_Code.PROFILE_COMMAND_UNKNOWN:
      return "PROFILE_COMMAND_UNKNOWN";
    case ProfileCommand_Code.OLD_BINARY_FORMAT_UNSUPPORTED:
      return "OLD_BINARY_FORMAT_UNSUPPORTED";
    case ProfileCommand_Code.FILE_READ_FAILURE:
      return "FILE_READ_FAILURE";
    case ProfileCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RunCommand {
  code: RunCommand_Code;
}

export enum RunCommand_Code {
  RUN_COMMAND_UNKNOWN = 0,
  NO_TARGET_SPECIFIED = 1,
  TOO_MANY_TARGETS_SPECIFIED = 2,
  TARGET_NOT_EXECUTABLE = 3,
  TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE = 4,
  TARGET_BUILT_BUT_PATH_VALIDATION_FAILED = 5,
  RUN_UNDER_TARGET_NOT_BUILT = 6,
  RUN_PREREQ_UNMET = 7,
  TOO_MANY_TEST_SHARDS_OR_RUNS = 8,
  TEST_ENVIRONMENT_SETUP_FAILURE = 9,
  COMMAND_LINE_EXPANSION_FAILURE = 10,
  NO_SHELL_SPECIFIED = 11,
  SCRIPT_WRITE_FAILURE = 12,
  RUNFILES_DIRECTORIES_CREATION_FAILURE = 13,
  RUNFILES_SYMLINKS_CREATION_FAILURE = 14,
  TEST_ENVIRONMENT_SETUP_INTERRUPTED = 15,
  UNRECOGNIZED = -1,
}

export function runCommand_CodeFromJSON(object: any): RunCommand_Code {
  switch (object) {
    case 0:
    case "RUN_COMMAND_UNKNOWN":
      return RunCommand_Code.RUN_COMMAND_UNKNOWN;
    case 1:
    case "NO_TARGET_SPECIFIED":
      return RunCommand_Code.NO_TARGET_SPECIFIED;
    case 2:
    case "TOO_MANY_TARGETS_SPECIFIED":
      return RunCommand_Code.TOO_MANY_TARGETS_SPECIFIED;
    case 3:
    case "TARGET_NOT_EXECUTABLE":
      return RunCommand_Code.TARGET_NOT_EXECUTABLE;
    case 4:
    case "TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE":
      return RunCommand_Code.TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE;
    case 5:
    case "TARGET_BUILT_BUT_PATH_VALIDATION_FAILED":
      return RunCommand_Code.TARGET_BUILT_BUT_PATH_VALIDATION_FAILED;
    case 6:
    case "RUN_UNDER_TARGET_NOT_BUILT":
      return RunCommand_Code.RUN_UNDER_TARGET_NOT_BUILT;
    case 7:
    case "RUN_PREREQ_UNMET":
      return RunCommand_Code.RUN_PREREQ_UNMET;
    case 8:
    case "TOO_MANY_TEST_SHARDS_OR_RUNS":
      return RunCommand_Code.TOO_MANY_TEST_SHARDS_OR_RUNS;
    case 9:
    case "TEST_ENVIRONMENT_SETUP_FAILURE":
      return RunCommand_Code.TEST_ENVIRONMENT_SETUP_FAILURE;
    case 10:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return RunCommand_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 11:
    case "NO_SHELL_SPECIFIED":
      return RunCommand_Code.NO_SHELL_SPECIFIED;
    case 12:
    case "SCRIPT_WRITE_FAILURE":
      return RunCommand_Code.SCRIPT_WRITE_FAILURE;
    case 13:
    case "RUNFILES_DIRECTORIES_CREATION_FAILURE":
      return RunCommand_Code.RUNFILES_DIRECTORIES_CREATION_FAILURE;
    case 14:
    case "RUNFILES_SYMLINKS_CREATION_FAILURE":
      return RunCommand_Code.RUNFILES_SYMLINKS_CREATION_FAILURE;
    case 15:
    case "TEST_ENVIRONMENT_SETUP_INTERRUPTED":
      return RunCommand_Code.TEST_ENVIRONMENT_SETUP_INTERRUPTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RunCommand_Code.UNRECOGNIZED;
  }
}

export function runCommand_CodeToJSON(object: RunCommand_Code): string {
  switch (object) {
    case RunCommand_Code.RUN_COMMAND_UNKNOWN:
      return "RUN_COMMAND_UNKNOWN";
    case RunCommand_Code.NO_TARGET_SPECIFIED:
      return "NO_TARGET_SPECIFIED";
    case RunCommand_Code.TOO_MANY_TARGETS_SPECIFIED:
      return "TOO_MANY_TARGETS_SPECIFIED";
    case RunCommand_Code.TARGET_NOT_EXECUTABLE:
      return "TARGET_NOT_EXECUTABLE";
    case RunCommand_Code.TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE:
      return "TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE";
    case RunCommand_Code.TARGET_BUILT_BUT_PATH_VALIDATION_FAILED:
      return "TARGET_BUILT_BUT_PATH_VALIDATION_FAILED";
    case RunCommand_Code.RUN_UNDER_TARGET_NOT_BUILT:
      return "RUN_UNDER_TARGET_NOT_BUILT";
    case RunCommand_Code.RUN_PREREQ_UNMET:
      return "RUN_PREREQ_UNMET";
    case RunCommand_Code.TOO_MANY_TEST_SHARDS_OR_RUNS:
      return "TOO_MANY_TEST_SHARDS_OR_RUNS";
    case RunCommand_Code.TEST_ENVIRONMENT_SETUP_FAILURE:
      return "TEST_ENVIRONMENT_SETUP_FAILURE";
    case RunCommand_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case RunCommand_Code.NO_SHELL_SPECIFIED:
      return "NO_SHELL_SPECIFIED";
    case RunCommand_Code.SCRIPT_WRITE_FAILURE:
      return "SCRIPT_WRITE_FAILURE";
    case RunCommand_Code.RUNFILES_DIRECTORIES_CREATION_FAILURE:
      return "RUNFILES_DIRECTORIES_CREATION_FAILURE";
    case RunCommand_Code.RUNFILES_SYMLINKS_CREATION_FAILURE:
      return "RUNFILES_SYMLINKS_CREATION_FAILURE";
    case RunCommand_Code.TEST_ENVIRONMENT_SETUP_INTERRUPTED:
      return "TEST_ENVIRONMENT_SETUP_INTERRUPTED";
    case RunCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface VersionCommand {
  code: VersionCommand_Code;
}

export enum VersionCommand_Code {
  VERSION_COMMAND_UNKNOWN = 0,
  NOT_AVAILABLE = 1,
  UNRECOGNIZED = -1,
}

export function versionCommand_CodeFromJSON(object: any): VersionCommand_Code {
  switch (object) {
    case 0:
    case "VERSION_COMMAND_UNKNOWN":
      return VersionCommand_Code.VERSION_COMMAND_UNKNOWN;
    case 1:
    case "NOT_AVAILABLE":
      return VersionCommand_Code.NOT_AVAILABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VersionCommand_Code.UNRECOGNIZED;
  }
}

export function versionCommand_CodeToJSON(object: VersionCommand_Code): string {
  switch (object) {
    case VersionCommand_Code.VERSION_COMMAND_UNKNOWN:
      return "VERSION_COMMAND_UNKNOWN";
    case VersionCommand_Code.NOT_AVAILABLE:
      return "NOT_AVAILABLE";
    case VersionCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PrintActionCommand {
  code: PrintActionCommand_Code;
}

export enum PrintActionCommand_Code {
  PRINT_ACTION_COMMAND_UNKNOWN = 0,
  TARGET_NOT_FOUND = 1,
  COMMAND_LINE_EXPANSION_FAILURE = 2,
  TARGET_KIND_UNSUPPORTED = 3,
  ACTIONS_NOT_FOUND = 4,
  UNRECOGNIZED = -1,
}

export function printActionCommand_CodeFromJSON(object: any): PrintActionCommand_Code {
  switch (object) {
    case 0:
    case "PRINT_ACTION_COMMAND_UNKNOWN":
      return PrintActionCommand_Code.PRINT_ACTION_COMMAND_UNKNOWN;
    case 1:
    case "TARGET_NOT_FOUND":
      return PrintActionCommand_Code.TARGET_NOT_FOUND;
    case 2:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return PrintActionCommand_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 3:
    case "TARGET_KIND_UNSUPPORTED":
      return PrintActionCommand_Code.TARGET_KIND_UNSUPPORTED;
    case 4:
    case "ACTIONS_NOT_FOUND":
      return PrintActionCommand_Code.ACTIONS_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PrintActionCommand_Code.UNRECOGNIZED;
  }
}

export function printActionCommand_CodeToJSON(object: PrintActionCommand_Code): string {
  switch (object) {
    case PrintActionCommand_Code.PRINT_ACTION_COMMAND_UNKNOWN:
      return "PRINT_ACTION_COMMAND_UNKNOWN";
    case PrintActionCommand_Code.TARGET_NOT_FOUND:
      return "TARGET_NOT_FOUND";
    case PrintActionCommand_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case PrintActionCommand_Code.TARGET_KIND_UNSUPPORTED:
      return "TARGET_KIND_UNSUPPORTED";
    case PrintActionCommand_Code.ACTIONS_NOT_FOUND:
      return "ACTIONS_NOT_FOUND";
    case PrintActionCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WorkspaceStatus {
  code: WorkspaceStatus_Code;
}

export enum WorkspaceStatus_Code {
  WORKSPACE_STATUS_UNKNOWN = 0,
  NON_ZERO_EXIT = 1,
  ABNORMAL_TERMINATION = 2,
  EXEC_FAILED = 3,
  PARSE_FAILURE = 4,
  VALIDATION_FAILURE = 5,
  CONTENT_UPDATE_IO_EXCEPTION = 6,
  STDERR_IO_EXCEPTION = 7,
  UNRECOGNIZED = -1,
}

export function workspaceStatus_CodeFromJSON(object: any): WorkspaceStatus_Code {
  switch (object) {
    case 0:
    case "WORKSPACE_STATUS_UNKNOWN":
      return WorkspaceStatus_Code.WORKSPACE_STATUS_UNKNOWN;
    case 1:
    case "NON_ZERO_EXIT":
      return WorkspaceStatus_Code.NON_ZERO_EXIT;
    case 2:
    case "ABNORMAL_TERMINATION":
      return WorkspaceStatus_Code.ABNORMAL_TERMINATION;
    case 3:
    case "EXEC_FAILED":
      return WorkspaceStatus_Code.EXEC_FAILED;
    case 4:
    case "PARSE_FAILURE":
      return WorkspaceStatus_Code.PARSE_FAILURE;
    case 5:
    case "VALIDATION_FAILURE":
      return WorkspaceStatus_Code.VALIDATION_FAILURE;
    case 6:
    case "CONTENT_UPDATE_IO_EXCEPTION":
      return WorkspaceStatus_Code.CONTENT_UPDATE_IO_EXCEPTION;
    case 7:
    case "STDERR_IO_EXCEPTION":
      return WorkspaceStatus_Code.STDERR_IO_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkspaceStatus_Code.UNRECOGNIZED;
  }
}

export function workspaceStatus_CodeToJSON(object: WorkspaceStatus_Code): string {
  switch (object) {
    case WorkspaceStatus_Code.WORKSPACE_STATUS_UNKNOWN:
      return "WORKSPACE_STATUS_UNKNOWN";
    case WorkspaceStatus_Code.NON_ZERO_EXIT:
      return "NON_ZERO_EXIT";
    case WorkspaceStatus_Code.ABNORMAL_TERMINATION:
      return "ABNORMAL_TERMINATION";
    case WorkspaceStatus_Code.EXEC_FAILED:
      return "EXEC_FAILED";
    case WorkspaceStatus_Code.PARSE_FAILURE:
      return "PARSE_FAILURE";
    case WorkspaceStatus_Code.VALIDATION_FAILURE:
      return "VALIDATION_FAILURE";
    case WorkspaceStatus_Code.CONTENT_UPDATE_IO_EXCEPTION:
      return "CONTENT_UPDATE_IO_EXCEPTION";
    case WorkspaceStatus_Code.STDERR_IO_EXCEPTION:
      return "STDERR_IO_EXCEPTION";
    case WorkspaceStatus_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface JavaCompile {
  code: JavaCompile_Code;
}

export enum JavaCompile_Code {
  JAVA_COMPILE_UNKNOWN = 0,
  REDUCED_CLASSPATH_FAILURE = 1,
  COMMAND_LINE_EXPANSION_FAILURE = 2,
  JDEPS_READ_IO_EXCEPTION = 3,
  REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE = 4,
  UNRECOGNIZED = -1,
}

export function javaCompile_CodeFromJSON(object: any): JavaCompile_Code {
  switch (object) {
    case 0:
    case "JAVA_COMPILE_UNKNOWN":
      return JavaCompile_Code.JAVA_COMPILE_UNKNOWN;
    case 1:
    case "REDUCED_CLASSPATH_FAILURE":
      return JavaCompile_Code.REDUCED_CLASSPATH_FAILURE;
    case 2:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return JavaCompile_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 3:
    case "JDEPS_READ_IO_EXCEPTION":
      return JavaCompile_Code.JDEPS_READ_IO_EXCEPTION;
    case 4:
    case "REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE":
      return JavaCompile_Code.REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JavaCompile_Code.UNRECOGNIZED;
  }
}

export function javaCompile_CodeToJSON(object: JavaCompile_Code): string {
  switch (object) {
    case JavaCompile_Code.JAVA_COMPILE_UNKNOWN:
      return "JAVA_COMPILE_UNKNOWN";
    case JavaCompile_Code.REDUCED_CLASSPATH_FAILURE:
      return "REDUCED_CLASSPATH_FAILURE";
    case JavaCompile_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case JavaCompile_Code.JDEPS_READ_IO_EXCEPTION:
      return "JDEPS_READ_IO_EXCEPTION";
    case JavaCompile_Code.REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE:
      return "REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE";
    case JavaCompile_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActionRewinding {
  code: ActionRewinding_Code;
}

export enum ActionRewinding_Code {
  ACTION_REWINDING_UNKNOWN = 0,
  LOST_INPUT_TOO_MANY_TIMES = 1,
  REWIND_LOST_INPUTS_PREREQ_UNMET = 3,
  LOST_OUTPUT_TOO_MANY_TIMES = 4,
  LOST_INPUT_REWINDING_DISABLED = 5,
  LOST_OUTPUT_REWINDING_DISABLED = 6,
  /**
   * DEPRECATED_LOST_INPUT_IS_SOURCE - Deprecated: attempting to rewind a source artifact is now a hard crash.
   *
   * @deprecated
   */
  DEPRECATED_LOST_INPUT_IS_SOURCE = 2,
  UNRECOGNIZED = -1,
}

export function actionRewinding_CodeFromJSON(object: any): ActionRewinding_Code {
  switch (object) {
    case 0:
    case "ACTION_REWINDING_UNKNOWN":
      return ActionRewinding_Code.ACTION_REWINDING_UNKNOWN;
    case 1:
    case "LOST_INPUT_TOO_MANY_TIMES":
      return ActionRewinding_Code.LOST_INPUT_TOO_MANY_TIMES;
    case 3:
    case "REWIND_LOST_INPUTS_PREREQ_UNMET":
      return ActionRewinding_Code.REWIND_LOST_INPUTS_PREREQ_UNMET;
    case 4:
    case "LOST_OUTPUT_TOO_MANY_TIMES":
      return ActionRewinding_Code.LOST_OUTPUT_TOO_MANY_TIMES;
    case 5:
    case "LOST_INPUT_REWINDING_DISABLED":
      return ActionRewinding_Code.LOST_INPUT_REWINDING_DISABLED;
    case 6:
    case "LOST_OUTPUT_REWINDING_DISABLED":
      return ActionRewinding_Code.LOST_OUTPUT_REWINDING_DISABLED;
    case 2:
    case "DEPRECATED_LOST_INPUT_IS_SOURCE":
      return ActionRewinding_Code.DEPRECATED_LOST_INPUT_IS_SOURCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionRewinding_Code.UNRECOGNIZED;
  }
}

export function actionRewinding_CodeToJSON(object: ActionRewinding_Code): string {
  switch (object) {
    case ActionRewinding_Code.ACTION_REWINDING_UNKNOWN:
      return "ACTION_REWINDING_UNKNOWN";
    case ActionRewinding_Code.LOST_INPUT_TOO_MANY_TIMES:
      return "LOST_INPUT_TOO_MANY_TIMES";
    case ActionRewinding_Code.REWIND_LOST_INPUTS_PREREQ_UNMET:
      return "REWIND_LOST_INPUTS_PREREQ_UNMET";
    case ActionRewinding_Code.LOST_OUTPUT_TOO_MANY_TIMES:
      return "LOST_OUTPUT_TOO_MANY_TIMES";
    case ActionRewinding_Code.LOST_INPUT_REWINDING_DISABLED:
      return "LOST_INPUT_REWINDING_DISABLED";
    case ActionRewinding_Code.LOST_OUTPUT_REWINDING_DISABLED:
      return "LOST_OUTPUT_REWINDING_DISABLED";
    case ActionRewinding_Code.DEPRECATED_LOST_INPUT_IS_SOURCE:
      return "DEPRECATED_LOST_INPUT_IS_SOURCE";
    case ActionRewinding_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CppCompile {
  code: CppCompile_Code;
}

export enum CppCompile_Code {
  CPP_COMPILE_UNKNOWN = 0,
  FIND_USED_HEADERS_IO_EXCEPTION = 1,
  COPY_OUT_ERR_FAILURE = 2,
  D_FILE_READ_FAILURE = 3,
  COMMAND_GENERATION_FAILURE = 4,
  MODULE_EXPANSION_TIMEOUT = 5,
  INCLUDE_PATH_OUTSIDE_EXEC_ROOT = 6,
  FAKE_COMMAND_GENERATION_FAILURE = 7,
  UNDECLARED_INCLUSIONS = 8,
  D_FILE_PARSE_FAILURE = 9,
  COVERAGE_NOTES_CREATION_FAILURE = 10,
  MODULE_EXPANSION_MISSING_DATA = 11,
  UNRECOGNIZED = -1,
}

export function cppCompile_CodeFromJSON(object: any): CppCompile_Code {
  switch (object) {
    case 0:
    case "CPP_COMPILE_UNKNOWN":
      return CppCompile_Code.CPP_COMPILE_UNKNOWN;
    case 1:
    case "FIND_USED_HEADERS_IO_EXCEPTION":
      return CppCompile_Code.FIND_USED_HEADERS_IO_EXCEPTION;
    case 2:
    case "COPY_OUT_ERR_FAILURE":
      return CppCompile_Code.COPY_OUT_ERR_FAILURE;
    case 3:
    case "D_FILE_READ_FAILURE":
      return CppCompile_Code.D_FILE_READ_FAILURE;
    case 4:
    case "COMMAND_GENERATION_FAILURE":
      return CppCompile_Code.COMMAND_GENERATION_FAILURE;
    case 5:
    case "MODULE_EXPANSION_TIMEOUT":
      return CppCompile_Code.MODULE_EXPANSION_TIMEOUT;
    case 6:
    case "INCLUDE_PATH_OUTSIDE_EXEC_ROOT":
      return CppCompile_Code.INCLUDE_PATH_OUTSIDE_EXEC_ROOT;
    case 7:
    case "FAKE_COMMAND_GENERATION_FAILURE":
      return CppCompile_Code.FAKE_COMMAND_GENERATION_FAILURE;
    case 8:
    case "UNDECLARED_INCLUSIONS":
      return CppCompile_Code.UNDECLARED_INCLUSIONS;
    case 9:
    case "D_FILE_PARSE_FAILURE":
      return CppCompile_Code.D_FILE_PARSE_FAILURE;
    case 10:
    case "COVERAGE_NOTES_CREATION_FAILURE":
      return CppCompile_Code.COVERAGE_NOTES_CREATION_FAILURE;
    case 11:
    case "MODULE_EXPANSION_MISSING_DATA":
      return CppCompile_Code.MODULE_EXPANSION_MISSING_DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CppCompile_Code.UNRECOGNIZED;
  }
}

export function cppCompile_CodeToJSON(object: CppCompile_Code): string {
  switch (object) {
    case CppCompile_Code.CPP_COMPILE_UNKNOWN:
      return "CPP_COMPILE_UNKNOWN";
    case CppCompile_Code.FIND_USED_HEADERS_IO_EXCEPTION:
      return "FIND_USED_HEADERS_IO_EXCEPTION";
    case CppCompile_Code.COPY_OUT_ERR_FAILURE:
      return "COPY_OUT_ERR_FAILURE";
    case CppCompile_Code.D_FILE_READ_FAILURE:
      return "D_FILE_READ_FAILURE";
    case CppCompile_Code.COMMAND_GENERATION_FAILURE:
      return "COMMAND_GENERATION_FAILURE";
    case CppCompile_Code.MODULE_EXPANSION_TIMEOUT:
      return "MODULE_EXPANSION_TIMEOUT";
    case CppCompile_Code.INCLUDE_PATH_OUTSIDE_EXEC_ROOT:
      return "INCLUDE_PATH_OUTSIDE_EXEC_ROOT";
    case CppCompile_Code.FAKE_COMMAND_GENERATION_FAILURE:
      return "FAKE_COMMAND_GENERATION_FAILURE";
    case CppCompile_Code.UNDECLARED_INCLUSIONS:
      return "UNDECLARED_INCLUSIONS";
    case CppCompile_Code.D_FILE_PARSE_FAILURE:
      return "D_FILE_PARSE_FAILURE";
    case CppCompile_Code.COVERAGE_NOTES_CREATION_FAILURE:
      return "COVERAGE_NOTES_CREATION_FAILURE";
    case CppCompile_Code.MODULE_EXPANSION_MISSING_DATA:
      return "MODULE_EXPANSION_MISSING_DATA";
    case CppCompile_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface StarlarkAction {
  code: StarlarkAction_Code;
}

export enum StarlarkAction_Code {
  STARLARK_ACTION_UNKNOWN = 0,
  UNUSED_INPUT_LIST_READ_FAILURE = 1,
  UNUSED_INPUT_LIST_FILE_NOT_FOUND = 2,
  UNRECOGNIZED = -1,
}

export function starlarkAction_CodeFromJSON(object: any): StarlarkAction_Code {
  switch (object) {
    case 0:
    case "STARLARK_ACTION_UNKNOWN":
      return StarlarkAction_Code.STARLARK_ACTION_UNKNOWN;
    case 1:
    case "UNUSED_INPUT_LIST_READ_FAILURE":
      return StarlarkAction_Code.UNUSED_INPUT_LIST_READ_FAILURE;
    case 2:
    case "UNUSED_INPUT_LIST_FILE_NOT_FOUND":
      return StarlarkAction_Code.UNUSED_INPUT_LIST_FILE_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StarlarkAction_Code.UNRECOGNIZED;
  }
}

export function starlarkAction_CodeToJSON(object: StarlarkAction_Code): string {
  switch (object) {
    case StarlarkAction_Code.STARLARK_ACTION_UNKNOWN:
      return "STARLARK_ACTION_UNKNOWN";
    case StarlarkAction_Code.UNUSED_INPUT_LIST_READ_FAILURE:
      return "UNUSED_INPUT_LIST_READ_FAILURE";
    case StarlarkAction_Code.UNUSED_INPUT_LIST_FILE_NOT_FOUND:
      return "UNUSED_INPUT_LIST_FILE_NOT_FOUND";
    case StarlarkAction_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NinjaAction {
  code: NinjaAction_Code;
}

export enum NinjaAction_Code {
  NINJA_ACTION_UNKNOWN = 0,
  INVALID_DEPFILE_DECLARED_DEPENDENCY = 1,
  D_FILE_PARSE_FAILURE = 2,
  UNRECOGNIZED = -1,
}

export function ninjaAction_CodeFromJSON(object: any): NinjaAction_Code {
  switch (object) {
    case 0:
    case "NINJA_ACTION_UNKNOWN":
      return NinjaAction_Code.NINJA_ACTION_UNKNOWN;
    case 1:
    case "INVALID_DEPFILE_DECLARED_DEPENDENCY":
      return NinjaAction_Code.INVALID_DEPFILE_DECLARED_DEPENDENCY;
    case 2:
    case "D_FILE_PARSE_FAILURE":
      return NinjaAction_Code.D_FILE_PARSE_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NinjaAction_Code.UNRECOGNIZED;
  }
}

export function ninjaAction_CodeToJSON(object: NinjaAction_Code): string {
  switch (object) {
    case NinjaAction_Code.NINJA_ACTION_UNKNOWN:
      return "NINJA_ACTION_UNKNOWN";
    case NinjaAction_Code.INVALID_DEPFILE_DECLARED_DEPENDENCY:
      return "INVALID_DEPFILE_DECLARED_DEPENDENCY";
    case NinjaAction_Code.D_FILE_PARSE_FAILURE:
      return "D_FILE_PARSE_FAILURE";
    case NinjaAction_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DynamicExecution {
  code: DynamicExecution_Code;
}

export enum DynamicExecution_Code {
  DYNAMIC_EXECUTION_UNKNOWN = 0,
  XCODE_RELATED_PREREQ_UNMET = 1,
  ACTION_LOG_MOVE_FAILURE = 2,
  RUN_FAILURE = 3,
  NO_USABLE_STRATEGY_FOUND = 4,
  UNRECOGNIZED = -1,
}

export function dynamicExecution_CodeFromJSON(object: any): DynamicExecution_Code {
  switch (object) {
    case 0:
    case "DYNAMIC_EXECUTION_UNKNOWN":
      return DynamicExecution_Code.DYNAMIC_EXECUTION_UNKNOWN;
    case 1:
    case "XCODE_RELATED_PREREQ_UNMET":
      return DynamicExecution_Code.XCODE_RELATED_PREREQ_UNMET;
    case 2:
    case "ACTION_LOG_MOVE_FAILURE":
      return DynamicExecution_Code.ACTION_LOG_MOVE_FAILURE;
    case 3:
    case "RUN_FAILURE":
      return DynamicExecution_Code.RUN_FAILURE;
    case 4:
    case "NO_USABLE_STRATEGY_FOUND":
      return DynamicExecution_Code.NO_USABLE_STRATEGY_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DynamicExecution_Code.UNRECOGNIZED;
  }
}

export function dynamicExecution_CodeToJSON(object: DynamicExecution_Code): string {
  switch (object) {
    case DynamicExecution_Code.DYNAMIC_EXECUTION_UNKNOWN:
      return "DYNAMIC_EXECUTION_UNKNOWN";
    case DynamicExecution_Code.XCODE_RELATED_PREREQ_UNMET:
      return "XCODE_RELATED_PREREQ_UNMET";
    case DynamicExecution_Code.ACTION_LOG_MOVE_FAILURE:
      return "ACTION_LOG_MOVE_FAILURE";
    case DynamicExecution_Code.RUN_FAILURE:
      return "RUN_FAILURE";
    case DynamicExecution_Code.NO_USABLE_STRATEGY_FOUND:
      return "NO_USABLE_STRATEGY_FOUND";
    case DynamicExecution_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FailAction {
  code: FailAction_Code;
}

export enum FailAction_Code {
  FAIL_ACTION_UNKNOWN = 0,
  INTENTIONAL_FAILURE = 1,
  INCORRECT_PYTHON_VERSION = 2,
  PROGUARD_SPECS_MISSING = 3,
  DYNAMIC_LINKING_NOT_SUPPORTED = 4,
  SOURCE_FILES_MISSING = 5,
  INCORRECT_TOOLCHAIN = 6,
  FRAGMENT_CLASS_MISSING = 7,
  CANT_BUILD_INCOMPATIBLE_TARGET = 10,
  UNRECOGNIZED = -1,
}

export function failAction_CodeFromJSON(object: any): FailAction_Code {
  switch (object) {
    case 0:
    case "FAIL_ACTION_UNKNOWN":
      return FailAction_Code.FAIL_ACTION_UNKNOWN;
    case 1:
    case "INTENTIONAL_FAILURE":
      return FailAction_Code.INTENTIONAL_FAILURE;
    case 2:
    case "INCORRECT_PYTHON_VERSION":
      return FailAction_Code.INCORRECT_PYTHON_VERSION;
    case 3:
    case "PROGUARD_SPECS_MISSING":
      return FailAction_Code.PROGUARD_SPECS_MISSING;
    case 4:
    case "DYNAMIC_LINKING_NOT_SUPPORTED":
      return FailAction_Code.DYNAMIC_LINKING_NOT_SUPPORTED;
    case 5:
    case "SOURCE_FILES_MISSING":
      return FailAction_Code.SOURCE_FILES_MISSING;
    case 6:
    case "INCORRECT_TOOLCHAIN":
      return FailAction_Code.INCORRECT_TOOLCHAIN;
    case 7:
    case "FRAGMENT_CLASS_MISSING":
      return FailAction_Code.FRAGMENT_CLASS_MISSING;
    case 10:
    case "CANT_BUILD_INCOMPATIBLE_TARGET":
      return FailAction_Code.CANT_BUILD_INCOMPATIBLE_TARGET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FailAction_Code.UNRECOGNIZED;
  }
}

export function failAction_CodeToJSON(object: FailAction_Code): string {
  switch (object) {
    case FailAction_Code.FAIL_ACTION_UNKNOWN:
      return "FAIL_ACTION_UNKNOWN";
    case FailAction_Code.INTENTIONAL_FAILURE:
      return "INTENTIONAL_FAILURE";
    case FailAction_Code.INCORRECT_PYTHON_VERSION:
      return "INCORRECT_PYTHON_VERSION";
    case FailAction_Code.PROGUARD_SPECS_MISSING:
      return "PROGUARD_SPECS_MISSING";
    case FailAction_Code.DYNAMIC_LINKING_NOT_SUPPORTED:
      return "DYNAMIC_LINKING_NOT_SUPPORTED";
    case FailAction_Code.SOURCE_FILES_MISSING:
      return "SOURCE_FILES_MISSING";
    case FailAction_Code.INCORRECT_TOOLCHAIN:
      return "INCORRECT_TOOLCHAIN";
    case FailAction_Code.FRAGMENT_CLASS_MISSING:
      return "FRAGMENT_CLASS_MISSING";
    case FailAction_Code.CANT_BUILD_INCOMPATIBLE_TARGET:
      return "CANT_BUILD_INCOMPATIBLE_TARGET";
    case FailAction_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SymlinkAction {
  code: SymlinkAction_Code;
}

export enum SymlinkAction_Code {
  SYMLINK_ACTION_UNKNOWN = 0,
  EXECUTABLE_INPUT_NOT_FILE = 1,
  EXECUTABLE_INPUT_IS_NOT = 2,
  EXECUTABLE_INPUT_CHECK_IO_EXCEPTION = 3,
  LINK_CREATION_IO_EXCEPTION = 4,
  LINK_TOUCH_IO_EXCEPTION = 5,
  LINK_LOG_IO_EXCEPTION = 6,
  UNRECOGNIZED = -1,
}

export function symlinkAction_CodeFromJSON(object: any): SymlinkAction_Code {
  switch (object) {
    case 0:
    case "SYMLINK_ACTION_UNKNOWN":
      return SymlinkAction_Code.SYMLINK_ACTION_UNKNOWN;
    case 1:
    case "EXECUTABLE_INPUT_NOT_FILE":
      return SymlinkAction_Code.EXECUTABLE_INPUT_NOT_FILE;
    case 2:
    case "EXECUTABLE_INPUT_IS_NOT":
      return SymlinkAction_Code.EXECUTABLE_INPUT_IS_NOT;
    case 3:
    case "EXECUTABLE_INPUT_CHECK_IO_EXCEPTION":
      return SymlinkAction_Code.EXECUTABLE_INPUT_CHECK_IO_EXCEPTION;
    case 4:
    case "LINK_CREATION_IO_EXCEPTION":
      return SymlinkAction_Code.LINK_CREATION_IO_EXCEPTION;
    case 5:
    case "LINK_TOUCH_IO_EXCEPTION":
      return SymlinkAction_Code.LINK_TOUCH_IO_EXCEPTION;
    case 6:
    case "LINK_LOG_IO_EXCEPTION":
      return SymlinkAction_Code.LINK_LOG_IO_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SymlinkAction_Code.UNRECOGNIZED;
  }
}

export function symlinkAction_CodeToJSON(object: SymlinkAction_Code): string {
  switch (object) {
    case SymlinkAction_Code.SYMLINK_ACTION_UNKNOWN:
      return "SYMLINK_ACTION_UNKNOWN";
    case SymlinkAction_Code.EXECUTABLE_INPUT_NOT_FILE:
      return "EXECUTABLE_INPUT_NOT_FILE";
    case SymlinkAction_Code.EXECUTABLE_INPUT_IS_NOT:
      return "EXECUTABLE_INPUT_IS_NOT";
    case SymlinkAction_Code.EXECUTABLE_INPUT_CHECK_IO_EXCEPTION:
      return "EXECUTABLE_INPUT_CHECK_IO_EXCEPTION";
    case SymlinkAction_Code.LINK_CREATION_IO_EXCEPTION:
      return "LINK_CREATION_IO_EXCEPTION";
    case SymlinkAction_Code.LINK_TOUCH_IO_EXCEPTION:
      return "LINK_TOUCH_IO_EXCEPTION";
    case SymlinkAction_Code.LINK_LOG_IO_EXCEPTION:
      return "LINK_LOG_IO_EXCEPTION";
    case SymlinkAction_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CppLink {
  code: CppLink_Code;
}

export enum CppLink_Code {
  CPP_LINK_UNKNOWN = 0,
  COMMAND_GENERATION_FAILURE = 1,
  FAKE_COMMAND_GENERATION_FAILURE = 2,
  UNRECOGNIZED = -1,
}

export function cppLink_CodeFromJSON(object: any): CppLink_Code {
  switch (object) {
    case 0:
    case "CPP_LINK_UNKNOWN":
      return CppLink_Code.CPP_LINK_UNKNOWN;
    case 1:
    case "COMMAND_GENERATION_FAILURE":
      return CppLink_Code.COMMAND_GENERATION_FAILURE;
    case 2:
    case "FAKE_COMMAND_GENERATION_FAILURE":
      return CppLink_Code.FAKE_COMMAND_GENERATION_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CppLink_Code.UNRECOGNIZED;
  }
}

export function cppLink_CodeToJSON(object: CppLink_Code): string {
  switch (object) {
    case CppLink_Code.CPP_LINK_UNKNOWN:
      return "CPP_LINK_UNKNOWN";
    case CppLink_Code.COMMAND_GENERATION_FAILURE:
      return "COMMAND_GENERATION_FAILURE";
    case CppLink_Code.FAKE_COMMAND_GENERATION_FAILURE:
      return "FAKE_COMMAND_GENERATION_FAILURE";
    case CppLink_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LtoAction {
  code: LtoAction_Code;
}

export enum LtoAction_Code {
  LTO_ACTION_UNKNOWN = 0,
  INVALID_ABSOLUTE_PATH_IN_IMPORTS = 1,
  MISSING_BITCODE_FILES = 2,
  IMPORTS_READ_IO_EXCEPTION = 3,
  UNRECOGNIZED = -1,
}

export function ltoAction_CodeFromJSON(object: any): LtoAction_Code {
  switch (object) {
    case 0:
    case "LTO_ACTION_UNKNOWN":
      return LtoAction_Code.LTO_ACTION_UNKNOWN;
    case 1:
    case "INVALID_ABSOLUTE_PATH_IN_IMPORTS":
      return LtoAction_Code.INVALID_ABSOLUTE_PATH_IN_IMPORTS;
    case 2:
    case "MISSING_BITCODE_FILES":
      return LtoAction_Code.MISSING_BITCODE_FILES;
    case 3:
    case "IMPORTS_READ_IO_EXCEPTION":
      return LtoAction_Code.IMPORTS_READ_IO_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LtoAction_Code.UNRECOGNIZED;
  }
}

export function ltoAction_CodeToJSON(object: LtoAction_Code): string {
  switch (object) {
    case LtoAction_Code.LTO_ACTION_UNKNOWN:
      return "LTO_ACTION_UNKNOWN";
    case LtoAction_Code.INVALID_ABSOLUTE_PATH_IN_IMPORTS:
      return "INVALID_ABSOLUTE_PATH_IN_IMPORTS";
    case LtoAction_Code.MISSING_BITCODE_FILES:
      return "MISSING_BITCODE_FILES";
    case LtoAction_Code.IMPORTS_READ_IO_EXCEPTION:
      return "IMPORTS_READ_IO_EXCEPTION";
    case LtoAction_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TestAction {
  code: TestAction_Code;
}

export enum TestAction_Code {
  TEST_ACTION_UNKNOWN = 0,
  NO_KEEP_GOING_TEST_FAILURE = 1,
  LOCAL_TEST_PREREQ_UNMET = 2,
  COMMAND_LINE_EXPANSION_FAILURE = 3,
  DUPLICATE_CPU_TAGS = 4,
  INVALID_CPU_TAG = 5,
  UNRECOGNIZED = -1,
}

export function testAction_CodeFromJSON(object: any): TestAction_Code {
  switch (object) {
    case 0:
    case "TEST_ACTION_UNKNOWN":
      return TestAction_Code.TEST_ACTION_UNKNOWN;
    case 1:
    case "NO_KEEP_GOING_TEST_FAILURE":
      return TestAction_Code.NO_KEEP_GOING_TEST_FAILURE;
    case 2:
    case "LOCAL_TEST_PREREQ_UNMET":
      return TestAction_Code.LOCAL_TEST_PREREQ_UNMET;
    case 3:
    case "COMMAND_LINE_EXPANSION_FAILURE":
      return TestAction_Code.COMMAND_LINE_EXPANSION_FAILURE;
    case 4:
    case "DUPLICATE_CPU_TAGS":
      return TestAction_Code.DUPLICATE_CPU_TAGS;
    case 5:
    case "INVALID_CPU_TAG":
      return TestAction_Code.INVALID_CPU_TAG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TestAction_Code.UNRECOGNIZED;
  }
}

export function testAction_CodeToJSON(object: TestAction_Code): string {
  switch (object) {
    case TestAction_Code.TEST_ACTION_UNKNOWN:
      return "TEST_ACTION_UNKNOWN";
    case TestAction_Code.NO_KEEP_GOING_TEST_FAILURE:
      return "NO_KEEP_GOING_TEST_FAILURE";
    case TestAction_Code.LOCAL_TEST_PREREQ_UNMET:
      return "LOCAL_TEST_PREREQ_UNMET";
    case TestAction_Code.COMMAND_LINE_EXPANSION_FAILURE:
      return "COMMAND_LINE_EXPANSION_FAILURE";
    case TestAction_Code.DUPLICATE_CPU_TAGS:
      return "DUPLICATE_CPU_TAGS";
    case TestAction_Code.INVALID_CPU_TAG:
      return "INVALID_CPU_TAG";
    case TestAction_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Worker {
  code: Worker_Code;
}

export enum Worker_Code {
  WORKER_UNKNOWN = 0,
  MULTIPLEXER_INSTANCE_REMOVAL_FAILURE = 1,
  MULTIPLEXER_DOES_NOT_EXIST = 2,
  NO_TOOLS = 3,
  NO_FLAGFILE = 4,
  VIRTUAL_INPUT_MATERIALIZATION_FAILURE = 5,
  BORROW_FAILURE = 6,
  PREFETCH_FAILURE = 7,
  PREPARE_FAILURE = 8,
  REQUEST_FAILURE = 9,
  PARSE_RESPONSE_FAILURE = 10,
  NO_RESPONSE = 11,
  FINISH_FAILURE = 12,
  FORBIDDEN_INPUT = 13,
  UNRECOGNIZED = -1,
}

export function worker_CodeFromJSON(object: any): Worker_Code {
  switch (object) {
    case 0:
    case "WORKER_UNKNOWN":
      return Worker_Code.WORKER_UNKNOWN;
    case 1:
    case "MULTIPLEXER_INSTANCE_REMOVAL_FAILURE":
      return Worker_Code.MULTIPLEXER_INSTANCE_REMOVAL_FAILURE;
    case 2:
    case "MULTIPLEXER_DOES_NOT_EXIST":
      return Worker_Code.MULTIPLEXER_DOES_NOT_EXIST;
    case 3:
    case "NO_TOOLS":
      return Worker_Code.NO_TOOLS;
    case 4:
    case "NO_FLAGFILE":
      return Worker_Code.NO_FLAGFILE;
    case 5:
    case "VIRTUAL_INPUT_MATERIALIZATION_FAILURE":
      return Worker_Code.VIRTUAL_INPUT_MATERIALIZATION_FAILURE;
    case 6:
    case "BORROW_FAILURE":
      return Worker_Code.BORROW_FAILURE;
    case 7:
    case "PREFETCH_FAILURE":
      return Worker_Code.PREFETCH_FAILURE;
    case 8:
    case "PREPARE_FAILURE":
      return Worker_Code.PREPARE_FAILURE;
    case 9:
    case "REQUEST_FAILURE":
      return Worker_Code.REQUEST_FAILURE;
    case 10:
    case "PARSE_RESPONSE_FAILURE":
      return Worker_Code.PARSE_RESPONSE_FAILURE;
    case 11:
    case "NO_RESPONSE":
      return Worker_Code.NO_RESPONSE;
    case 12:
    case "FINISH_FAILURE":
      return Worker_Code.FINISH_FAILURE;
    case 13:
    case "FORBIDDEN_INPUT":
      return Worker_Code.FORBIDDEN_INPUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Worker_Code.UNRECOGNIZED;
  }
}

export function worker_CodeToJSON(object: Worker_Code): string {
  switch (object) {
    case Worker_Code.WORKER_UNKNOWN:
      return "WORKER_UNKNOWN";
    case Worker_Code.MULTIPLEXER_INSTANCE_REMOVAL_FAILURE:
      return "MULTIPLEXER_INSTANCE_REMOVAL_FAILURE";
    case Worker_Code.MULTIPLEXER_DOES_NOT_EXIST:
      return "MULTIPLEXER_DOES_NOT_EXIST";
    case Worker_Code.NO_TOOLS:
      return "NO_TOOLS";
    case Worker_Code.NO_FLAGFILE:
      return "NO_FLAGFILE";
    case Worker_Code.VIRTUAL_INPUT_MATERIALIZATION_FAILURE:
      return "VIRTUAL_INPUT_MATERIALIZATION_FAILURE";
    case Worker_Code.BORROW_FAILURE:
      return "BORROW_FAILURE";
    case Worker_Code.PREFETCH_FAILURE:
      return "PREFETCH_FAILURE";
    case Worker_Code.PREPARE_FAILURE:
      return "PREPARE_FAILURE";
    case Worker_Code.REQUEST_FAILURE:
      return "REQUEST_FAILURE";
    case Worker_Code.PARSE_RESPONSE_FAILURE:
      return "PARSE_RESPONSE_FAILURE";
    case Worker_Code.NO_RESPONSE:
      return "NO_RESPONSE";
    case Worker_Code.FINISH_FAILURE:
      return "FINISH_FAILURE";
    case Worker_Code.FORBIDDEN_INPUT:
      return "FORBIDDEN_INPUT";
    case Worker_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Analysis {
  code: Analysis_Code;
}

export enum Analysis_Code {
  ANALYSIS_UNKNOWN = 0,
  LOAD_FAILURE = 1,
  /**
   * GENERIC_LOADING_PHASE_FAILURE - TODO(b/138456686): this code should be deprecated in favor of more finely
   *   resolved loading-phase codes.
   */
  GENERIC_LOADING_PHASE_FAILURE = 2,
  NOT_ALL_TARGETS_ANALYZED = 3,
  CYCLE = 4,
  PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID = 5,
  ASPECT_LABEL_SYNTAX_ERROR = 6,
  ASPECT_PREREQ_UNMET = 7,
  ASPECT_NOT_FOUND = 8,
  ACTION_CONFLICT = 9,
  ARTIFACT_PREFIX_CONFLICT = 10,
  UNEXPECTED_ANALYSIS_EXCEPTION = 11,
  TARGETS_MISSING_ENVIRONMENTS = 12,
  INVALID_ENVIRONMENT = 13,
  ENVIRONMENT_MISSING_FROM_GROUPS = 14,
  EXEC_GROUP_MISSING = 15,
  INVALID_EXECUTION_PLATFORM = 16,
  ASPECT_CREATION_FAILED = 17,
  CONFIGURED_VALUE_CREATION_FAILED = 18,
  INCOMPATIBLE_TARGET_REQUESTED = 19,
  ANALYSIS_FAILURE_PROPAGATION_FAILED = 20,
  ANALYSIS_CACHE_DISCARDED = 21,
  INVALID_RUNFILES_TREE = 22,
  UNRECOGNIZED = -1,
}

export function analysis_CodeFromJSON(object: any): Analysis_Code {
  switch (object) {
    case 0:
    case "ANALYSIS_UNKNOWN":
      return Analysis_Code.ANALYSIS_UNKNOWN;
    case 1:
    case "LOAD_FAILURE":
      return Analysis_Code.LOAD_FAILURE;
    case 2:
    case "GENERIC_LOADING_PHASE_FAILURE":
      return Analysis_Code.GENERIC_LOADING_PHASE_FAILURE;
    case 3:
    case "NOT_ALL_TARGETS_ANALYZED":
      return Analysis_Code.NOT_ALL_TARGETS_ANALYZED;
    case 4:
    case "CYCLE":
      return Analysis_Code.CYCLE;
    case 5:
    case "PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID":
      return Analysis_Code.PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID;
    case 6:
    case "ASPECT_LABEL_SYNTAX_ERROR":
      return Analysis_Code.ASPECT_LABEL_SYNTAX_ERROR;
    case 7:
    case "ASPECT_PREREQ_UNMET":
      return Analysis_Code.ASPECT_PREREQ_UNMET;
    case 8:
    case "ASPECT_NOT_FOUND":
      return Analysis_Code.ASPECT_NOT_FOUND;
    case 9:
    case "ACTION_CONFLICT":
      return Analysis_Code.ACTION_CONFLICT;
    case 10:
    case "ARTIFACT_PREFIX_CONFLICT":
      return Analysis_Code.ARTIFACT_PREFIX_CONFLICT;
    case 11:
    case "UNEXPECTED_ANALYSIS_EXCEPTION":
      return Analysis_Code.UNEXPECTED_ANALYSIS_EXCEPTION;
    case 12:
    case "TARGETS_MISSING_ENVIRONMENTS":
      return Analysis_Code.TARGETS_MISSING_ENVIRONMENTS;
    case 13:
    case "INVALID_ENVIRONMENT":
      return Analysis_Code.INVALID_ENVIRONMENT;
    case 14:
    case "ENVIRONMENT_MISSING_FROM_GROUPS":
      return Analysis_Code.ENVIRONMENT_MISSING_FROM_GROUPS;
    case 15:
    case "EXEC_GROUP_MISSING":
      return Analysis_Code.EXEC_GROUP_MISSING;
    case 16:
    case "INVALID_EXECUTION_PLATFORM":
      return Analysis_Code.INVALID_EXECUTION_PLATFORM;
    case 17:
    case "ASPECT_CREATION_FAILED":
      return Analysis_Code.ASPECT_CREATION_FAILED;
    case 18:
    case "CONFIGURED_VALUE_CREATION_FAILED":
      return Analysis_Code.CONFIGURED_VALUE_CREATION_FAILED;
    case 19:
    case "INCOMPATIBLE_TARGET_REQUESTED":
      return Analysis_Code.INCOMPATIBLE_TARGET_REQUESTED;
    case 20:
    case "ANALYSIS_FAILURE_PROPAGATION_FAILED":
      return Analysis_Code.ANALYSIS_FAILURE_PROPAGATION_FAILED;
    case 21:
    case "ANALYSIS_CACHE_DISCARDED":
      return Analysis_Code.ANALYSIS_CACHE_DISCARDED;
    case 22:
    case "INVALID_RUNFILES_TREE":
      return Analysis_Code.INVALID_RUNFILES_TREE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Analysis_Code.UNRECOGNIZED;
  }
}

export function analysis_CodeToJSON(object: Analysis_Code): string {
  switch (object) {
    case Analysis_Code.ANALYSIS_UNKNOWN:
      return "ANALYSIS_UNKNOWN";
    case Analysis_Code.LOAD_FAILURE:
      return "LOAD_FAILURE";
    case Analysis_Code.GENERIC_LOADING_PHASE_FAILURE:
      return "GENERIC_LOADING_PHASE_FAILURE";
    case Analysis_Code.NOT_ALL_TARGETS_ANALYZED:
      return "NOT_ALL_TARGETS_ANALYZED";
    case Analysis_Code.CYCLE:
      return "CYCLE";
    case Analysis_Code.PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID:
      return "PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID";
    case Analysis_Code.ASPECT_LABEL_SYNTAX_ERROR:
      return "ASPECT_LABEL_SYNTAX_ERROR";
    case Analysis_Code.ASPECT_PREREQ_UNMET:
      return "ASPECT_PREREQ_UNMET";
    case Analysis_Code.ASPECT_NOT_FOUND:
      return "ASPECT_NOT_FOUND";
    case Analysis_Code.ACTION_CONFLICT:
      return "ACTION_CONFLICT";
    case Analysis_Code.ARTIFACT_PREFIX_CONFLICT:
      return "ARTIFACT_PREFIX_CONFLICT";
    case Analysis_Code.UNEXPECTED_ANALYSIS_EXCEPTION:
      return "UNEXPECTED_ANALYSIS_EXCEPTION";
    case Analysis_Code.TARGETS_MISSING_ENVIRONMENTS:
      return "TARGETS_MISSING_ENVIRONMENTS";
    case Analysis_Code.INVALID_ENVIRONMENT:
      return "INVALID_ENVIRONMENT";
    case Analysis_Code.ENVIRONMENT_MISSING_FROM_GROUPS:
      return "ENVIRONMENT_MISSING_FROM_GROUPS";
    case Analysis_Code.EXEC_GROUP_MISSING:
      return "EXEC_GROUP_MISSING";
    case Analysis_Code.INVALID_EXECUTION_PLATFORM:
      return "INVALID_EXECUTION_PLATFORM";
    case Analysis_Code.ASPECT_CREATION_FAILED:
      return "ASPECT_CREATION_FAILED";
    case Analysis_Code.CONFIGURED_VALUE_CREATION_FAILED:
      return "CONFIGURED_VALUE_CREATION_FAILED";
    case Analysis_Code.INCOMPATIBLE_TARGET_REQUESTED:
      return "INCOMPATIBLE_TARGET_REQUESTED";
    case Analysis_Code.ANALYSIS_FAILURE_PROPAGATION_FAILED:
      return "ANALYSIS_FAILURE_PROPAGATION_FAILED";
    case Analysis_Code.ANALYSIS_CACHE_DISCARDED:
      return "ANALYSIS_CACHE_DISCARDED";
    case Analysis_Code.INVALID_RUNFILES_TREE:
      return "INVALID_RUNFILES_TREE";
    case Analysis_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PackageLoading {
  code: PackageLoading_Code;
}

export enum PackageLoading_Code {
  PACKAGE_LOADING_UNKNOWN = 0,
  WORKSPACE_FILE_ERROR = 1,
  MAX_COMPUTATION_STEPS_EXCEEDED = 2,
  BUILD_FILE_MISSING = 3,
  REPOSITORY_MISSING = 4,
  PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR = 5,
  TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR = 6,
  INVALID_NAME = 7,
  EVAL_GLOBS_SYMLINK_ERROR = 9,
  IMPORT_STARLARK_FILE_ERROR = 10,
  PACKAGE_MISSING = 11,
  TARGET_MISSING = 12,
  NO_SUCH_THING = 13,
  GLOB_IO_EXCEPTION = 14,
  DUPLICATE_LABEL = 15,
  INVALID_PACKAGE_SPECIFICATION = 16,
  SYNTAX_ERROR = 17,
  ENVIRONMENT_IN_DIFFERENT_PACKAGE = 18,
  DEFAULT_ENVIRONMENT_UNDECLARED = 19,
  ENVIRONMENT_IN_MULTIPLE_GROUPS = 20,
  ENVIRONMENT_DOES_NOT_EXIST = 21,
  ENVIRONMENT_INVALID = 22,
  ENVIRONMENT_NOT_IN_GROUP = 23,
  PACKAGE_NAME_INVALID = 24,
  STARLARK_EVAL_ERROR = 25,
  LICENSE_PARSE_FAILURE = 26,
  DISTRIBUTIONS_PARSE_FAILURE = 27,
  LABEL_CROSSES_PACKAGE_BOUNDARY = 28,
  /**
   * BUILTINS_INJECTION_FAILURE - Failure while evaluating or applying @_builtins injection. Since the
   * builtins .bzl files are always packaged with Blaze in production, a
   * failure here generally indicates a bug in Blaze.
   */
  BUILTINS_INJECTION_FAILURE = 29,
  SYMLINK_CYCLE_OR_INFINITE_EXPANSION = 30,
  OTHER_IO_EXCEPTION = 31,
  BAD_REPO_FILE = 32,
  BAD_IGNORED_DIRECTORIES = 33,
  UNRECOGNIZED = -1,
}

export function packageLoading_CodeFromJSON(object: any): PackageLoading_Code {
  switch (object) {
    case 0:
    case "PACKAGE_LOADING_UNKNOWN":
      return PackageLoading_Code.PACKAGE_LOADING_UNKNOWN;
    case 1:
    case "WORKSPACE_FILE_ERROR":
      return PackageLoading_Code.WORKSPACE_FILE_ERROR;
    case 2:
    case "MAX_COMPUTATION_STEPS_EXCEEDED":
      return PackageLoading_Code.MAX_COMPUTATION_STEPS_EXCEEDED;
    case 3:
    case "BUILD_FILE_MISSING":
      return PackageLoading_Code.BUILD_FILE_MISSING;
    case 4:
    case "REPOSITORY_MISSING":
      return PackageLoading_Code.REPOSITORY_MISSING;
    case 5:
    case "PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR":
      return PackageLoading_Code.PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR;
    case 6:
    case "TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR":
      return PackageLoading_Code.TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR;
    case 7:
    case "INVALID_NAME":
      return PackageLoading_Code.INVALID_NAME;
    case 9:
    case "EVAL_GLOBS_SYMLINK_ERROR":
      return PackageLoading_Code.EVAL_GLOBS_SYMLINK_ERROR;
    case 10:
    case "IMPORT_STARLARK_FILE_ERROR":
      return PackageLoading_Code.IMPORT_STARLARK_FILE_ERROR;
    case 11:
    case "PACKAGE_MISSING":
      return PackageLoading_Code.PACKAGE_MISSING;
    case 12:
    case "TARGET_MISSING":
      return PackageLoading_Code.TARGET_MISSING;
    case 13:
    case "NO_SUCH_THING":
      return PackageLoading_Code.NO_SUCH_THING;
    case 14:
    case "GLOB_IO_EXCEPTION":
      return PackageLoading_Code.GLOB_IO_EXCEPTION;
    case 15:
    case "DUPLICATE_LABEL":
      return PackageLoading_Code.DUPLICATE_LABEL;
    case 16:
    case "INVALID_PACKAGE_SPECIFICATION":
      return PackageLoading_Code.INVALID_PACKAGE_SPECIFICATION;
    case 17:
    case "SYNTAX_ERROR":
      return PackageLoading_Code.SYNTAX_ERROR;
    case 18:
    case "ENVIRONMENT_IN_DIFFERENT_PACKAGE":
      return PackageLoading_Code.ENVIRONMENT_IN_DIFFERENT_PACKAGE;
    case 19:
    case "DEFAULT_ENVIRONMENT_UNDECLARED":
      return PackageLoading_Code.DEFAULT_ENVIRONMENT_UNDECLARED;
    case 20:
    case "ENVIRONMENT_IN_MULTIPLE_GROUPS":
      return PackageLoading_Code.ENVIRONMENT_IN_MULTIPLE_GROUPS;
    case 21:
    case "ENVIRONMENT_DOES_NOT_EXIST":
      return PackageLoading_Code.ENVIRONMENT_DOES_NOT_EXIST;
    case 22:
    case "ENVIRONMENT_INVALID":
      return PackageLoading_Code.ENVIRONMENT_INVALID;
    case 23:
    case "ENVIRONMENT_NOT_IN_GROUP":
      return PackageLoading_Code.ENVIRONMENT_NOT_IN_GROUP;
    case 24:
    case "PACKAGE_NAME_INVALID":
      return PackageLoading_Code.PACKAGE_NAME_INVALID;
    case 25:
    case "STARLARK_EVAL_ERROR":
      return PackageLoading_Code.STARLARK_EVAL_ERROR;
    case 26:
    case "LICENSE_PARSE_FAILURE":
      return PackageLoading_Code.LICENSE_PARSE_FAILURE;
    case 27:
    case "DISTRIBUTIONS_PARSE_FAILURE":
      return PackageLoading_Code.DISTRIBUTIONS_PARSE_FAILURE;
    case 28:
    case "LABEL_CROSSES_PACKAGE_BOUNDARY":
      return PackageLoading_Code.LABEL_CROSSES_PACKAGE_BOUNDARY;
    case 29:
    case "BUILTINS_INJECTION_FAILURE":
      return PackageLoading_Code.BUILTINS_INJECTION_FAILURE;
    case 30:
    case "SYMLINK_CYCLE_OR_INFINITE_EXPANSION":
      return PackageLoading_Code.SYMLINK_CYCLE_OR_INFINITE_EXPANSION;
    case 31:
    case "OTHER_IO_EXCEPTION":
      return PackageLoading_Code.OTHER_IO_EXCEPTION;
    case 32:
    case "BAD_REPO_FILE":
      return PackageLoading_Code.BAD_REPO_FILE;
    case 33:
    case "BAD_IGNORED_DIRECTORIES":
      return PackageLoading_Code.BAD_IGNORED_DIRECTORIES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PackageLoading_Code.UNRECOGNIZED;
  }
}

export function packageLoading_CodeToJSON(object: PackageLoading_Code): string {
  switch (object) {
    case PackageLoading_Code.PACKAGE_LOADING_UNKNOWN:
      return "PACKAGE_LOADING_UNKNOWN";
    case PackageLoading_Code.WORKSPACE_FILE_ERROR:
      return "WORKSPACE_FILE_ERROR";
    case PackageLoading_Code.MAX_COMPUTATION_STEPS_EXCEEDED:
      return "MAX_COMPUTATION_STEPS_EXCEEDED";
    case PackageLoading_Code.BUILD_FILE_MISSING:
      return "BUILD_FILE_MISSING";
    case PackageLoading_Code.REPOSITORY_MISSING:
      return "REPOSITORY_MISSING";
    case PackageLoading_Code.PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR:
      return "PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR";
    case PackageLoading_Code.TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR:
      return "TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR";
    case PackageLoading_Code.INVALID_NAME:
      return "INVALID_NAME";
    case PackageLoading_Code.EVAL_GLOBS_SYMLINK_ERROR:
      return "EVAL_GLOBS_SYMLINK_ERROR";
    case PackageLoading_Code.IMPORT_STARLARK_FILE_ERROR:
      return "IMPORT_STARLARK_FILE_ERROR";
    case PackageLoading_Code.PACKAGE_MISSING:
      return "PACKAGE_MISSING";
    case PackageLoading_Code.TARGET_MISSING:
      return "TARGET_MISSING";
    case PackageLoading_Code.NO_SUCH_THING:
      return "NO_SUCH_THING";
    case PackageLoading_Code.GLOB_IO_EXCEPTION:
      return "GLOB_IO_EXCEPTION";
    case PackageLoading_Code.DUPLICATE_LABEL:
      return "DUPLICATE_LABEL";
    case PackageLoading_Code.INVALID_PACKAGE_SPECIFICATION:
      return "INVALID_PACKAGE_SPECIFICATION";
    case PackageLoading_Code.SYNTAX_ERROR:
      return "SYNTAX_ERROR";
    case PackageLoading_Code.ENVIRONMENT_IN_DIFFERENT_PACKAGE:
      return "ENVIRONMENT_IN_DIFFERENT_PACKAGE";
    case PackageLoading_Code.DEFAULT_ENVIRONMENT_UNDECLARED:
      return "DEFAULT_ENVIRONMENT_UNDECLARED";
    case PackageLoading_Code.ENVIRONMENT_IN_MULTIPLE_GROUPS:
      return "ENVIRONMENT_IN_MULTIPLE_GROUPS";
    case PackageLoading_Code.ENVIRONMENT_DOES_NOT_EXIST:
      return "ENVIRONMENT_DOES_NOT_EXIST";
    case PackageLoading_Code.ENVIRONMENT_INVALID:
      return "ENVIRONMENT_INVALID";
    case PackageLoading_Code.ENVIRONMENT_NOT_IN_GROUP:
      return "ENVIRONMENT_NOT_IN_GROUP";
    case PackageLoading_Code.PACKAGE_NAME_INVALID:
      return "PACKAGE_NAME_INVALID";
    case PackageLoading_Code.STARLARK_EVAL_ERROR:
      return "STARLARK_EVAL_ERROR";
    case PackageLoading_Code.LICENSE_PARSE_FAILURE:
      return "LICENSE_PARSE_FAILURE";
    case PackageLoading_Code.DISTRIBUTIONS_PARSE_FAILURE:
      return "DISTRIBUTIONS_PARSE_FAILURE";
    case PackageLoading_Code.LABEL_CROSSES_PACKAGE_BOUNDARY:
      return "LABEL_CROSSES_PACKAGE_BOUNDARY";
    case PackageLoading_Code.BUILTINS_INJECTION_FAILURE:
      return "BUILTINS_INJECTION_FAILURE";
    case PackageLoading_Code.SYMLINK_CYCLE_OR_INFINITE_EXPANSION:
      return "SYMLINK_CYCLE_OR_INFINITE_EXPANSION";
    case PackageLoading_Code.OTHER_IO_EXCEPTION:
      return "OTHER_IO_EXCEPTION";
    case PackageLoading_Code.BAD_REPO_FILE:
      return "BAD_REPO_FILE";
    case PackageLoading_Code.BAD_IGNORED_DIRECTORIES:
      return "BAD_IGNORED_DIRECTORIES";
    case PackageLoading_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Toolchain {
  code: Toolchain_Code;
}

export enum Toolchain_Code {
  TOOLCHAIN_UNKNOWN = 0,
  MISSING_PROVIDER = 1,
  INVALID_CONSTRAINT_VALUE = 2,
  INVALID_PLATFORM_VALUE = 3,
  INVALID_TOOLCHAIN = 4,
  NO_MATCHING_EXECUTION_PLATFORM = 5,
  NO_MATCHING_TOOLCHAIN = 6,
  INVALID_TOOLCHAIN_TYPE = 7,
  UNRECOGNIZED = -1,
}

export function toolchain_CodeFromJSON(object: any): Toolchain_Code {
  switch (object) {
    case 0:
    case "TOOLCHAIN_UNKNOWN":
      return Toolchain_Code.TOOLCHAIN_UNKNOWN;
    case 1:
    case "MISSING_PROVIDER":
      return Toolchain_Code.MISSING_PROVIDER;
    case 2:
    case "INVALID_CONSTRAINT_VALUE":
      return Toolchain_Code.INVALID_CONSTRAINT_VALUE;
    case 3:
    case "INVALID_PLATFORM_VALUE":
      return Toolchain_Code.INVALID_PLATFORM_VALUE;
    case 4:
    case "INVALID_TOOLCHAIN":
      return Toolchain_Code.INVALID_TOOLCHAIN;
    case 5:
    case "NO_MATCHING_EXECUTION_PLATFORM":
      return Toolchain_Code.NO_MATCHING_EXECUTION_PLATFORM;
    case 6:
    case "NO_MATCHING_TOOLCHAIN":
      return Toolchain_Code.NO_MATCHING_TOOLCHAIN;
    case 7:
    case "INVALID_TOOLCHAIN_TYPE":
      return Toolchain_Code.INVALID_TOOLCHAIN_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Toolchain_Code.UNRECOGNIZED;
  }
}

export function toolchain_CodeToJSON(object: Toolchain_Code): string {
  switch (object) {
    case Toolchain_Code.TOOLCHAIN_UNKNOWN:
      return "TOOLCHAIN_UNKNOWN";
    case Toolchain_Code.MISSING_PROVIDER:
      return "MISSING_PROVIDER";
    case Toolchain_Code.INVALID_CONSTRAINT_VALUE:
      return "INVALID_CONSTRAINT_VALUE";
    case Toolchain_Code.INVALID_PLATFORM_VALUE:
      return "INVALID_PLATFORM_VALUE";
    case Toolchain_Code.INVALID_TOOLCHAIN:
      return "INVALID_TOOLCHAIN";
    case Toolchain_Code.NO_MATCHING_EXECUTION_PLATFORM:
      return "NO_MATCHING_EXECUTION_PLATFORM";
    case Toolchain_Code.NO_MATCHING_TOOLCHAIN:
      return "NO_MATCHING_TOOLCHAIN";
    case Toolchain_Code.INVALID_TOOLCHAIN_TYPE:
      return "INVALID_TOOLCHAIN_TYPE";
    case Toolchain_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface StarlarkLoading {
  code: StarlarkLoading_Code;
}

export enum StarlarkLoading_Code {
  STARLARK_LOADING_UNKNOWN = 0,
  CYCLE = 1,
  COMPILE_ERROR = 2,
  PARSE_ERROR = 3,
  EVAL_ERROR = 4,
  CONTAINING_PACKAGE_NOT_FOUND = 5,
  PACKAGE_NOT_FOUND = 6,
  IO_ERROR = 7,
  LABEL_CROSSES_PACKAGE_BOUNDARY = 8,
  BUILTINS_ERROR = 9,
  VISIBILITY_ERROR = 10,
  UNRECOGNIZED = -1,
}

export function starlarkLoading_CodeFromJSON(object: any): StarlarkLoading_Code {
  switch (object) {
    case 0:
    case "STARLARK_LOADING_UNKNOWN":
      return StarlarkLoading_Code.STARLARK_LOADING_UNKNOWN;
    case 1:
    case "CYCLE":
      return StarlarkLoading_Code.CYCLE;
    case 2:
    case "COMPILE_ERROR":
      return StarlarkLoading_Code.COMPILE_ERROR;
    case 3:
    case "PARSE_ERROR":
      return StarlarkLoading_Code.PARSE_ERROR;
    case 4:
    case "EVAL_ERROR":
      return StarlarkLoading_Code.EVAL_ERROR;
    case 5:
    case "CONTAINING_PACKAGE_NOT_FOUND":
      return StarlarkLoading_Code.CONTAINING_PACKAGE_NOT_FOUND;
    case 6:
    case "PACKAGE_NOT_FOUND":
      return StarlarkLoading_Code.PACKAGE_NOT_FOUND;
    case 7:
    case "IO_ERROR":
      return StarlarkLoading_Code.IO_ERROR;
    case 8:
    case "LABEL_CROSSES_PACKAGE_BOUNDARY":
      return StarlarkLoading_Code.LABEL_CROSSES_PACKAGE_BOUNDARY;
    case 9:
    case "BUILTINS_ERROR":
      return StarlarkLoading_Code.BUILTINS_ERROR;
    case 10:
    case "VISIBILITY_ERROR":
      return StarlarkLoading_Code.VISIBILITY_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StarlarkLoading_Code.UNRECOGNIZED;
  }
}

export function starlarkLoading_CodeToJSON(object: StarlarkLoading_Code): string {
  switch (object) {
    case StarlarkLoading_Code.STARLARK_LOADING_UNKNOWN:
      return "STARLARK_LOADING_UNKNOWN";
    case StarlarkLoading_Code.CYCLE:
      return "CYCLE";
    case StarlarkLoading_Code.COMPILE_ERROR:
      return "COMPILE_ERROR";
    case StarlarkLoading_Code.PARSE_ERROR:
      return "PARSE_ERROR";
    case StarlarkLoading_Code.EVAL_ERROR:
      return "EVAL_ERROR";
    case StarlarkLoading_Code.CONTAINING_PACKAGE_NOT_FOUND:
      return "CONTAINING_PACKAGE_NOT_FOUND";
    case StarlarkLoading_Code.PACKAGE_NOT_FOUND:
      return "PACKAGE_NOT_FOUND";
    case StarlarkLoading_Code.IO_ERROR:
      return "IO_ERROR";
    case StarlarkLoading_Code.LABEL_CROSSES_PACKAGE_BOUNDARY:
      return "LABEL_CROSSES_PACKAGE_BOUNDARY";
    case StarlarkLoading_Code.BUILTINS_ERROR:
      return "BUILTINS_ERROR";
    case StarlarkLoading_Code.VISIBILITY_ERROR:
      return "VISIBILITY_ERROR";
    case StarlarkLoading_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ExternalDeps {
  code: ExternalDeps_Code;
}

export enum ExternalDeps_Code {
  EXTERNAL_DEPS_UNKNOWN = 0,
  MODULE_NOT_FOUND = 1,
  BAD_MODULE = 2,
  VERSION_RESOLUTION_ERROR = 3,
  INVALID_REGISTRY_URL = 4,
  ERROR_ACCESSING_REGISTRY = 5,
  INVALID_EXTENSION_IMPORT = 6,
  BAD_LOCKFILE = 7,
  UNRECOGNIZED = -1,
}

export function externalDeps_CodeFromJSON(object: any): ExternalDeps_Code {
  switch (object) {
    case 0:
    case "EXTERNAL_DEPS_UNKNOWN":
      return ExternalDeps_Code.EXTERNAL_DEPS_UNKNOWN;
    case 1:
    case "MODULE_NOT_FOUND":
      return ExternalDeps_Code.MODULE_NOT_FOUND;
    case 2:
    case "BAD_MODULE":
      return ExternalDeps_Code.BAD_MODULE;
    case 3:
    case "VERSION_RESOLUTION_ERROR":
      return ExternalDeps_Code.VERSION_RESOLUTION_ERROR;
    case 4:
    case "INVALID_REGISTRY_URL":
      return ExternalDeps_Code.INVALID_REGISTRY_URL;
    case 5:
    case "ERROR_ACCESSING_REGISTRY":
      return ExternalDeps_Code.ERROR_ACCESSING_REGISTRY;
    case 6:
    case "INVALID_EXTENSION_IMPORT":
      return ExternalDeps_Code.INVALID_EXTENSION_IMPORT;
    case 7:
    case "BAD_LOCKFILE":
      return ExternalDeps_Code.BAD_LOCKFILE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExternalDeps_Code.UNRECOGNIZED;
  }
}

export function externalDeps_CodeToJSON(object: ExternalDeps_Code): string {
  switch (object) {
    case ExternalDeps_Code.EXTERNAL_DEPS_UNKNOWN:
      return "EXTERNAL_DEPS_UNKNOWN";
    case ExternalDeps_Code.MODULE_NOT_FOUND:
      return "MODULE_NOT_FOUND";
    case ExternalDeps_Code.BAD_MODULE:
      return "BAD_MODULE";
    case ExternalDeps_Code.VERSION_RESOLUTION_ERROR:
      return "VERSION_RESOLUTION_ERROR";
    case ExternalDeps_Code.INVALID_REGISTRY_URL:
      return "INVALID_REGISTRY_URL";
    case ExternalDeps_Code.ERROR_ACCESSING_REGISTRY:
      return "ERROR_ACCESSING_REGISTRY";
    case ExternalDeps_Code.INVALID_EXTENSION_IMPORT:
      return "INVALID_EXTENSION_IMPORT";
    case ExternalDeps_Code.BAD_LOCKFILE:
      return "BAD_LOCKFILE";
    case ExternalDeps_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DiffAwareness {
  code: DiffAwareness_Code;
}

export enum DiffAwareness_Code {
  DIFF_AWARENESS_UNKNOWN = 0,
  DIFF_STAT_FAILED = 1,
  UNRECOGNIZED = -1,
}

export function diffAwareness_CodeFromJSON(object: any): DiffAwareness_Code {
  switch (object) {
    case 0:
    case "DIFF_AWARENESS_UNKNOWN":
      return DiffAwareness_Code.DIFF_AWARENESS_UNKNOWN;
    case 1:
    case "DIFF_STAT_FAILED":
      return DiffAwareness_Code.DIFF_STAT_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiffAwareness_Code.UNRECOGNIZED;
  }
}

export function diffAwareness_CodeToJSON(object: DiffAwareness_Code): string {
  switch (object) {
    case DiffAwareness_Code.DIFF_AWARENESS_UNKNOWN:
      return "DIFF_AWARENESS_UNKNOWN";
    case DiffAwareness_Code.DIFF_STAT_FAILED:
      return "DIFF_STAT_FAILED";
    case DiffAwareness_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ModCommand {
  code: ModCommand_Code;
}

export enum ModCommand_Code {
  MOD_COMMAND_UNKNOWN = 0,
  MISSING_ARGUMENTS = 1,
  TOO_MANY_ARGUMENTS = 2,
  INVALID_ARGUMENTS = 3,
  BUILDOZER_FAILED = 4,
  ERROR_DURING_GRAPH_INSPECTION = 5,
  UNRECOGNIZED = -1,
}

export function modCommand_CodeFromJSON(object: any): ModCommand_Code {
  switch (object) {
    case 0:
    case "MOD_COMMAND_UNKNOWN":
      return ModCommand_Code.MOD_COMMAND_UNKNOWN;
    case 1:
    case "MISSING_ARGUMENTS":
      return ModCommand_Code.MISSING_ARGUMENTS;
    case 2:
    case "TOO_MANY_ARGUMENTS":
      return ModCommand_Code.TOO_MANY_ARGUMENTS;
    case 3:
    case "INVALID_ARGUMENTS":
      return ModCommand_Code.INVALID_ARGUMENTS;
    case 4:
    case "BUILDOZER_FAILED":
      return ModCommand_Code.BUILDOZER_FAILED;
    case 5:
    case "ERROR_DURING_GRAPH_INSPECTION":
      return ModCommand_Code.ERROR_DURING_GRAPH_INSPECTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ModCommand_Code.UNRECOGNIZED;
  }
}

export function modCommand_CodeToJSON(object: ModCommand_Code): string {
  switch (object) {
    case ModCommand_Code.MOD_COMMAND_UNKNOWN:
      return "MOD_COMMAND_UNKNOWN";
    case ModCommand_Code.MISSING_ARGUMENTS:
      return "MISSING_ARGUMENTS";
    case ModCommand_Code.TOO_MANY_ARGUMENTS:
      return "TOO_MANY_ARGUMENTS";
    case ModCommand_Code.INVALID_ARGUMENTS:
      return "INVALID_ARGUMENTS";
    case ModCommand_Code.BUILDOZER_FAILED:
      return "BUILDOZER_FAILED";
    case ModCommand_Code.ERROR_DURING_GRAPH_INSPECTION:
      return "ERROR_DURING_GRAPH_INSPECTION";
    case ModCommand_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFailureDetailMetadata(): FailureDetailMetadata {
  return { exitCode: 0 };
}

export const FailureDetailMetadata: MessageFns<FailureDetailMetadata> = {
  encode(message: FailureDetailMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exitCode !== 0) {
      writer.uint32(8).uint32(message.exitCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FailureDetailMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFailureDetailMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exitCode = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FailureDetailMetadata {
    return { exitCode: isSet(object.exitCode) ? globalThis.Number(object.exitCode) : 0 };
  },

  toJSON(message: FailureDetailMetadata): unknown {
    const obj: any = {};
    if (message.exitCode !== 0) {
      obj.exitCode = Math.round(message.exitCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FailureDetailMetadata>, I>>(base?: I): FailureDetailMetadata {
    return FailureDetailMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FailureDetailMetadata>, I>>(object: I): FailureDetailMetadata {
    const message = createBaseFailureDetailMetadata();
    message.exitCode = object.exitCode ?? 0;
    return message;
  },
};

function createBaseFailureDetail(): FailureDetail {
  return {
    message: "",
    interrupted: undefined,
    externalRepository: undefined,
    buildProgress: undefined,
    remoteOptions: undefined,
    clientEnvironment: undefined,
    crash: undefined,
    symlinkForest: undefined,
    packageOptions: undefined,
    remoteExecution: undefined,
    execution: undefined,
    workspaces: undefined,
    crashOptions: undefined,
    filesystem: undefined,
    executionOptions: undefined,
    command: undefined,
    spawn: undefined,
    grpcServer: undefined,
    canonicalizeFlags: undefined,
    buildConfiguration: undefined,
    infoCommand: undefined,
    memoryOptions: undefined,
    query: undefined,
    localExecution: undefined,
    actionCache: undefined,
    fetchCommand: undefined,
    syncCommand: undefined,
    sandbox: undefined,
    includeScanning: undefined,
    testCommand: undefined,
    actionQuery: undefined,
    targetPatterns: undefined,
    cleanCommand: undefined,
    configCommand: undefined,
    configurableQuery: undefined,
    dumpCommand: undefined,
    helpCommand: undefined,
    mobileInstall: undefined,
    profileCommand: undefined,
    runCommand: undefined,
    versionCommand: undefined,
    printActionCommand: undefined,
    workspaceStatus: undefined,
    javaCompile: undefined,
    actionRewinding: undefined,
    cppCompile: undefined,
    starlarkAction: undefined,
    ninjaAction: undefined,
    dynamicExecution: undefined,
    failAction: undefined,
    symlinkAction: undefined,
    cppLink: undefined,
    ltoAction: undefined,
    testAction: undefined,
    worker: undefined,
    analysis: undefined,
    packageLoading: undefined,
    toolchain: undefined,
    starlarkLoading: undefined,
    externalDeps: undefined,
    diffAwareness: undefined,
    modCommand: undefined,
    buildReport: undefined,
    skyfocus: undefined,
    remoteAnalysisCaching: undefined,
  };
}

export const FailureDetail: MessageFns<FailureDetail> = {
  encode(message: FailureDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.interrupted !== undefined) {
      Interrupted.encode(message.interrupted, writer.uint32(810).fork()).join();
    }
    if (message.externalRepository !== undefined) {
      ExternalRepository.encode(message.externalRepository, writer.uint32(826).fork()).join();
    }
    if (message.buildProgress !== undefined) {
      BuildProgress.encode(message.buildProgress, writer.uint32(834).fork()).join();
    }
    if (message.remoteOptions !== undefined) {
      RemoteOptions.encode(message.remoteOptions, writer.uint32(850).fork()).join();
    }
    if (message.clientEnvironment !== undefined) {
      ClientEnvironment.encode(message.clientEnvironment, writer.uint32(858).fork()).join();
    }
    if (message.crash !== undefined) {
      Crash.encode(message.crash, writer.uint32(866).fork()).join();
    }
    if (message.symlinkForest !== undefined) {
      SymlinkForest.encode(message.symlinkForest, writer.uint32(882).fork()).join();
    }
    if (message.packageOptions !== undefined) {
      PackageOptions.encode(message.packageOptions, writer.uint32(914).fork()).join();
    }
    if (message.remoteExecution !== undefined) {
      RemoteExecution.encode(message.remoteExecution, writer.uint32(922).fork()).join();
    }
    if (message.execution !== undefined) {
      Execution.encode(message.execution, writer.uint32(930).fork()).join();
    }
    if (message.workspaces !== undefined) {
      Workspaces.encode(message.workspaces, writer.uint32(938).fork()).join();
    }
    if (message.crashOptions !== undefined) {
      CrashOptions.encode(message.crashOptions, writer.uint32(946).fork()).join();
    }
    if (message.filesystem !== undefined) {
      Filesystem.encode(message.filesystem, writer.uint32(954).fork()).join();
    }
    if (message.executionOptions !== undefined) {
      ExecutionOptions.encode(message.executionOptions, writer.uint32(970).fork()).join();
    }
    if (message.command !== undefined) {
      Command.encode(message.command, writer.uint32(978).fork()).join();
    }
    if (message.spawn !== undefined) {
      Spawn.encode(message.spawn, writer.uint32(986).fork()).join();
    }
    if (message.grpcServer !== undefined) {
      GrpcServer.encode(message.grpcServer, writer.uint32(994).fork()).join();
    }
    if (message.canonicalizeFlags !== undefined) {
      CanonicalizeFlags.encode(message.canonicalizeFlags, writer.uint32(1002).fork()).join();
    }
    if (message.buildConfiguration !== undefined) {
      BuildConfiguration.encode(message.buildConfiguration, writer.uint32(1010).fork()).join();
    }
    if (message.infoCommand !== undefined) {
      InfoCommand.encode(message.infoCommand, writer.uint32(1018).fork()).join();
    }
    if (message.memoryOptions !== undefined) {
      MemoryOptions.encode(message.memoryOptions, writer.uint32(1034).fork()).join();
    }
    if (message.query !== undefined) {
      Query.encode(message.query, writer.uint32(1042).fork()).join();
    }
    if (message.localExecution !== undefined) {
      LocalExecution.encode(message.localExecution, writer.uint32(1058).fork()).join();
    }
    if (message.actionCache !== undefined) {
      ActionCache.encode(message.actionCache, writer.uint32(1074).fork()).join();
    }
    if (message.fetchCommand !== undefined) {
      FetchCommand.encode(message.fetchCommand, writer.uint32(1082).fork()).join();
    }
    if (message.syncCommand !== undefined) {
      SyncCommand.encode(message.syncCommand, writer.uint32(1090).fork()).join();
    }
    if (message.sandbox !== undefined) {
      Sandbox.encode(message.sandbox, writer.uint32(1098).fork()).join();
    }
    if (message.includeScanning !== undefined) {
      IncludeScanning.encode(message.includeScanning, writer.uint32(1114).fork()).join();
    }
    if (message.testCommand !== undefined) {
      TestCommand.encode(message.testCommand, writer.uint32(1122).fork()).join();
    }
    if (message.actionQuery !== undefined) {
      ActionQuery.encode(message.actionQuery, writer.uint32(1130).fork()).join();
    }
    if (message.targetPatterns !== undefined) {
      TargetPatterns.encode(message.targetPatterns, writer.uint32(1138).fork()).join();
    }
    if (message.cleanCommand !== undefined) {
      CleanCommand.encode(message.cleanCommand, writer.uint32(1154).fork()).join();
    }
    if (message.configCommand !== undefined) {
      ConfigCommand.encode(message.configCommand, writer.uint32(1162).fork()).join();
    }
    if (message.configurableQuery !== undefined) {
      ConfigurableQuery.encode(message.configurableQuery, writer.uint32(1170).fork()).join();
    }
    if (message.dumpCommand !== undefined) {
      DumpCommand.encode(message.dumpCommand, writer.uint32(1178).fork()).join();
    }
    if (message.helpCommand !== undefined) {
      HelpCommand.encode(message.helpCommand, writer.uint32(1186).fork()).join();
    }
    if (message.mobileInstall !== undefined) {
      MobileInstall.encode(message.mobileInstall, writer.uint32(1202).fork()).join();
    }
    if (message.profileCommand !== undefined) {
      ProfileCommand.encode(message.profileCommand, writer.uint32(1210).fork()).join();
    }
    if (message.runCommand !== undefined) {
      RunCommand.encode(message.runCommand, writer.uint32(1218).fork()).join();
    }
    if (message.versionCommand !== undefined) {
      VersionCommand.encode(message.versionCommand, writer.uint32(1226).fork()).join();
    }
    if (message.printActionCommand !== undefined) {
      PrintActionCommand.encode(message.printActionCommand, writer.uint32(1234).fork()).join();
    }
    if (message.workspaceStatus !== undefined) {
      WorkspaceStatus.encode(message.workspaceStatus, writer.uint32(1266).fork()).join();
    }
    if (message.javaCompile !== undefined) {
      JavaCompile.encode(message.javaCompile, writer.uint32(1274).fork()).join();
    }
    if (message.actionRewinding !== undefined) {
      ActionRewinding.encode(message.actionRewinding, writer.uint32(1282).fork()).join();
    }
    if (message.cppCompile !== undefined) {
      CppCompile.encode(message.cppCompile, writer.uint32(1290).fork()).join();
    }
    if (message.starlarkAction !== undefined) {
      StarlarkAction.encode(message.starlarkAction, writer.uint32(1298).fork()).join();
    }
    if (message.ninjaAction !== undefined) {
      NinjaAction.encode(message.ninjaAction, writer.uint32(1306).fork()).join();
    }
    if (message.dynamicExecution !== undefined) {
      DynamicExecution.encode(message.dynamicExecution, writer.uint32(1314).fork()).join();
    }
    if (message.failAction !== undefined) {
      FailAction.encode(message.failAction, writer.uint32(1330).fork()).join();
    }
    if (message.symlinkAction !== undefined) {
      SymlinkAction.encode(message.symlinkAction, writer.uint32(1338).fork()).join();
    }
    if (message.cppLink !== undefined) {
      CppLink.encode(message.cppLink, writer.uint32(1346).fork()).join();
    }
    if (message.ltoAction !== undefined) {
      LtoAction.encode(message.ltoAction, writer.uint32(1354).fork()).join();
    }
    if (message.testAction !== undefined) {
      TestAction.encode(message.testAction, writer.uint32(1378).fork()).join();
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(1386).fork()).join();
    }
    if (message.analysis !== undefined) {
      Analysis.encode(message.analysis, writer.uint32(1394).fork()).join();
    }
    if (message.packageLoading !== undefined) {
      PackageLoading.encode(message.packageLoading, writer.uint32(1402).fork()).join();
    }
    if (message.toolchain !== undefined) {
      Toolchain.encode(message.toolchain, writer.uint32(1418).fork()).join();
    }
    if (message.starlarkLoading !== undefined) {
      StarlarkLoading.encode(message.starlarkLoading, writer.uint32(1434).fork()).join();
    }
    if (message.externalDeps !== undefined) {
      ExternalDeps.encode(message.externalDeps, writer.uint32(1450).fork()).join();
    }
    if (message.diffAwareness !== undefined) {
      DiffAwareness.encode(message.diffAwareness, writer.uint32(1458).fork()).join();
    }
    if (message.modCommand !== undefined) {
      ModCommand.encode(message.modCommand, writer.uint32(1466).fork()).join();
    }
    if (message.buildReport !== undefined) {
      BuildReport.encode(message.buildReport, writer.uint32(1474).fork()).join();
    }
    if (message.skyfocus !== undefined) {
      Skyfocus.encode(message.skyfocus, writer.uint32(1482).fork()).join();
    }
    if (message.remoteAnalysisCaching !== undefined) {
      RemoteAnalysisCaching.encode(message.remoteAnalysisCaching, writer.uint32(1490).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FailureDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFailureDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.interrupted = Interrupted.decode(reader, reader.uint32());
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.externalRepository = ExternalRepository.decode(reader, reader.uint32());
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.buildProgress = BuildProgress.decode(reader, reader.uint32());
          continue;
        }
        case 106: {
          if (tag !== 850) {
            break;
          }

          message.remoteOptions = RemoteOptions.decode(reader, reader.uint32());
          continue;
        }
        case 107: {
          if (tag !== 858) {
            break;
          }

          message.clientEnvironment = ClientEnvironment.decode(reader, reader.uint32());
          continue;
        }
        case 108: {
          if (tag !== 866) {
            break;
          }

          message.crash = Crash.decode(reader, reader.uint32());
          continue;
        }
        case 110: {
          if (tag !== 882) {
            break;
          }

          message.symlinkForest = SymlinkForest.decode(reader, reader.uint32());
          continue;
        }
        case 114: {
          if (tag !== 914) {
            break;
          }

          message.packageOptions = PackageOptions.decode(reader, reader.uint32());
          continue;
        }
        case 115: {
          if (tag !== 922) {
            break;
          }

          message.remoteExecution = RemoteExecution.decode(reader, reader.uint32());
          continue;
        }
        case 116: {
          if (tag !== 930) {
            break;
          }

          message.execution = Execution.decode(reader, reader.uint32());
          continue;
        }
        case 117: {
          if (tag !== 938) {
            break;
          }

          message.workspaces = Workspaces.decode(reader, reader.uint32());
          continue;
        }
        case 118: {
          if (tag !== 946) {
            break;
          }

          message.crashOptions = CrashOptions.decode(reader, reader.uint32());
          continue;
        }
        case 119: {
          if (tag !== 954) {
            break;
          }

          message.filesystem = Filesystem.decode(reader, reader.uint32());
          continue;
        }
        case 121: {
          if (tag !== 970) {
            break;
          }

          message.executionOptions = ExecutionOptions.decode(reader, reader.uint32());
          continue;
        }
        case 122: {
          if (tag !== 978) {
            break;
          }

          message.command = Command.decode(reader, reader.uint32());
          continue;
        }
        case 123: {
          if (tag !== 986) {
            break;
          }

          message.spawn = Spawn.decode(reader, reader.uint32());
          continue;
        }
        case 124: {
          if (tag !== 994) {
            break;
          }

          message.grpcServer = GrpcServer.decode(reader, reader.uint32());
          continue;
        }
        case 125: {
          if (tag !== 1002) {
            break;
          }

          message.canonicalizeFlags = CanonicalizeFlags.decode(reader, reader.uint32());
          continue;
        }
        case 126: {
          if (tag !== 1010) {
            break;
          }

          message.buildConfiguration = BuildConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 127: {
          if (tag !== 1018) {
            break;
          }

          message.infoCommand = InfoCommand.decode(reader, reader.uint32());
          continue;
        }
        case 129: {
          if (tag !== 1034) {
            break;
          }

          message.memoryOptions = MemoryOptions.decode(reader, reader.uint32());
          continue;
        }
        case 130: {
          if (tag !== 1042) {
            break;
          }

          message.query = Query.decode(reader, reader.uint32());
          continue;
        }
        case 132: {
          if (tag !== 1058) {
            break;
          }

          message.localExecution = LocalExecution.decode(reader, reader.uint32());
          continue;
        }
        case 134: {
          if (tag !== 1074) {
            break;
          }

          message.actionCache = ActionCache.decode(reader, reader.uint32());
          continue;
        }
        case 135: {
          if (tag !== 1082) {
            break;
          }

          message.fetchCommand = FetchCommand.decode(reader, reader.uint32());
          continue;
        }
        case 136: {
          if (tag !== 1090) {
            break;
          }

          message.syncCommand = SyncCommand.decode(reader, reader.uint32());
          continue;
        }
        case 137: {
          if (tag !== 1098) {
            break;
          }

          message.sandbox = Sandbox.decode(reader, reader.uint32());
          continue;
        }
        case 139: {
          if (tag !== 1114) {
            break;
          }

          message.includeScanning = IncludeScanning.decode(reader, reader.uint32());
          continue;
        }
        case 140: {
          if (tag !== 1122) {
            break;
          }

          message.testCommand = TestCommand.decode(reader, reader.uint32());
          continue;
        }
        case 141: {
          if (tag !== 1130) {
            break;
          }

          message.actionQuery = ActionQuery.decode(reader, reader.uint32());
          continue;
        }
        case 142: {
          if (tag !== 1138) {
            break;
          }

          message.targetPatterns = TargetPatterns.decode(reader, reader.uint32());
          continue;
        }
        case 144: {
          if (tag !== 1154) {
            break;
          }

          message.cleanCommand = CleanCommand.decode(reader, reader.uint32());
          continue;
        }
        case 145: {
          if (tag !== 1162) {
            break;
          }

          message.configCommand = ConfigCommand.decode(reader, reader.uint32());
          continue;
        }
        case 146: {
          if (tag !== 1170) {
            break;
          }

          message.configurableQuery = ConfigurableQuery.decode(reader, reader.uint32());
          continue;
        }
        case 147: {
          if (tag !== 1178) {
            break;
          }

          message.dumpCommand = DumpCommand.decode(reader, reader.uint32());
          continue;
        }
        case 148: {
          if (tag !== 1186) {
            break;
          }

          message.helpCommand = HelpCommand.decode(reader, reader.uint32());
          continue;
        }
        case 150: {
          if (tag !== 1202) {
            break;
          }

          message.mobileInstall = MobileInstall.decode(reader, reader.uint32());
          continue;
        }
        case 151: {
          if (tag !== 1210) {
            break;
          }

          message.profileCommand = ProfileCommand.decode(reader, reader.uint32());
          continue;
        }
        case 152: {
          if (tag !== 1218) {
            break;
          }

          message.runCommand = RunCommand.decode(reader, reader.uint32());
          continue;
        }
        case 153: {
          if (tag !== 1226) {
            break;
          }

          message.versionCommand = VersionCommand.decode(reader, reader.uint32());
          continue;
        }
        case 154: {
          if (tag !== 1234) {
            break;
          }

          message.printActionCommand = PrintActionCommand.decode(reader, reader.uint32());
          continue;
        }
        case 158: {
          if (tag !== 1266) {
            break;
          }

          message.workspaceStatus = WorkspaceStatus.decode(reader, reader.uint32());
          continue;
        }
        case 159: {
          if (tag !== 1274) {
            break;
          }

          message.javaCompile = JavaCompile.decode(reader, reader.uint32());
          continue;
        }
        case 160: {
          if (tag !== 1282) {
            break;
          }

          message.actionRewinding = ActionRewinding.decode(reader, reader.uint32());
          continue;
        }
        case 161: {
          if (tag !== 1290) {
            break;
          }

          message.cppCompile = CppCompile.decode(reader, reader.uint32());
          continue;
        }
        case 162: {
          if (tag !== 1298) {
            break;
          }

          message.starlarkAction = StarlarkAction.decode(reader, reader.uint32());
          continue;
        }
        case 163: {
          if (tag !== 1306) {
            break;
          }

          message.ninjaAction = NinjaAction.decode(reader, reader.uint32());
          continue;
        }
        case 164: {
          if (tag !== 1314) {
            break;
          }

          message.dynamicExecution = DynamicExecution.decode(reader, reader.uint32());
          continue;
        }
        case 166: {
          if (tag !== 1330) {
            break;
          }

          message.failAction = FailAction.decode(reader, reader.uint32());
          continue;
        }
        case 167: {
          if (tag !== 1338) {
            break;
          }

          message.symlinkAction = SymlinkAction.decode(reader, reader.uint32());
          continue;
        }
        case 168: {
          if (tag !== 1346) {
            break;
          }

          message.cppLink = CppLink.decode(reader, reader.uint32());
          continue;
        }
        case 169: {
          if (tag !== 1354) {
            break;
          }

          message.ltoAction = LtoAction.decode(reader, reader.uint32());
          continue;
        }
        case 172: {
          if (tag !== 1378) {
            break;
          }

          message.testAction = TestAction.decode(reader, reader.uint32());
          continue;
        }
        case 173: {
          if (tag !== 1386) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 174: {
          if (tag !== 1394) {
            break;
          }

          message.analysis = Analysis.decode(reader, reader.uint32());
          continue;
        }
        case 175: {
          if (tag !== 1402) {
            break;
          }

          message.packageLoading = PackageLoading.decode(reader, reader.uint32());
          continue;
        }
        case 177: {
          if (tag !== 1418) {
            break;
          }

          message.toolchain = Toolchain.decode(reader, reader.uint32());
          continue;
        }
        case 179: {
          if (tag !== 1434) {
            break;
          }

          message.starlarkLoading = StarlarkLoading.decode(reader, reader.uint32());
          continue;
        }
        case 181: {
          if (tag !== 1450) {
            break;
          }

          message.externalDeps = ExternalDeps.decode(reader, reader.uint32());
          continue;
        }
        case 182: {
          if (tag !== 1458) {
            break;
          }

          message.diffAwareness = DiffAwareness.decode(reader, reader.uint32());
          continue;
        }
        case 183: {
          if (tag !== 1466) {
            break;
          }

          message.modCommand = ModCommand.decode(reader, reader.uint32());
          continue;
        }
        case 184: {
          if (tag !== 1474) {
            break;
          }

          message.buildReport = BuildReport.decode(reader, reader.uint32());
          continue;
        }
        case 185: {
          if (tag !== 1482) {
            break;
          }

          message.skyfocus = Skyfocus.decode(reader, reader.uint32());
          continue;
        }
        case 186: {
          if (tag !== 1490) {
            break;
          }

          message.remoteAnalysisCaching = RemoteAnalysisCaching.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FailureDetail {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      interrupted: isSet(object.interrupted) ? Interrupted.fromJSON(object.interrupted) : undefined,
      externalRepository: isSet(object.externalRepository)
        ? ExternalRepository.fromJSON(object.externalRepository)
        : undefined,
      buildProgress: isSet(object.buildProgress) ? BuildProgress.fromJSON(object.buildProgress) : undefined,
      remoteOptions: isSet(object.remoteOptions) ? RemoteOptions.fromJSON(object.remoteOptions) : undefined,
      clientEnvironment: isSet(object.clientEnvironment)
        ? ClientEnvironment.fromJSON(object.clientEnvironment)
        : undefined,
      crash: isSet(object.crash) ? Crash.fromJSON(object.crash) : undefined,
      symlinkForest: isSet(object.symlinkForest) ? SymlinkForest.fromJSON(object.symlinkForest) : undefined,
      packageOptions: isSet(object.packageOptions) ? PackageOptions.fromJSON(object.packageOptions) : undefined,
      remoteExecution: isSet(object.remoteExecution) ? RemoteExecution.fromJSON(object.remoteExecution) : undefined,
      execution: isSet(object.execution) ? Execution.fromJSON(object.execution) : undefined,
      workspaces: isSet(object.workspaces) ? Workspaces.fromJSON(object.workspaces) : undefined,
      crashOptions: isSet(object.crashOptions) ? CrashOptions.fromJSON(object.crashOptions) : undefined,
      filesystem: isSet(object.filesystem) ? Filesystem.fromJSON(object.filesystem) : undefined,
      executionOptions: isSet(object.executionOptions) ? ExecutionOptions.fromJSON(object.executionOptions) : undefined,
      command: isSet(object.command) ? Command.fromJSON(object.command) : undefined,
      spawn: isSet(object.spawn) ? Spawn.fromJSON(object.spawn) : undefined,
      grpcServer: isSet(object.grpcServer) ? GrpcServer.fromJSON(object.grpcServer) : undefined,
      canonicalizeFlags: isSet(object.canonicalizeFlags)
        ? CanonicalizeFlags.fromJSON(object.canonicalizeFlags)
        : undefined,
      buildConfiguration: isSet(object.buildConfiguration)
        ? BuildConfiguration.fromJSON(object.buildConfiguration)
        : undefined,
      infoCommand: isSet(object.infoCommand) ? InfoCommand.fromJSON(object.infoCommand) : undefined,
      memoryOptions: isSet(object.memoryOptions) ? MemoryOptions.fromJSON(object.memoryOptions) : undefined,
      query: isSet(object.query) ? Query.fromJSON(object.query) : undefined,
      localExecution: isSet(object.localExecution) ? LocalExecution.fromJSON(object.localExecution) : undefined,
      actionCache: isSet(object.actionCache) ? ActionCache.fromJSON(object.actionCache) : undefined,
      fetchCommand: isSet(object.fetchCommand) ? FetchCommand.fromJSON(object.fetchCommand) : undefined,
      syncCommand: isSet(object.syncCommand) ? SyncCommand.fromJSON(object.syncCommand) : undefined,
      sandbox: isSet(object.sandbox) ? Sandbox.fromJSON(object.sandbox) : undefined,
      includeScanning: isSet(object.includeScanning) ? IncludeScanning.fromJSON(object.includeScanning) : undefined,
      testCommand: isSet(object.testCommand) ? TestCommand.fromJSON(object.testCommand) : undefined,
      actionQuery: isSet(object.actionQuery) ? ActionQuery.fromJSON(object.actionQuery) : undefined,
      targetPatterns: isSet(object.targetPatterns) ? TargetPatterns.fromJSON(object.targetPatterns) : undefined,
      cleanCommand: isSet(object.cleanCommand) ? CleanCommand.fromJSON(object.cleanCommand) : undefined,
      configCommand: isSet(object.configCommand) ? ConfigCommand.fromJSON(object.configCommand) : undefined,
      configurableQuery: isSet(object.configurableQuery)
        ? ConfigurableQuery.fromJSON(object.configurableQuery)
        : undefined,
      dumpCommand: isSet(object.dumpCommand) ? DumpCommand.fromJSON(object.dumpCommand) : undefined,
      helpCommand: isSet(object.helpCommand) ? HelpCommand.fromJSON(object.helpCommand) : undefined,
      mobileInstall: isSet(object.mobileInstall) ? MobileInstall.fromJSON(object.mobileInstall) : undefined,
      profileCommand: isSet(object.profileCommand) ? ProfileCommand.fromJSON(object.profileCommand) : undefined,
      runCommand: isSet(object.runCommand) ? RunCommand.fromJSON(object.runCommand) : undefined,
      versionCommand: isSet(object.versionCommand) ? VersionCommand.fromJSON(object.versionCommand) : undefined,
      printActionCommand: isSet(object.printActionCommand)
        ? PrintActionCommand.fromJSON(object.printActionCommand)
        : undefined,
      workspaceStatus: isSet(object.workspaceStatus) ? WorkspaceStatus.fromJSON(object.workspaceStatus) : undefined,
      javaCompile: isSet(object.javaCompile) ? JavaCompile.fromJSON(object.javaCompile) : undefined,
      actionRewinding: isSet(object.actionRewinding) ? ActionRewinding.fromJSON(object.actionRewinding) : undefined,
      cppCompile: isSet(object.cppCompile) ? CppCompile.fromJSON(object.cppCompile) : undefined,
      starlarkAction: isSet(object.starlarkAction) ? StarlarkAction.fromJSON(object.starlarkAction) : undefined,
      ninjaAction: isSet(object.ninjaAction) ? NinjaAction.fromJSON(object.ninjaAction) : undefined,
      dynamicExecution: isSet(object.dynamicExecution) ? DynamicExecution.fromJSON(object.dynamicExecution) : undefined,
      failAction: isSet(object.failAction) ? FailAction.fromJSON(object.failAction) : undefined,
      symlinkAction: isSet(object.symlinkAction) ? SymlinkAction.fromJSON(object.symlinkAction) : undefined,
      cppLink: isSet(object.cppLink) ? CppLink.fromJSON(object.cppLink) : undefined,
      ltoAction: isSet(object.ltoAction) ? LtoAction.fromJSON(object.ltoAction) : undefined,
      testAction: isSet(object.testAction) ? TestAction.fromJSON(object.testAction) : undefined,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      analysis: isSet(object.analysis) ? Analysis.fromJSON(object.analysis) : undefined,
      packageLoading: isSet(object.packageLoading) ? PackageLoading.fromJSON(object.packageLoading) : undefined,
      toolchain: isSet(object.toolchain) ? Toolchain.fromJSON(object.toolchain) : undefined,
      starlarkLoading: isSet(object.starlarkLoading) ? StarlarkLoading.fromJSON(object.starlarkLoading) : undefined,
      externalDeps: isSet(object.externalDeps) ? ExternalDeps.fromJSON(object.externalDeps) : undefined,
      diffAwareness: isSet(object.diffAwareness) ? DiffAwareness.fromJSON(object.diffAwareness) : undefined,
      modCommand: isSet(object.modCommand) ? ModCommand.fromJSON(object.modCommand) : undefined,
      buildReport: isSet(object.buildReport) ? BuildReport.fromJSON(object.buildReport) : undefined,
      skyfocus: isSet(object.skyfocus) ? Skyfocus.fromJSON(object.skyfocus) : undefined,
      remoteAnalysisCaching: isSet(object.remoteAnalysisCaching)
        ? RemoteAnalysisCaching.fromJSON(object.remoteAnalysisCaching)
        : undefined,
    };
  },

  toJSON(message: FailureDetail): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.interrupted !== undefined) {
      obj.interrupted = Interrupted.toJSON(message.interrupted);
    }
    if (message.externalRepository !== undefined) {
      obj.externalRepository = ExternalRepository.toJSON(message.externalRepository);
    }
    if (message.buildProgress !== undefined) {
      obj.buildProgress = BuildProgress.toJSON(message.buildProgress);
    }
    if (message.remoteOptions !== undefined) {
      obj.remoteOptions = RemoteOptions.toJSON(message.remoteOptions);
    }
    if (message.clientEnvironment !== undefined) {
      obj.clientEnvironment = ClientEnvironment.toJSON(message.clientEnvironment);
    }
    if (message.crash !== undefined) {
      obj.crash = Crash.toJSON(message.crash);
    }
    if (message.symlinkForest !== undefined) {
      obj.symlinkForest = SymlinkForest.toJSON(message.symlinkForest);
    }
    if (message.packageOptions !== undefined) {
      obj.packageOptions = PackageOptions.toJSON(message.packageOptions);
    }
    if (message.remoteExecution !== undefined) {
      obj.remoteExecution = RemoteExecution.toJSON(message.remoteExecution);
    }
    if (message.execution !== undefined) {
      obj.execution = Execution.toJSON(message.execution);
    }
    if (message.workspaces !== undefined) {
      obj.workspaces = Workspaces.toJSON(message.workspaces);
    }
    if (message.crashOptions !== undefined) {
      obj.crashOptions = CrashOptions.toJSON(message.crashOptions);
    }
    if (message.filesystem !== undefined) {
      obj.filesystem = Filesystem.toJSON(message.filesystem);
    }
    if (message.executionOptions !== undefined) {
      obj.executionOptions = ExecutionOptions.toJSON(message.executionOptions);
    }
    if (message.command !== undefined) {
      obj.command = Command.toJSON(message.command);
    }
    if (message.spawn !== undefined) {
      obj.spawn = Spawn.toJSON(message.spawn);
    }
    if (message.grpcServer !== undefined) {
      obj.grpcServer = GrpcServer.toJSON(message.grpcServer);
    }
    if (message.canonicalizeFlags !== undefined) {
      obj.canonicalizeFlags = CanonicalizeFlags.toJSON(message.canonicalizeFlags);
    }
    if (message.buildConfiguration !== undefined) {
      obj.buildConfiguration = BuildConfiguration.toJSON(message.buildConfiguration);
    }
    if (message.infoCommand !== undefined) {
      obj.infoCommand = InfoCommand.toJSON(message.infoCommand);
    }
    if (message.memoryOptions !== undefined) {
      obj.memoryOptions = MemoryOptions.toJSON(message.memoryOptions);
    }
    if (message.query !== undefined) {
      obj.query = Query.toJSON(message.query);
    }
    if (message.localExecution !== undefined) {
      obj.localExecution = LocalExecution.toJSON(message.localExecution);
    }
    if (message.actionCache !== undefined) {
      obj.actionCache = ActionCache.toJSON(message.actionCache);
    }
    if (message.fetchCommand !== undefined) {
      obj.fetchCommand = FetchCommand.toJSON(message.fetchCommand);
    }
    if (message.syncCommand !== undefined) {
      obj.syncCommand = SyncCommand.toJSON(message.syncCommand);
    }
    if (message.sandbox !== undefined) {
      obj.sandbox = Sandbox.toJSON(message.sandbox);
    }
    if (message.includeScanning !== undefined) {
      obj.includeScanning = IncludeScanning.toJSON(message.includeScanning);
    }
    if (message.testCommand !== undefined) {
      obj.testCommand = TestCommand.toJSON(message.testCommand);
    }
    if (message.actionQuery !== undefined) {
      obj.actionQuery = ActionQuery.toJSON(message.actionQuery);
    }
    if (message.targetPatterns !== undefined) {
      obj.targetPatterns = TargetPatterns.toJSON(message.targetPatterns);
    }
    if (message.cleanCommand !== undefined) {
      obj.cleanCommand = CleanCommand.toJSON(message.cleanCommand);
    }
    if (message.configCommand !== undefined) {
      obj.configCommand = ConfigCommand.toJSON(message.configCommand);
    }
    if (message.configurableQuery !== undefined) {
      obj.configurableQuery = ConfigurableQuery.toJSON(message.configurableQuery);
    }
    if (message.dumpCommand !== undefined) {
      obj.dumpCommand = DumpCommand.toJSON(message.dumpCommand);
    }
    if (message.helpCommand !== undefined) {
      obj.helpCommand = HelpCommand.toJSON(message.helpCommand);
    }
    if (message.mobileInstall !== undefined) {
      obj.mobileInstall = MobileInstall.toJSON(message.mobileInstall);
    }
    if (message.profileCommand !== undefined) {
      obj.profileCommand = ProfileCommand.toJSON(message.profileCommand);
    }
    if (message.runCommand !== undefined) {
      obj.runCommand = RunCommand.toJSON(message.runCommand);
    }
    if (message.versionCommand !== undefined) {
      obj.versionCommand = VersionCommand.toJSON(message.versionCommand);
    }
    if (message.printActionCommand !== undefined) {
      obj.printActionCommand = PrintActionCommand.toJSON(message.printActionCommand);
    }
    if (message.workspaceStatus !== undefined) {
      obj.workspaceStatus = WorkspaceStatus.toJSON(message.workspaceStatus);
    }
    if (message.javaCompile !== undefined) {
      obj.javaCompile = JavaCompile.toJSON(message.javaCompile);
    }
    if (message.actionRewinding !== undefined) {
      obj.actionRewinding = ActionRewinding.toJSON(message.actionRewinding);
    }
    if (message.cppCompile !== undefined) {
      obj.cppCompile = CppCompile.toJSON(message.cppCompile);
    }
    if (message.starlarkAction !== undefined) {
      obj.starlarkAction = StarlarkAction.toJSON(message.starlarkAction);
    }
    if (message.ninjaAction !== undefined) {
      obj.ninjaAction = NinjaAction.toJSON(message.ninjaAction);
    }
    if (message.dynamicExecution !== undefined) {
      obj.dynamicExecution = DynamicExecution.toJSON(message.dynamicExecution);
    }
    if (message.failAction !== undefined) {
      obj.failAction = FailAction.toJSON(message.failAction);
    }
    if (message.symlinkAction !== undefined) {
      obj.symlinkAction = SymlinkAction.toJSON(message.symlinkAction);
    }
    if (message.cppLink !== undefined) {
      obj.cppLink = CppLink.toJSON(message.cppLink);
    }
    if (message.ltoAction !== undefined) {
      obj.ltoAction = LtoAction.toJSON(message.ltoAction);
    }
    if (message.testAction !== undefined) {
      obj.testAction = TestAction.toJSON(message.testAction);
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.analysis !== undefined) {
      obj.analysis = Analysis.toJSON(message.analysis);
    }
    if (message.packageLoading !== undefined) {
      obj.packageLoading = PackageLoading.toJSON(message.packageLoading);
    }
    if (message.toolchain !== undefined) {
      obj.toolchain = Toolchain.toJSON(message.toolchain);
    }
    if (message.starlarkLoading !== undefined) {
      obj.starlarkLoading = StarlarkLoading.toJSON(message.starlarkLoading);
    }
    if (message.externalDeps !== undefined) {
      obj.externalDeps = ExternalDeps.toJSON(message.externalDeps);
    }
    if (message.diffAwareness !== undefined) {
      obj.diffAwareness = DiffAwareness.toJSON(message.diffAwareness);
    }
    if (message.modCommand !== undefined) {
      obj.modCommand = ModCommand.toJSON(message.modCommand);
    }
    if (message.buildReport !== undefined) {
      obj.buildReport = BuildReport.toJSON(message.buildReport);
    }
    if (message.skyfocus !== undefined) {
      obj.skyfocus = Skyfocus.toJSON(message.skyfocus);
    }
    if (message.remoteAnalysisCaching !== undefined) {
      obj.remoteAnalysisCaching = RemoteAnalysisCaching.toJSON(message.remoteAnalysisCaching);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FailureDetail>, I>>(base?: I): FailureDetail {
    return FailureDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FailureDetail>, I>>(object: I): FailureDetail {
    const message = createBaseFailureDetail();
    message.message = object.message ?? "";
    message.interrupted = (object.interrupted !== undefined && object.interrupted !== null)
      ? Interrupted.fromPartial(object.interrupted)
      : undefined;
    message.externalRepository = (object.externalRepository !== undefined && object.externalRepository !== null)
      ? ExternalRepository.fromPartial(object.externalRepository)
      : undefined;
    message.buildProgress = (object.buildProgress !== undefined && object.buildProgress !== null)
      ? BuildProgress.fromPartial(object.buildProgress)
      : undefined;
    message.remoteOptions = (object.remoteOptions !== undefined && object.remoteOptions !== null)
      ? RemoteOptions.fromPartial(object.remoteOptions)
      : undefined;
    message.clientEnvironment = (object.clientEnvironment !== undefined && object.clientEnvironment !== null)
      ? ClientEnvironment.fromPartial(object.clientEnvironment)
      : undefined;
    message.crash = (object.crash !== undefined && object.crash !== null) ? Crash.fromPartial(object.crash) : undefined;
    message.symlinkForest = (object.symlinkForest !== undefined && object.symlinkForest !== null)
      ? SymlinkForest.fromPartial(object.symlinkForest)
      : undefined;
    message.packageOptions = (object.packageOptions !== undefined && object.packageOptions !== null)
      ? PackageOptions.fromPartial(object.packageOptions)
      : undefined;
    message.remoteExecution = (object.remoteExecution !== undefined && object.remoteExecution !== null)
      ? RemoteExecution.fromPartial(object.remoteExecution)
      : undefined;
    message.execution = (object.execution !== undefined && object.execution !== null)
      ? Execution.fromPartial(object.execution)
      : undefined;
    message.workspaces = (object.workspaces !== undefined && object.workspaces !== null)
      ? Workspaces.fromPartial(object.workspaces)
      : undefined;
    message.crashOptions = (object.crashOptions !== undefined && object.crashOptions !== null)
      ? CrashOptions.fromPartial(object.crashOptions)
      : undefined;
    message.filesystem = (object.filesystem !== undefined && object.filesystem !== null)
      ? Filesystem.fromPartial(object.filesystem)
      : undefined;
    message.executionOptions = (object.executionOptions !== undefined && object.executionOptions !== null)
      ? ExecutionOptions.fromPartial(object.executionOptions)
      : undefined;
    message.command = (object.command !== undefined && object.command !== null)
      ? Command.fromPartial(object.command)
      : undefined;
    message.spawn = (object.spawn !== undefined && object.spawn !== null) ? Spawn.fromPartial(object.spawn) : undefined;
    message.grpcServer = (object.grpcServer !== undefined && object.grpcServer !== null)
      ? GrpcServer.fromPartial(object.grpcServer)
      : undefined;
    message.canonicalizeFlags = (object.canonicalizeFlags !== undefined && object.canonicalizeFlags !== null)
      ? CanonicalizeFlags.fromPartial(object.canonicalizeFlags)
      : undefined;
    message.buildConfiguration = (object.buildConfiguration !== undefined && object.buildConfiguration !== null)
      ? BuildConfiguration.fromPartial(object.buildConfiguration)
      : undefined;
    message.infoCommand = (object.infoCommand !== undefined && object.infoCommand !== null)
      ? InfoCommand.fromPartial(object.infoCommand)
      : undefined;
    message.memoryOptions = (object.memoryOptions !== undefined && object.memoryOptions !== null)
      ? MemoryOptions.fromPartial(object.memoryOptions)
      : undefined;
    message.query = (object.query !== undefined && object.query !== null) ? Query.fromPartial(object.query) : undefined;
    message.localExecution = (object.localExecution !== undefined && object.localExecution !== null)
      ? LocalExecution.fromPartial(object.localExecution)
      : undefined;
    message.actionCache = (object.actionCache !== undefined && object.actionCache !== null)
      ? ActionCache.fromPartial(object.actionCache)
      : undefined;
    message.fetchCommand = (object.fetchCommand !== undefined && object.fetchCommand !== null)
      ? FetchCommand.fromPartial(object.fetchCommand)
      : undefined;
    message.syncCommand = (object.syncCommand !== undefined && object.syncCommand !== null)
      ? SyncCommand.fromPartial(object.syncCommand)
      : undefined;
    message.sandbox = (object.sandbox !== undefined && object.sandbox !== null)
      ? Sandbox.fromPartial(object.sandbox)
      : undefined;
    message.includeScanning = (object.includeScanning !== undefined && object.includeScanning !== null)
      ? IncludeScanning.fromPartial(object.includeScanning)
      : undefined;
    message.testCommand = (object.testCommand !== undefined && object.testCommand !== null)
      ? TestCommand.fromPartial(object.testCommand)
      : undefined;
    message.actionQuery = (object.actionQuery !== undefined && object.actionQuery !== null)
      ? ActionQuery.fromPartial(object.actionQuery)
      : undefined;
    message.targetPatterns = (object.targetPatterns !== undefined && object.targetPatterns !== null)
      ? TargetPatterns.fromPartial(object.targetPatterns)
      : undefined;
    message.cleanCommand = (object.cleanCommand !== undefined && object.cleanCommand !== null)
      ? CleanCommand.fromPartial(object.cleanCommand)
      : undefined;
    message.configCommand = (object.configCommand !== undefined && object.configCommand !== null)
      ? ConfigCommand.fromPartial(object.configCommand)
      : undefined;
    message.configurableQuery = (object.configurableQuery !== undefined && object.configurableQuery !== null)
      ? ConfigurableQuery.fromPartial(object.configurableQuery)
      : undefined;
    message.dumpCommand = (object.dumpCommand !== undefined && object.dumpCommand !== null)
      ? DumpCommand.fromPartial(object.dumpCommand)
      : undefined;
    message.helpCommand = (object.helpCommand !== undefined && object.helpCommand !== null)
      ? HelpCommand.fromPartial(object.helpCommand)
      : undefined;
    message.mobileInstall = (object.mobileInstall !== undefined && object.mobileInstall !== null)
      ? MobileInstall.fromPartial(object.mobileInstall)
      : undefined;
    message.profileCommand = (object.profileCommand !== undefined && object.profileCommand !== null)
      ? ProfileCommand.fromPartial(object.profileCommand)
      : undefined;
    message.runCommand = (object.runCommand !== undefined && object.runCommand !== null)
      ? RunCommand.fromPartial(object.runCommand)
      : undefined;
    message.versionCommand = (object.versionCommand !== undefined && object.versionCommand !== null)
      ? VersionCommand.fromPartial(object.versionCommand)
      : undefined;
    message.printActionCommand = (object.printActionCommand !== undefined && object.printActionCommand !== null)
      ? PrintActionCommand.fromPartial(object.printActionCommand)
      : undefined;
    message.workspaceStatus = (object.workspaceStatus !== undefined && object.workspaceStatus !== null)
      ? WorkspaceStatus.fromPartial(object.workspaceStatus)
      : undefined;
    message.javaCompile = (object.javaCompile !== undefined && object.javaCompile !== null)
      ? JavaCompile.fromPartial(object.javaCompile)
      : undefined;
    message.actionRewinding = (object.actionRewinding !== undefined && object.actionRewinding !== null)
      ? ActionRewinding.fromPartial(object.actionRewinding)
      : undefined;
    message.cppCompile = (object.cppCompile !== undefined && object.cppCompile !== null)
      ? CppCompile.fromPartial(object.cppCompile)
      : undefined;
    message.starlarkAction = (object.starlarkAction !== undefined && object.starlarkAction !== null)
      ? StarlarkAction.fromPartial(object.starlarkAction)
      : undefined;
    message.ninjaAction = (object.ninjaAction !== undefined && object.ninjaAction !== null)
      ? NinjaAction.fromPartial(object.ninjaAction)
      : undefined;
    message.dynamicExecution = (object.dynamicExecution !== undefined && object.dynamicExecution !== null)
      ? DynamicExecution.fromPartial(object.dynamicExecution)
      : undefined;
    message.failAction = (object.failAction !== undefined && object.failAction !== null)
      ? FailAction.fromPartial(object.failAction)
      : undefined;
    message.symlinkAction = (object.symlinkAction !== undefined && object.symlinkAction !== null)
      ? SymlinkAction.fromPartial(object.symlinkAction)
      : undefined;
    message.cppLink = (object.cppLink !== undefined && object.cppLink !== null)
      ? CppLink.fromPartial(object.cppLink)
      : undefined;
    message.ltoAction = (object.ltoAction !== undefined && object.ltoAction !== null)
      ? LtoAction.fromPartial(object.ltoAction)
      : undefined;
    message.testAction = (object.testAction !== undefined && object.testAction !== null)
      ? TestAction.fromPartial(object.testAction)
      : undefined;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? Analysis.fromPartial(object.analysis)
      : undefined;
    message.packageLoading = (object.packageLoading !== undefined && object.packageLoading !== null)
      ? PackageLoading.fromPartial(object.packageLoading)
      : undefined;
    message.toolchain = (object.toolchain !== undefined && object.toolchain !== null)
      ? Toolchain.fromPartial(object.toolchain)
      : undefined;
    message.starlarkLoading = (object.starlarkLoading !== undefined && object.starlarkLoading !== null)
      ? StarlarkLoading.fromPartial(object.starlarkLoading)
      : undefined;
    message.externalDeps = (object.externalDeps !== undefined && object.externalDeps !== null)
      ? ExternalDeps.fromPartial(object.externalDeps)
      : undefined;
    message.diffAwareness = (object.diffAwareness !== undefined && object.diffAwareness !== null)
      ? DiffAwareness.fromPartial(object.diffAwareness)
      : undefined;
    message.modCommand = (object.modCommand !== undefined && object.modCommand !== null)
      ? ModCommand.fromPartial(object.modCommand)
      : undefined;
    message.buildReport = (object.buildReport !== undefined && object.buildReport !== null)
      ? BuildReport.fromPartial(object.buildReport)
      : undefined;
    message.skyfocus = (object.skyfocus !== undefined && object.skyfocus !== null)
      ? Skyfocus.fromPartial(object.skyfocus)
      : undefined;
    message.remoteAnalysisCaching =
      (object.remoteAnalysisCaching !== undefined && object.remoteAnalysisCaching !== null)
        ? RemoteAnalysisCaching.fromPartial(object.remoteAnalysisCaching)
        : undefined;
    return message;
  },
};

function createBaseInterrupted(): Interrupted {
  return { code: 0 };
}

export const Interrupted: MessageFns<Interrupted> = {
  encode(message: Interrupted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Interrupted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterrupted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Interrupted {
    return { code: isSet(object.code) ? interrupted_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Interrupted): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = interrupted_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Interrupted>, I>>(base?: I): Interrupted {
    return Interrupted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Interrupted>, I>>(object: I): Interrupted {
    const message = createBaseInterrupted();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseSpawn(): Spawn {
  return { code: 0, catastrophic: false, spawnExitCode: 0 };
}

export const Spawn: MessageFns<Spawn> = {
  encode(message: Spawn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.catastrophic !== false) {
      writer.uint32(16).bool(message.catastrophic);
    }
    if (message.spawnExitCode !== 0) {
      writer.uint32(24).int32(message.spawnExitCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spawn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.catastrophic = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.spawnExitCode = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spawn {
    return {
      code: isSet(object.code) ? spawn_CodeFromJSON(object.code) : 0,
      catastrophic: isSet(object.catastrophic) ? globalThis.Boolean(object.catastrophic) : false,
      spawnExitCode: isSet(object.spawnExitCode) ? globalThis.Number(object.spawnExitCode) : 0,
    };
  },

  toJSON(message: Spawn): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = spawn_CodeToJSON(message.code);
    }
    if (message.catastrophic !== false) {
      obj.catastrophic = message.catastrophic;
    }
    if (message.spawnExitCode !== 0) {
      obj.spawnExitCode = Math.round(message.spawnExitCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Spawn>, I>>(base?: I): Spawn {
    return Spawn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Spawn>, I>>(object: I): Spawn {
    const message = createBaseSpawn();
    message.code = object.code ?? 0;
    message.catastrophic = object.catastrophic ?? false;
    message.spawnExitCode = object.spawnExitCode ?? 0;
    return message;
  },
};

function createBaseExternalRepository(): ExternalRepository {
  return { code: 0 };
}

export const ExternalRepository: MessageFns<ExternalRepository> = {
  encode(message: ExternalRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalRepository {
    return { code: isSet(object.code) ? externalRepository_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ExternalRepository): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = externalRepository_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalRepository>, I>>(base?: I): ExternalRepository {
    return ExternalRepository.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalRepository>, I>>(object: I): ExternalRepository {
    const message = createBaseExternalRepository();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseBuildProgress(): BuildProgress {
  return { code: 0 };
}

export const BuildProgress: MessageFns<BuildProgress> = {
  encode(message: BuildProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildProgress {
    return { code: isSet(object.code) ? buildProgress_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: BuildProgress): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = buildProgress_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildProgress>, I>>(base?: I): BuildProgress {
    return BuildProgress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildProgress>, I>>(object: I): BuildProgress {
    const message = createBaseBuildProgress();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseRemoteOptions(): RemoteOptions {
  return { code: 0 };
}

export const RemoteOptions: MessageFns<RemoteOptions> = {
  encode(message: RemoteOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteOptions {
    return { code: isSet(object.code) ? remoteOptions_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: RemoteOptions): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = remoteOptions_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteOptions>, I>>(base?: I): RemoteOptions {
    return RemoteOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteOptions>, I>>(object: I): RemoteOptions {
    const message = createBaseRemoteOptions();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseClientEnvironment(): ClientEnvironment {
  return { code: 0 };
}

export const ClientEnvironment: MessageFns<ClientEnvironment> = {
  encode(message: ClientEnvironment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientEnvironment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientEnvironment {
    return { code: isSet(object.code) ? clientEnvironment_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ClientEnvironment): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = clientEnvironment_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientEnvironment>, I>>(base?: I): ClientEnvironment {
    return ClientEnvironment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientEnvironment>, I>>(object: I): ClientEnvironment {
    const message = createBaseClientEnvironment();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCrash(): Crash {
  return { code: 0, causes: [], oomCauseCategory: 0 };
}

export const Crash: MessageFns<Crash> = {
  encode(message: Crash, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    for (const v of message.causes) {
      Throwable.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.oomCauseCategory !== 0) {
      writer.uint32(32).int32(message.oomCauseCategory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Crash {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.causes.push(Throwable.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.oomCauseCategory = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Crash {
    return {
      code: isSet(object.code) ? crash_CodeFromJSON(object.code) : 0,
      causes: globalThis.Array.isArray(object?.causes) ? object.causes.map((e: any) => Throwable.fromJSON(e)) : [],
      oomCauseCategory: isSet(object.oomCauseCategory) ? crash_OomCauseCategoryFromJSON(object.oomCauseCategory) : 0,
    };
  },

  toJSON(message: Crash): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = crash_CodeToJSON(message.code);
    }
    if (message.causes?.length) {
      obj.causes = message.causes.map((e) => Throwable.toJSON(e));
    }
    if (message.oomCauseCategory !== 0) {
      obj.oomCauseCategory = crash_OomCauseCategoryToJSON(message.oomCauseCategory);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Crash>, I>>(base?: I): Crash {
    return Crash.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Crash>, I>>(object: I): Crash {
    const message = createBaseCrash();
    message.code = object.code ?? 0;
    message.causes = object.causes?.map((e) => Throwable.fromPartial(e)) || [];
    message.oomCauseCategory = object.oomCauseCategory ?? 0;
    return message;
  },
};

function createBaseThrowable(): Throwable {
  return { throwableClass: "", message: "", stackTrace: [] };
}

export const Throwable: MessageFns<Throwable> = {
  encode(message: Throwable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.throwableClass !== "") {
      writer.uint32(10).string(message.throwableClass);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    for (const v of message.stackTrace) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Throwable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThrowable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.throwableClass = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stackTrace.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Throwable {
    return {
      throwableClass: isSet(object.throwableClass) ? globalThis.String(object.throwableClass) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      stackTrace: globalThis.Array.isArray(object?.stackTrace)
        ? object.stackTrace.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Throwable): unknown {
    const obj: any = {};
    if (message.throwableClass !== "") {
      obj.throwableClass = message.throwableClass;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.stackTrace?.length) {
      obj.stackTrace = message.stackTrace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Throwable>, I>>(base?: I): Throwable {
    return Throwable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Throwable>, I>>(object: I): Throwable {
    const message = createBaseThrowable();
    message.throwableClass = object.throwableClass ?? "";
    message.message = object.message ?? "";
    message.stackTrace = object.stackTrace?.map((e) => e) || [];
    return message;
  },
};

function createBaseSymlinkForest(): SymlinkForest {
  return { code: 0 };
}

export const SymlinkForest: MessageFns<SymlinkForest> = {
  encode(message: SymlinkForest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SymlinkForest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSymlinkForest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SymlinkForest {
    return { code: isSet(object.code) ? symlinkForest_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: SymlinkForest): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = symlinkForest_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SymlinkForest>, I>>(base?: I): SymlinkForest {
    return SymlinkForest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SymlinkForest>, I>>(object: I): SymlinkForest {
    const message = createBaseSymlinkForest();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseBuildReport(): BuildReport {
  return { code: 0 };
}

export const BuildReport: MessageFns<BuildReport> = {
  encode(message: BuildReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildReport {
    return { code: isSet(object.code) ? buildReport_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: BuildReport): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = buildReport_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildReport>, I>>(base?: I): BuildReport {
    return BuildReport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildReport>, I>>(object: I): BuildReport {
    const message = createBaseBuildReport();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseSkyfocus(): Skyfocus {
  return { code: 0 };
}

export const Skyfocus: MessageFns<Skyfocus> = {
  encode(message: Skyfocus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Skyfocus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkyfocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Skyfocus {
    return { code: isSet(object.code) ? skyfocus_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Skyfocus): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = skyfocus_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Skyfocus>, I>>(base?: I): Skyfocus {
    return Skyfocus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Skyfocus>, I>>(object: I): Skyfocus {
    const message = createBaseSkyfocus();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseRemoteAnalysisCaching(): RemoteAnalysisCaching {
  return { code: 0 };
}

export const RemoteAnalysisCaching: MessageFns<RemoteAnalysisCaching> = {
  encode(message: RemoteAnalysisCaching, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteAnalysisCaching {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteAnalysisCaching();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteAnalysisCaching {
    return { code: isSet(object.code) ? remoteAnalysisCaching_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: RemoteAnalysisCaching): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = remoteAnalysisCaching_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteAnalysisCaching>, I>>(base?: I): RemoteAnalysisCaching {
    return RemoteAnalysisCaching.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteAnalysisCaching>, I>>(object: I): RemoteAnalysisCaching {
    const message = createBaseRemoteAnalysisCaching();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBasePackageOptions(): PackageOptions {
  return { code: 0 };
}

export const PackageOptions: MessageFns<PackageOptions> = {
  encode(message: PackageOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageOptions {
    return { code: isSet(object.code) ? packageOptions_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: PackageOptions): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = packageOptions_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PackageOptions>, I>>(base?: I): PackageOptions {
    return PackageOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PackageOptions>, I>>(object: I): PackageOptions {
    const message = createBasePackageOptions();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseRemoteExecution(): RemoteExecution {
  return { code: 0 };
}

export const RemoteExecution: MessageFns<RemoteExecution> = {
  encode(message: RemoteExecution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteExecution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteExecution {
    return { code: isSet(object.code) ? remoteExecution_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: RemoteExecution): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = remoteExecution_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteExecution>, I>>(base?: I): RemoteExecution {
    return RemoteExecution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteExecution>, I>>(object: I): RemoteExecution {
    const message = createBaseRemoteExecution();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseExecution(): Execution {
  return { code: 0 };
}

export const Execution: MessageFns<Execution> = {
  encode(message: Execution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution {
    return { code: isSet(object.code) ? execution_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Execution): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = execution_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Execution>, I>>(base?: I): Execution {
    return Execution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Execution>, I>>(object: I): Execution {
    const message = createBaseExecution();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseWorkspaces(): Workspaces {
  return { code: 0 };
}

export const Workspaces: MessageFns<Workspaces> = {
  encode(message: Workspaces, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workspaces {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaces();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workspaces {
    return { code: isSet(object.code) ? workspaces_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Workspaces): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = workspaces_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Workspaces>, I>>(base?: I): Workspaces {
    return Workspaces.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Workspaces>, I>>(object: I): Workspaces {
    const message = createBaseWorkspaces();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCrashOptions(): CrashOptions {
  return { code: 0 };
}

export const CrashOptions: MessageFns<CrashOptions> = {
  encode(message: CrashOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrashOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrashOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrashOptions {
    return { code: isSet(object.code) ? crashOptions_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: CrashOptions): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = crashOptions_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrashOptions>, I>>(base?: I): CrashOptions {
    return CrashOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrashOptions>, I>>(object: I): CrashOptions {
    const message = createBaseCrashOptions();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseFilesystem(): Filesystem {
  return { code: 0 };
}

export const Filesystem: MessageFns<Filesystem> = {
  encode(message: Filesystem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Filesystem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilesystem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filesystem {
    return { code: isSet(object.code) ? filesystem_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Filesystem): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = filesystem_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filesystem>, I>>(base?: I): Filesystem {
    return Filesystem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filesystem>, I>>(object: I): Filesystem {
    const message = createBaseFilesystem();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseExecutionOptions(): ExecutionOptions {
  return { code: 0 };
}

export const ExecutionOptions: MessageFns<ExecutionOptions> = {
  encode(message: ExecutionOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionOptions {
    return { code: isSet(object.code) ? executionOptions_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ExecutionOptions): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = executionOptions_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionOptions>, I>>(base?: I): ExecutionOptions {
    return ExecutionOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionOptions>, I>>(object: I): ExecutionOptions {
    const message = createBaseExecutionOptions();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCommand(): Command {
  return { code: 0 };
}

export const Command: MessageFns<Command> = {
  encode(message: Command, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command {
    return { code: isSet(object.code) ? command_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Command): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = command_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command>, I>>(base?: I): Command {
    return Command.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command>, I>>(object: I): Command {
    const message = createBaseCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseGrpcServer(): GrpcServer {
  return { code: 0 };
}

export const GrpcServer: MessageFns<GrpcServer> = {
  encode(message: GrpcServer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcServer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcServer {
    return { code: isSet(object.code) ? grpcServer_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: GrpcServer): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = grpcServer_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcServer>, I>>(base?: I): GrpcServer {
    return GrpcServer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcServer>, I>>(object: I): GrpcServer {
    const message = createBaseGrpcServer();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCanonicalizeFlags(): CanonicalizeFlags {
  return { code: 0 };
}

export const CanonicalizeFlags: MessageFns<CanonicalizeFlags> = {
  encode(message: CanonicalizeFlags, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanonicalizeFlags {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanonicalizeFlags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanonicalizeFlags {
    return { code: isSet(object.code) ? canonicalizeFlags_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: CanonicalizeFlags): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = canonicalizeFlags_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanonicalizeFlags>, I>>(base?: I): CanonicalizeFlags {
    return CanonicalizeFlags.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanonicalizeFlags>, I>>(object: I): CanonicalizeFlags {
    const message = createBaseCanonicalizeFlags();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseBuildConfiguration(): BuildConfiguration {
  return { code: 0 };
}

export const BuildConfiguration: MessageFns<BuildConfiguration> = {
  encode(message: BuildConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildConfiguration {
    return { code: isSet(object.code) ? buildConfiguration_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: BuildConfiguration): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = buildConfiguration_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildConfiguration>, I>>(base?: I): BuildConfiguration {
    return BuildConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildConfiguration>, I>>(object: I): BuildConfiguration {
    const message = createBaseBuildConfiguration();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseInfoCommand(): InfoCommand {
  return { code: 0 };
}

export const InfoCommand: MessageFns<InfoCommand> = {
  encode(message: InfoCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InfoCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoCommand {
    return { code: isSet(object.code) ? infoCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: InfoCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = infoCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InfoCommand>, I>>(base?: I): InfoCommand {
    return InfoCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InfoCommand>, I>>(object: I): InfoCommand {
    const message = createBaseInfoCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseMemoryOptions(): MemoryOptions {
  return { code: 0 };
}

export const MemoryOptions: MessageFns<MemoryOptions> = {
  encode(message: MemoryOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemoryOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemoryOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MemoryOptions {
    return { code: isSet(object.code) ? memoryOptions_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: MemoryOptions): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = memoryOptions_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MemoryOptions>, I>>(base?: I): MemoryOptions {
    return MemoryOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MemoryOptions>, I>>(object: I): MemoryOptions {
    const message = createBaseMemoryOptions();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseQuery(): Query {
  return { code: 0 };
}

export const Query: MessageFns<Query> = {
  encode(message: Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Query {
    return { code: isSet(object.code) ? query_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Query): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = query_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Query>, I>>(base?: I): Query {
    return Query.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Query>, I>>(object: I): Query {
    const message = createBaseQuery();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseLocalExecution(): LocalExecution {
  return { code: 0 };
}

export const LocalExecution: MessageFns<LocalExecution> = {
  encode(message: LocalExecution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalExecution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalExecution {
    return { code: isSet(object.code) ? localExecution_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: LocalExecution): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = localExecution_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalExecution>, I>>(base?: I): LocalExecution {
    return LocalExecution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalExecution>, I>>(object: I): LocalExecution {
    const message = createBaseLocalExecution();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseActionCache(): ActionCache {
  return { code: 0 };
}

export const ActionCache: MessageFns<ActionCache> = {
  encode(message: ActionCache, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionCache {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionCache();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionCache {
    return { code: isSet(object.code) ? actionCache_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ActionCache): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = actionCache_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionCache>, I>>(base?: I): ActionCache {
    return ActionCache.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionCache>, I>>(object: I): ActionCache {
    const message = createBaseActionCache();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseFetchCommand(): FetchCommand {
  return { code: 0 };
}

export const FetchCommand: MessageFns<FetchCommand> = {
  encode(message: FetchCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchCommand {
    return { code: isSet(object.code) ? fetchCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: FetchCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = fetchCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FetchCommand>, I>>(base?: I): FetchCommand {
    return FetchCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FetchCommand>, I>>(object: I): FetchCommand {
    const message = createBaseFetchCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseSyncCommand(): SyncCommand {
  return { code: 0 };
}

export const SyncCommand: MessageFns<SyncCommand> = {
  encode(message: SyncCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncCommand {
    return { code: isSet(object.code) ? syncCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: SyncCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = syncCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncCommand>, I>>(base?: I): SyncCommand {
    return SyncCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncCommand>, I>>(object: I): SyncCommand {
    const message = createBaseSyncCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseSandbox(): Sandbox {
  return { code: 0 };
}

export const Sandbox: MessageFns<Sandbox> = {
  encode(message: Sandbox, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sandbox {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSandbox();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sandbox {
    return { code: isSet(object.code) ? sandbox_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Sandbox): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = sandbox_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sandbox>, I>>(base?: I): Sandbox {
    return Sandbox.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sandbox>, I>>(object: I): Sandbox {
    const message = createBaseSandbox();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseIncludeScanning(): IncludeScanning {
  return { code: 0, packageLoadingCode: 0 };
}

export const IncludeScanning: MessageFns<IncludeScanning> = {
  encode(message: IncludeScanning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.packageLoadingCode !== 0) {
      writer.uint32(16).int32(message.packageLoadingCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncludeScanning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncludeScanning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.packageLoadingCode = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncludeScanning {
    return {
      code: isSet(object.code) ? includeScanning_CodeFromJSON(object.code) : 0,
      packageLoadingCode: isSet(object.packageLoadingCode) ? packageLoading_CodeFromJSON(object.packageLoadingCode) : 0,
    };
  },

  toJSON(message: IncludeScanning): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = includeScanning_CodeToJSON(message.code);
    }
    if (message.packageLoadingCode !== 0) {
      obj.packageLoadingCode = packageLoading_CodeToJSON(message.packageLoadingCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncludeScanning>, I>>(base?: I): IncludeScanning {
    return IncludeScanning.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncludeScanning>, I>>(object: I): IncludeScanning {
    const message = createBaseIncludeScanning();
    message.code = object.code ?? 0;
    message.packageLoadingCode = object.packageLoadingCode ?? 0;
    return message;
  },
};

function createBaseTestCommand(): TestCommand {
  return { code: 0 };
}

export const TestCommand: MessageFns<TestCommand> = {
  encode(message: TestCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestCommand {
    return { code: isSet(object.code) ? testCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: TestCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = testCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestCommand>, I>>(base?: I): TestCommand {
    return TestCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestCommand>, I>>(object: I): TestCommand {
    const message = createBaseTestCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseActionQuery(): ActionQuery {
  return { code: 0 };
}

export const ActionQuery: MessageFns<ActionQuery> = {
  encode(message: ActionQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionQuery {
    return { code: isSet(object.code) ? actionQuery_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ActionQuery): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = actionQuery_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionQuery>, I>>(base?: I): ActionQuery {
    return ActionQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionQuery>, I>>(object: I): ActionQuery {
    const message = createBaseActionQuery();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseTargetPatterns(): TargetPatterns {
  return { code: 0 };
}

export const TargetPatterns: MessageFns<TargetPatterns> = {
  encode(message: TargetPatterns, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetPatterns {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetPatterns();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetPatterns {
    return { code: isSet(object.code) ? targetPatterns_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: TargetPatterns): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = targetPatterns_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetPatterns>, I>>(base?: I): TargetPatterns {
    return TargetPatterns.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetPatterns>, I>>(object: I): TargetPatterns {
    const message = createBaseTargetPatterns();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCleanCommand(): CleanCommand {
  return { code: 0 };
}

export const CleanCommand: MessageFns<CleanCommand> = {
  encode(message: CleanCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CleanCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanCommand {
    return { code: isSet(object.code) ? cleanCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: CleanCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = cleanCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CleanCommand>, I>>(base?: I): CleanCommand {
    return CleanCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CleanCommand>, I>>(object: I): CleanCommand {
    const message = createBaseCleanCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseConfigCommand(): ConfigCommand {
  return { code: 0 };
}

export const ConfigCommand: MessageFns<ConfigCommand> = {
  encode(message: ConfigCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigCommand {
    return { code: isSet(object.code) ? configCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ConfigCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = configCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigCommand>, I>>(base?: I): ConfigCommand {
    return ConfigCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigCommand>, I>>(object: I): ConfigCommand {
    const message = createBaseConfigCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseConfigurableQuery(): ConfigurableQuery {
  return { code: 0 };
}

export const ConfigurableQuery: MessageFns<ConfigurableQuery> = {
  encode(message: ConfigurableQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigurableQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigurableQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigurableQuery {
    return { code: isSet(object.code) ? configurableQuery_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ConfigurableQuery): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = configurableQuery_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigurableQuery>, I>>(base?: I): ConfigurableQuery {
    return ConfigurableQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigurableQuery>, I>>(object: I): ConfigurableQuery {
    const message = createBaseConfigurableQuery();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseDumpCommand(): DumpCommand {
  return { code: 0 };
}

export const DumpCommand: MessageFns<DumpCommand> = {
  encode(message: DumpCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DumpCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDumpCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DumpCommand {
    return { code: isSet(object.code) ? dumpCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: DumpCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = dumpCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DumpCommand>, I>>(base?: I): DumpCommand {
    return DumpCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DumpCommand>, I>>(object: I): DumpCommand {
    const message = createBaseDumpCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseHelpCommand(): HelpCommand {
  return { code: 0 };
}

export const HelpCommand: MessageFns<HelpCommand> = {
  encode(message: HelpCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelpCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelpCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelpCommand {
    return { code: isSet(object.code) ? helpCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: HelpCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = helpCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HelpCommand>, I>>(base?: I): HelpCommand {
    return HelpCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HelpCommand>, I>>(object: I): HelpCommand {
    const message = createBaseHelpCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseMobileInstall(): MobileInstall {
  return { code: 0 };
}

export const MobileInstall: MessageFns<MobileInstall> = {
  encode(message: MobileInstall, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MobileInstall {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMobileInstall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MobileInstall {
    return { code: isSet(object.code) ? mobileInstall_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: MobileInstall): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = mobileInstall_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MobileInstall>, I>>(base?: I): MobileInstall {
    return MobileInstall.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MobileInstall>, I>>(object: I): MobileInstall {
    const message = createBaseMobileInstall();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseProfileCommand(): ProfileCommand {
  return { code: 0 };
}

export const ProfileCommand: MessageFns<ProfileCommand> = {
  encode(message: ProfileCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileCommand {
    return { code: isSet(object.code) ? profileCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ProfileCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = profileCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileCommand>, I>>(base?: I): ProfileCommand {
    return ProfileCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileCommand>, I>>(object: I): ProfileCommand {
    const message = createBaseProfileCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseRunCommand(): RunCommand {
  return { code: 0 };
}

export const RunCommand: MessageFns<RunCommand> = {
  encode(message: RunCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunCommand {
    return { code: isSet(object.code) ? runCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: RunCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = runCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunCommand>, I>>(base?: I): RunCommand {
    return RunCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunCommand>, I>>(object: I): RunCommand {
    const message = createBaseRunCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseVersionCommand(): VersionCommand {
  return { code: 0 };
}

export const VersionCommand: MessageFns<VersionCommand> = {
  encode(message: VersionCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionCommand {
    return { code: isSet(object.code) ? versionCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: VersionCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = versionCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionCommand>, I>>(base?: I): VersionCommand {
    return VersionCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionCommand>, I>>(object: I): VersionCommand {
    const message = createBaseVersionCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBasePrintActionCommand(): PrintActionCommand {
  return { code: 0 };
}

export const PrintActionCommand: MessageFns<PrintActionCommand> = {
  encode(message: PrintActionCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrintActionCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrintActionCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrintActionCommand {
    return { code: isSet(object.code) ? printActionCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: PrintActionCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = printActionCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrintActionCommand>, I>>(base?: I): PrintActionCommand {
    return PrintActionCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrintActionCommand>, I>>(object: I): PrintActionCommand {
    const message = createBasePrintActionCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseWorkspaceStatus(): WorkspaceStatus {
  return { code: 0 };
}

export const WorkspaceStatus: MessageFns<WorkspaceStatus> = {
  encode(message: WorkspaceStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceStatus {
    return { code: isSet(object.code) ? workspaceStatus_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: WorkspaceStatus): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = workspaceStatus_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkspaceStatus>, I>>(base?: I): WorkspaceStatus {
    return WorkspaceStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkspaceStatus>, I>>(object: I): WorkspaceStatus {
    const message = createBaseWorkspaceStatus();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseJavaCompile(): JavaCompile {
  return { code: 0 };
}

export const JavaCompile: MessageFns<JavaCompile> = {
  encode(message: JavaCompile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JavaCompile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJavaCompile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JavaCompile {
    return { code: isSet(object.code) ? javaCompile_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: JavaCompile): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = javaCompile_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JavaCompile>, I>>(base?: I): JavaCompile {
    return JavaCompile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JavaCompile>, I>>(object: I): JavaCompile {
    const message = createBaseJavaCompile();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseActionRewinding(): ActionRewinding {
  return { code: 0 };
}

export const ActionRewinding: MessageFns<ActionRewinding> = {
  encode(message: ActionRewinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionRewinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionRewinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionRewinding {
    return { code: isSet(object.code) ? actionRewinding_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ActionRewinding): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = actionRewinding_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionRewinding>, I>>(base?: I): ActionRewinding {
    return ActionRewinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionRewinding>, I>>(object: I): ActionRewinding {
    const message = createBaseActionRewinding();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCppCompile(): CppCompile {
  return { code: 0 };
}

export const CppCompile: MessageFns<CppCompile> = {
  encode(message: CppCompile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CppCompile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCppCompile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CppCompile {
    return { code: isSet(object.code) ? cppCompile_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: CppCompile): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = cppCompile_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CppCompile>, I>>(base?: I): CppCompile {
    return CppCompile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CppCompile>, I>>(object: I): CppCompile {
    const message = createBaseCppCompile();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseStarlarkAction(): StarlarkAction {
  return { code: 0 };
}

export const StarlarkAction: MessageFns<StarlarkAction> = {
  encode(message: StarlarkAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarlarkAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarlarkAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarlarkAction {
    return { code: isSet(object.code) ? starlarkAction_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: StarlarkAction): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = starlarkAction_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarlarkAction>, I>>(base?: I): StarlarkAction {
    return StarlarkAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarlarkAction>, I>>(object: I): StarlarkAction {
    const message = createBaseStarlarkAction();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseNinjaAction(): NinjaAction {
  return { code: 0 };
}

export const NinjaAction: MessageFns<NinjaAction> = {
  encode(message: NinjaAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NinjaAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNinjaAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NinjaAction {
    return { code: isSet(object.code) ? ninjaAction_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: NinjaAction): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = ninjaAction_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NinjaAction>, I>>(base?: I): NinjaAction {
    return NinjaAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NinjaAction>, I>>(object: I): NinjaAction {
    const message = createBaseNinjaAction();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseDynamicExecution(): DynamicExecution {
  return { code: 0 };
}

export const DynamicExecution: MessageFns<DynamicExecution> = {
  encode(message: DynamicExecution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicExecution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicExecution {
    return { code: isSet(object.code) ? dynamicExecution_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: DynamicExecution): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = dynamicExecution_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicExecution>, I>>(base?: I): DynamicExecution {
    return DynamicExecution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicExecution>, I>>(object: I): DynamicExecution {
    const message = createBaseDynamicExecution();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseFailAction(): FailAction {
  return { code: 0 };
}

export const FailAction: MessageFns<FailAction> = {
  encode(message: FailAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FailAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFailAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FailAction {
    return { code: isSet(object.code) ? failAction_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: FailAction): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = failAction_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FailAction>, I>>(base?: I): FailAction {
    return FailAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FailAction>, I>>(object: I): FailAction {
    const message = createBaseFailAction();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseSymlinkAction(): SymlinkAction {
  return { code: 0 };
}

export const SymlinkAction: MessageFns<SymlinkAction> = {
  encode(message: SymlinkAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SymlinkAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSymlinkAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SymlinkAction {
    return { code: isSet(object.code) ? symlinkAction_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: SymlinkAction): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = symlinkAction_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SymlinkAction>, I>>(base?: I): SymlinkAction {
    return SymlinkAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SymlinkAction>, I>>(object: I): SymlinkAction {
    const message = createBaseSymlinkAction();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseCppLink(): CppLink {
  return { code: 0 };
}

export const CppLink: MessageFns<CppLink> = {
  encode(message: CppLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CppLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCppLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CppLink {
    return { code: isSet(object.code) ? cppLink_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: CppLink): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = cppLink_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CppLink>, I>>(base?: I): CppLink {
    return CppLink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CppLink>, I>>(object: I): CppLink {
    const message = createBaseCppLink();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseLtoAction(): LtoAction {
  return { code: 0 };
}

export const LtoAction: MessageFns<LtoAction> = {
  encode(message: LtoAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LtoAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLtoAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LtoAction {
    return { code: isSet(object.code) ? ltoAction_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: LtoAction): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = ltoAction_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LtoAction>, I>>(base?: I): LtoAction {
    return LtoAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LtoAction>, I>>(object: I): LtoAction {
    const message = createBaseLtoAction();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseTestAction(): TestAction {
  return { code: 0 };
}

export const TestAction: MessageFns<TestAction> = {
  encode(message: TestAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestAction {
    return { code: isSet(object.code) ? testAction_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: TestAction): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = testAction_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestAction>, I>>(base?: I): TestAction {
    return TestAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestAction>, I>>(object: I): TestAction {
    const message = createBaseTestAction();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseWorker(): Worker {
  return { code: 0 };
}

export const Worker: MessageFns<Worker> = {
  encode(message: Worker, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Worker {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Worker {
    return { code: isSet(object.code) ? worker_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Worker): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = worker_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Worker>, I>>(base?: I): Worker {
    return Worker.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Worker>, I>>(object: I): Worker {
    const message = createBaseWorker();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseAnalysis(): Analysis {
  return { code: 0 };
}

export const Analysis: MessageFns<Analysis> = {
  encode(message: Analysis, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Analysis {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Analysis {
    return { code: isSet(object.code) ? analysis_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Analysis): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = analysis_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Analysis>, I>>(base?: I): Analysis {
    return Analysis.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Analysis>, I>>(object: I): Analysis {
    const message = createBaseAnalysis();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBasePackageLoading(): PackageLoading {
  return { code: 0 };
}

export const PackageLoading: MessageFns<PackageLoading> = {
  encode(message: PackageLoading, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageLoading {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageLoading();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageLoading {
    return { code: isSet(object.code) ? packageLoading_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: PackageLoading): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = packageLoading_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PackageLoading>, I>>(base?: I): PackageLoading {
    return PackageLoading.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PackageLoading>, I>>(object: I): PackageLoading {
    const message = createBasePackageLoading();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseToolchain(): Toolchain {
  return { code: 0 };
}

export const Toolchain: MessageFns<Toolchain> = {
  encode(message: Toolchain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Toolchain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolchain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Toolchain {
    return { code: isSet(object.code) ? toolchain_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: Toolchain): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = toolchain_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Toolchain>, I>>(base?: I): Toolchain {
    return Toolchain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Toolchain>, I>>(object: I): Toolchain {
    const message = createBaseToolchain();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseStarlarkLoading(): StarlarkLoading {
  return { code: 0 };
}

export const StarlarkLoading: MessageFns<StarlarkLoading> = {
  encode(message: StarlarkLoading, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarlarkLoading {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarlarkLoading();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarlarkLoading {
    return { code: isSet(object.code) ? starlarkLoading_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: StarlarkLoading): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = starlarkLoading_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarlarkLoading>, I>>(base?: I): StarlarkLoading {
    return StarlarkLoading.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarlarkLoading>, I>>(object: I): StarlarkLoading {
    const message = createBaseStarlarkLoading();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseExternalDeps(): ExternalDeps {
  return { code: 0 };
}

export const ExternalDeps: MessageFns<ExternalDeps> = {
  encode(message: ExternalDeps, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalDeps {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalDeps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalDeps {
    return { code: isSet(object.code) ? externalDeps_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ExternalDeps): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = externalDeps_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalDeps>, I>>(base?: I): ExternalDeps {
    return ExternalDeps.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalDeps>, I>>(object: I): ExternalDeps {
    const message = createBaseExternalDeps();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseDiffAwareness(): DiffAwareness {
  return { code: 0 };
}

export const DiffAwareness: MessageFns<DiffAwareness> = {
  encode(message: DiffAwareness, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiffAwareness {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiffAwareness();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiffAwareness {
    return { code: isSet(object.code) ? diffAwareness_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: DiffAwareness): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = diffAwareness_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DiffAwareness>, I>>(base?: I): DiffAwareness {
    return DiffAwareness.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiffAwareness>, I>>(object: I): DiffAwareness {
    const message = createBaseDiffAwareness();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseModCommand(): ModCommand {
  return { code: 0 };
}

export const ModCommand: MessageFns<ModCommand> = {
  encode(message: ModCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModCommand {
    return { code: isSet(object.code) ? modCommand_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: ModCommand): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = modCommand_CodeToJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModCommand>, I>>(base?: I): ModCommand {
    return ModCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModCommand>, I>>(object: I): ModCommand {
    const message = createBaseModCommand();
    message.code = object.code ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
