// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: src/main/protobuf/command_line.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  OptionEffectTag,
  optionEffectTagFromJSON,
  optionEffectTagToJSON,
  OptionMetadataTag,
  optionMetadataTagFromJSON,
  optionMetadataTagToJSON,
} from "./option_filters";

export const protobufPackage = "command_line";

/** Representation of a Bazel command line. */
export interface CommandLine {
  /**
   * A title for this command line value, to differentiate it from others.
   * In particular, a single invocation may wish to report both the literal and
   * canonical command lines, and this label would be used to differentiate
   * between both versions. This is a string for flexibility.
   */
  commandLineLabel: string;
  /**
   * A Bazel command line is made of distinct parts. For example,
   *    `bazel --nomaster_bazelrc test --nocache_test_results //foo:aTest`
   * has the executable "bazel", a startup flag, a command "test", a command
   * flag, and a test target. There could be many more flags and targets, or
   * none (`bazel info` for example), but the basic structure is there. The
   * command line should be broken down into these logical sections here.
   */
  sections: CommandLineSection[];
}

/** A section of the Bazel command line. */
export interface CommandLineSection {
  /** The name of this section, such as "startup_option" or "command". */
  sectionLabel: string;
  /**
   * Sections with non-options, such as the list of targets or the command,
   * should use simple string chunks.
   */
  chunkList?:
    | ChunkList
    | undefined;
  /** Startup and command options are lists of options and belong here. */
  optionList?: OptionList | undefined;
}

/** Wrapper to allow a list of strings in the "oneof" section_type. */
export interface ChunkList {
  chunk: string[];
}

/** Wrapper to allow a list of options in the "oneof" section_type. */
export interface OptionList {
  option: Option[];
}

/**
 * A single command line option.
 *
 * This represents the option itself, but does not take into account the type of
 * option or how the parser interpreted it. If this option is part of a command
 * line that represents the actual input that Bazel received, it would, for
 * example, include expansion flags as they are. However, if this option
 * represents the canonical form of the command line, with the values as Bazel
 * understands them, then the expansion flag, which has no value, would not
 * appear, and the flags it expands to would.
 */
export interface Option {
  /**
   * How the option looks with the option and its value combined. Depending on
   * the purpose of this command line report, this could be the canonical
   * form, or the way that the flag was set.
   *
   * Some examples: this might be `--foo=bar` form, or `--foo bar` with a space;
   * for boolean flags, `--nobaz` is accepted on top of `--baz=false` and other
   * negating values, or for a positive value, the unqualified `--baz` form
   * is also accepted. This could also be a short `-b`, if the flag has an
   * abbreviated form.
   */
  combinedForm: string;
  /** The canonical name of the option, without the preceding dashes. */
  optionName: string;
  /**
   * The value of the flag, or unset for flags that do not take values.
   * Especially for boolean flags, this should be in canonical form, the
   * combined_form field above gives room for showing the flag as it was set
   * if that is preferred.
   */
  optionValue: string;
  /**
   * This flag's tagged effects. See OptionEffectTag's java documentation for
   * details.
   */
  effectTags: OptionEffectTag[];
  /**
   * Metadata about the flag. See OptionMetadataTag's java documentation for
   * details.
   */
  metadataTags: OptionMetadataTag[];
  /**
   * The source of the flag (i.e. whether is was explicitly passed by the user,
   * from which .{bazel,blaze}rc it comes, etc).
   */
  source: string;
}

function createBaseCommandLine(): CommandLine {
  return { commandLineLabel: "", sections: [] };
}

export const CommandLine: MessageFns<CommandLine> = {
  encode(message: CommandLine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commandLineLabel !== "") {
      writer.uint32(10).string(message.commandLineLabel);
    }
    for (const v of message.sections) {
      CommandLineSection.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandLine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandLine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commandLineLabel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sections.push(CommandLineSection.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandLine {
    return {
      commandLineLabel: isSet(object.commandLineLabel) ? globalThis.String(object.commandLineLabel) : "",
      sections: globalThis.Array.isArray(object?.sections)
        ? object.sections.map((e: any) => CommandLineSection.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CommandLine): unknown {
    const obj: any = {};
    if (message.commandLineLabel !== "") {
      obj.commandLineLabel = message.commandLineLabel;
    }
    if (message.sections?.length) {
      obj.sections = message.sections.map((e) => CommandLineSection.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandLine>, I>>(base?: I): CommandLine {
    return CommandLine.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandLine>, I>>(object: I): CommandLine {
    const message = createBaseCommandLine();
    message.commandLineLabel = object.commandLineLabel ?? "";
    message.sections = object.sections?.map((e) => CommandLineSection.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCommandLineSection(): CommandLineSection {
  return { sectionLabel: "", chunkList: undefined, optionList: undefined };
}

export const CommandLineSection: MessageFns<CommandLineSection> = {
  encode(message: CommandLineSection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sectionLabel !== "") {
      writer.uint32(10).string(message.sectionLabel);
    }
    if (message.chunkList !== undefined) {
      ChunkList.encode(message.chunkList, writer.uint32(18).fork()).join();
    }
    if (message.optionList !== undefined) {
      OptionList.encode(message.optionList, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandLineSection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandLineSection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sectionLabel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunkList = ChunkList.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.optionList = OptionList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandLineSection {
    return {
      sectionLabel: isSet(object.sectionLabel) ? globalThis.String(object.sectionLabel) : "",
      chunkList: isSet(object.chunkList) ? ChunkList.fromJSON(object.chunkList) : undefined,
      optionList: isSet(object.optionList) ? OptionList.fromJSON(object.optionList) : undefined,
    };
  },

  toJSON(message: CommandLineSection): unknown {
    const obj: any = {};
    if (message.sectionLabel !== "") {
      obj.sectionLabel = message.sectionLabel;
    }
    if (message.chunkList !== undefined) {
      obj.chunkList = ChunkList.toJSON(message.chunkList);
    }
    if (message.optionList !== undefined) {
      obj.optionList = OptionList.toJSON(message.optionList);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandLineSection>, I>>(base?: I): CommandLineSection {
    return CommandLineSection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandLineSection>, I>>(object: I): CommandLineSection {
    const message = createBaseCommandLineSection();
    message.sectionLabel = object.sectionLabel ?? "";
    message.chunkList = (object.chunkList !== undefined && object.chunkList !== null)
      ? ChunkList.fromPartial(object.chunkList)
      : undefined;
    message.optionList = (object.optionList !== undefined && object.optionList !== null)
      ? OptionList.fromPartial(object.optionList)
      : undefined;
    return message;
  },
};

function createBaseChunkList(): ChunkList {
  return { chunk: [] };
}

export const ChunkList: MessageFns<ChunkList> = {
  encode(message: ChunkList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.chunk) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChunkList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChunkList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunk.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChunkList {
    return { chunk: globalThis.Array.isArray(object?.chunk) ? object.chunk.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: ChunkList): unknown {
    const obj: any = {};
    if (message.chunk?.length) {
      obj.chunk = message.chunk;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChunkList>, I>>(base?: I): ChunkList {
    return ChunkList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChunkList>, I>>(object: I): ChunkList {
    const message = createBaseChunkList();
    message.chunk = object.chunk?.map((e) => e) || [];
    return message;
  },
};

function createBaseOptionList(): OptionList {
  return { option: [] };
}

export const OptionList: MessageFns<OptionList> = {
  encode(message: OptionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.option) {
      Option.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OptionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOptionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.option.push(Option.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OptionList {
    return {
      option: globalThis.Array.isArray(object?.option) ? object.option.map((e: any) => Option.fromJSON(e)) : [],
    };
  },

  toJSON(message: OptionList): unknown {
    const obj: any = {};
    if (message.option?.length) {
      obj.option = message.option.map((e) => Option.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OptionList>, I>>(base?: I): OptionList {
    return OptionList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OptionList>, I>>(object: I): OptionList {
    const message = createBaseOptionList();
    message.option = object.option?.map((e) => Option.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOption(): Option {
  return { combinedForm: "", optionName: "", optionValue: "", effectTags: [], metadataTags: [], source: "" };
}

export const Option: MessageFns<Option> = {
  encode(message: Option, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.combinedForm !== "") {
      writer.uint32(10).string(message.combinedForm);
    }
    if (message.optionName !== "") {
      writer.uint32(18).string(message.optionName);
    }
    if (message.optionValue !== "") {
      writer.uint32(26).string(message.optionValue);
    }
    writer.uint32(34).fork();
    for (const v of message.effectTags) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.metadataTags) {
      writer.int32(v);
    }
    writer.join();
    if (message.source !== "") {
      writer.uint32(50).string(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Option {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.combinedForm = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.optionName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.optionValue = reader.string();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.effectTags.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.effectTags.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.metadataTags.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.metadataTags.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.source = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Option {
    return {
      combinedForm: isSet(object.combinedForm) ? globalThis.String(object.combinedForm) : "",
      optionName: isSet(object.optionName) ? globalThis.String(object.optionName) : "",
      optionValue: isSet(object.optionValue) ? globalThis.String(object.optionValue) : "",
      effectTags: globalThis.Array.isArray(object?.effectTags)
        ? object.effectTags.map((e: any) => optionEffectTagFromJSON(e))
        : [],
      metadataTags: globalThis.Array.isArray(object?.metadataTags)
        ? object.metadataTags.map((e: any) => optionMetadataTagFromJSON(e))
        : [],
      source: isSet(object.source) ? globalThis.String(object.source) : "",
    };
  },

  toJSON(message: Option): unknown {
    const obj: any = {};
    if (message.combinedForm !== "") {
      obj.combinedForm = message.combinedForm;
    }
    if (message.optionName !== "") {
      obj.optionName = message.optionName;
    }
    if (message.optionValue !== "") {
      obj.optionValue = message.optionValue;
    }
    if (message.effectTags?.length) {
      obj.effectTags = message.effectTags.map((e) => optionEffectTagToJSON(e));
    }
    if (message.metadataTags?.length) {
      obj.metadataTags = message.metadataTags.map((e) => optionMetadataTagToJSON(e));
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Option>, I>>(base?: I): Option {
    return Option.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Option>, I>>(object: I): Option {
    const message = createBaseOption();
    message.combinedForm = object.combinedForm ?? "";
    message.optionName = object.optionName ?? "";
    message.optionValue = object.optionValue ?? "";
    message.effectTags = object.effectTags?.map((e) => e) || [];
    message.metadataTags = object.metadataTags?.map((e) => e) || [];
    message.source = object.source ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
