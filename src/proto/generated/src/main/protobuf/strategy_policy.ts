// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: src/main/protobuf/strategy_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "blaze.strategy_policy";

/**
 * Provides control over what strategies (local, remote, etc) may be used.
 *
 * An empty policies (e.g. unset) implies no enforcement, anything is allowed.
 *
 * Policies are enforced against both user-provided values (flags) and
 * application-internal defaults. The latter is useful for guarding against
 * unexpectedly hard-coded defaults.
 *
 * Sample usage to allow everything to execute remotely, while only allowing
 * genrules to execute locally:
 *
 *   strategy_policy {
 *     mnemonic_policy {
 *       default_allowlist: ["remote"]
 *       strategy_allowlist: [
 *         { mnemonic: "Genrule" strategy: ["local"] }
 *       ]
 *     }
 *   }
 */
export interface StrategyPolicy {
  /**
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   */
  mnemonicPolicy?:
    | MnemonicPolicy
    | undefined;
  /**
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   */
  dynamicRemotePolicy?:
    | MnemonicPolicy
    | undefined;
  /**
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   */
  dynamicLocalPolicy?: MnemonicPolicy | undefined;
}

export interface MnemonicPolicy {
  /** Default allowed strategies for mnemonics not present in `strategy` list. */
  defaultAllowlist: string[];
  strategyAllowlist: StrategiesForMnemonic[];
}

/** Per-mnemonic allowlist settings. */
export interface StrategiesForMnemonic {
  mnemonic?: string | undefined;
  strategy: string[];
}

function createBaseStrategyPolicy(): StrategyPolicy {
  return { mnemonicPolicy: undefined, dynamicRemotePolicy: undefined, dynamicLocalPolicy: undefined };
}

export const StrategyPolicy: MessageFns<StrategyPolicy> = {
  encode(message: StrategyPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mnemonicPolicy !== undefined) {
      MnemonicPolicy.encode(message.mnemonicPolicy, writer.uint32(10).fork()).join();
    }
    if (message.dynamicRemotePolicy !== undefined) {
      MnemonicPolicy.encode(message.dynamicRemotePolicy, writer.uint32(18).fork()).join();
    }
    if (message.dynamicLocalPolicy !== undefined) {
      MnemonicPolicy.encode(message.dynamicLocalPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StrategyPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStrategyPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mnemonicPolicy = MnemonicPolicy.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dynamicRemotePolicy = MnemonicPolicy.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dynamicLocalPolicy = MnemonicPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StrategyPolicy {
    return {
      mnemonicPolicy: isSet(object.mnemonicPolicy) ? MnemonicPolicy.fromJSON(object.mnemonicPolicy) : undefined,
      dynamicRemotePolicy: isSet(object.dynamicRemotePolicy)
        ? MnemonicPolicy.fromJSON(object.dynamicRemotePolicy)
        : undefined,
      dynamicLocalPolicy: isSet(object.dynamicLocalPolicy)
        ? MnemonicPolicy.fromJSON(object.dynamicLocalPolicy)
        : undefined,
    };
  },

  toJSON(message: StrategyPolicy): unknown {
    const obj: any = {};
    if (message.mnemonicPolicy !== undefined) {
      obj.mnemonicPolicy = MnemonicPolicy.toJSON(message.mnemonicPolicy);
    }
    if (message.dynamicRemotePolicy !== undefined) {
      obj.dynamicRemotePolicy = MnemonicPolicy.toJSON(message.dynamicRemotePolicy);
    }
    if (message.dynamicLocalPolicy !== undefined) {
      obj.dynamicLocalPolicy = MnemonicPolicy.toJSON(message.dynamicLocalPolicy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StrategyPolicy>, I>>(base?: I): StrategyPolicy {
    return StrategyPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StrategyPolicy>, I>>(object: I): StrategyPolicy {
    const message = createBaseStrategyPolicy();
    message.mnemonicPolicy = (object.mnemonicPolicy !== undefined && object.mnemonicPolicy !== null)
      ? MnemonicPolicy.fromPartial(object.mnemonicPolicy)
      : undefined;
    message.dynamicRemotePolicy = (object.dynamicRemotePolicy !== undefined && object.dynamicRemotePolicy !== null)
      ? MnemonicPolicy.fromPartial(object.dynamicRemotePolicy)
      : undefined;
    message.dynamicLocalPolicy = (object.dynamicLocalPolicy !== undefined && object.dynamicLocalPolicy !== null)
      ? MnemonicPolicy.fromPartial(object.dynamicLocalPolicy)
      : undefined;
    return message;
  },
};

function createBaseMnemonicPolicy(): MnemonicPolicy {
  return { defaultAllowlist: [], strategyAllowlist: [] };
}

export const MnemonicPolicy: MessageFns<MnemonicPolicy> = {
  encode(message: MnemonicPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.defaultAllowlist) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.strategyAllowlist) {
      StrategiesForMnemonic.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MnemonicPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMnemonicPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultAllowlist.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.strategyAllowlist.push(StrategiesForMnemonic.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MnemonicPolicy {
    return {
      defaultAllowlist: globalThis.Array.isArray(object?.defaultAllowlist)
        ? object.defaultAllowlist.map((e: any) => globalThis.String(e))
        : [],
      strategyAllowlist: globalThis.Array.isArray(object?.strategyAllowlist)
        ? object.strategyAllowlist.map((e: any) => StrategiesForMnemonic.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MnemonicPolicy): unknown {
    const obj: any = {};
    if (message.defaultAllowlist?.length) {
      obj.defaultAllowlist = message.defaultAllowlist;
    }
    if (message.strategyAllowlist?.length) {
      obj.strategyAllowlist = message.strategyAllowlist.map((e) => StrategiesForMnemonic.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MnemonicPolicy>, I>>(base?: I): MnemonicPolicy {
    return MnemonicPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MnemonicPolicy>, I>>(object: I): MnemonicPolicy {
    const message = createBaseMnemonicPolicy();
    message.defaultAllowlist = object.defaultAllowlist?.map((e) => e) || [];
    message.strategyAllowlist = object.strategyAllowlist?.map((e) => StrategiesForMnemonic.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStrategiesForMnemonic(): StrategiesForMnemonic {
  return { mnemonic: "", strategy: [] };
}

export const StrategiesForMnemonic: MessageFns<StrategiesForMnemonic> = {
  encode(message: StrategiesForMnemonic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mnemonic !== undefined && message.mnemonic !== "") {
      writer.uint32(10).string(message.mnemonic);
    }
    for (const v of message.strategy) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StrategiesForMnemonic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStrategiesForMnemonic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mnemonic = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.strategy.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StrategiesForMnemonic {
    return {
      mnemonic: isSet(object.mnemonic) ? globalThis.String(object.mnemonic) : "",
      strategy: globalThis.Array.isArray(object?.strategy) ? object.strategy.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StrategiesForMnemonic): unknown {
    const obj: any = {};
    if (message.mnemonic !== undefined && message.mnemonic !== "") {
      obj.mnemonic = message.mnemonic;
    }
    if (message.strategy?.length) {
      obj.strategy = message.strategy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StrategiesForMnemonic>, I>>(base?: I): StrategiesForMnemonic {
    return StrategiesForMnemonic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StrategiesForMnemonic>, I>>(object: I): StrategiesForMnemonic {
    const message = createBaseStrategiesForMnemonic();
    message.mnemonic = object.mnemonic ?? "";
    message.strategy = object.strategy?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
