// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: src/main/java/com/google/devtools/build/lib/packages/metrics/package_load_metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../../../../../google/protobuf/duration";

export const protobufPackage = "devtools.build.lib.packages.metrics";

/**
 * Copyright 2020 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Message used to concisely report all package metrics. */
export interface PackageLoadMetrics {
  /** Name of the package. */
  name?:
    | string
    | undefined;
  /** Wall-time duration it took to construct the package. */
  loadDuration?:
    | Duration
    | undefined;
  /** Number of targets created in the package. */
  numTargets?:
    | string
    | undefined;
  /** Number of Starlark computation steps required to create the package. */
  computationSteps?:
    | string
    | undefined;
  /** Number of transitive Starlark load()s required to create the package. */
  numTransitiveLoads?:
    | string
    | undefined;
  /**
   * Numeric value given to the memory and general accounting costs associated
   * with a loaded package. Values are an approximate but reasonable proxy for
   * the real storage costs of a package.
   */
  packageOverhead?: string | undefined;
}

function createBasePackageLoadMetrics(): PackageLoadMetrics {
  return {
    name: "",
    loadDuration: undefined,
    numTargets: "0",
    computationSteps: "0",
    numTransitiveLoads: "0",
    packageOverhead: "0",
  };
}

export const PackageLoadMetrics: MessageFns<PackageLoadMetrics> = {
  encode(message: PackageLoadMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.loadDuration !== undefined) {
      Duration.encode(message.loadDuration, writer.uint32(18).fork()).join();
    }
    if (message.numTargets !== undefined && message.numTargets !== "0") {
      writer.uint32(24).uint64(message.numTargets);
    }
    if (message.computationSteps !== undefined && message.computationSteps !== "0") {
      writer.uint32(32).uint64(message.computationSteps);
    }
    if (message.numTransitiveLoads !== undefined && message.numTransitiveLoads !== "0") {
      writer.uint32(40).uint64(message.numTransitiveLoads);
    }
    if (message.packageOverhead !== undefined && message.packageOverhead !== "0") {
      writer.uint32(48).uint64(message.packageOverhead);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageLoadMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageLoadMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.loadDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numTargets = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.computationSteps = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numTransitiveLoads = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.packageOverhead = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageLoadMetrics {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      loadDuration: isSet(object.loadDuration) ? Duration.fromJSON(object.loadDuration) : undefined,
      numTargets: isSet(object.numTargets) ? globalThis.String(object.numTargets) : "0",
      computationSteps: isSet(object.computationSteps) ? globalThis.String(object.computationSteps) : "0",
      numTransitiveLoads: isSet(object.numTransitiveLoads) ? globalThis.String(object.numTransitiveLoads) : "0",
      packageOverhead: isSet(object.packageOverhead) ? globalThis.String(object.packageOverhead) : "0",
    };
  },

  toJSON(message: PackageLoadMetrics): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.loadDuration !== undefined) {
      obj.loadDuration = Duration.toJSON(message.loadDuration);
    }
    if (message.numTargets !== undefined && message.numTargets !== "0") {
      obj.numTargets = message.numTargets;
    }
    if (message.computationSteps !== undefined && message.computationSteps !== "0") {
      obj.computationSteps = message.computationSteps;
    }
    if (message.numTransitiveLoads !== undefined && message.numTransitiveLoads !== "0") {
      obj.numTransitiveLoads = message.numTransitiveLoads;
    }
    if (message.packageOverhead !== undefined && message.packageOverhead !== "0") {
      obj.packageOverhead = message.packageOverhead;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PackageLoadMetrics>, I>>(base?: I): PackageLoadMetrics {
    return PackageLoadMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PackageLoadMetrics>, I>>(object: I): PackageLoadMetrics {
    const message = createBasePackageLoadMetrics();
    message.name = object.name ?? "";
    message.loadDuration = (object.loadDuration !== undefined && object.loadDuration !== null)
      ? Duration.fromPartial(object.loadDuration)
      : undefined;
    message.numTargets = object.numTargets ?? "0";
    message.computationSteps = object.computationSteps ?? "0";
    message.numTransitiveLoads = object.numTransitiveLoads ?? "0";
    message.packageOverhead = object.packageOverhead ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
